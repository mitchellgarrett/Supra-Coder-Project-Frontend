{
  "version": 3,
  "sources": ["../../sorted-array/lib/sorted-array.js", "../../augment/lib/augment.js", "../../statemachines/lib/statemachines.js", "../../jison/lib/util/typal.js", "../../jison/lib/util/set.js", "browser-external:fs", "browser-external:path", "../../lex-parser/lex-parser.js", "../../jison-lex/package.json", "../../jison-lex/regexp-lexer.js", "../../ebnf-parser/transform-parser.js", "../../ebnf-parser/ebnf-transform.js", "../../ebnf-parser/parser.js", "../../ebnf-parser/ebnf-parser.js", "../../JSONSelect/src/jsonselect.js", "../../esprima/esprima.js", "../../escodegen/node_modules/estraverse/estraverse.js", "../../source-map/lib/base64.js", "../../source-map/lib/base64-vlq.js", "../../source-map/lib/util.js", "../../source-map/lib/array-set.js", "../../source-map/lib/mapping-list.js", "../../source-map/lib/source-map-generator.js", "../../source-map/lib/binary-search.js", "../../source-map/lib/read-wasm.js", "../../source-map/lib/wasm.js", "../../source-map/lib/source-map-consumer.js", "../../source-map/lib/source-node.js", "../../source-map/source-map.js", "../../escodegen/package.json", "../../escodegen/escodegen.js", "../../jison/package.json", "../../jison/lib/jison.js", "../../regex/lib/parsexp.js", "../../lex/lib/lexer.js", "../../regex/lib/reglex.js", "../../regex/lib/parse.js", "../../regex/lib/regex.js"],
  "sourcesContent": ["if (typeof module === \"object\") module.exports = SortedArray;\n\nSortedArray.prototype.insert = function (element) {\n    var array = this.array;\n    var index = array.length;\n    array.push(element);\n\n    while (index) {\n        var i = index, j = --index;\n\n        if (array[i] < array[j]) {\n            var temp = array[i];\n            array[i] = array[j];\n            array[j] = temp;\n        }\n    }\n\n    return this;\n};\n\nSortedArray.prototype.search = function (element) {\n    var low = 0;\n    var array = this.array;\n    var high = array.length;\n\n    while (high > low) {\n        var index = (high + low) / 2 >>> 0;\n        var cursor = array[index];\n\n        if (cursor < element) low = index + 1;\n        else if (cursor > element) high = index;\n        else return index;\n    }\n\n    return -1;\n};\n\nSortedArray.prototype.remove = function (element) {\n    var index = this.search(element);\n    if (index >= 0) this.array.splice(index, 1);\n    return this;\n};\n\nfunction SortedArray() {\n    var index = 0;\n    this.array = [];\n    var length = arguments.length;\n    while (index < length) this.insert(arguments[index++]);\n}\n", "Function.prototype.augment = function (body) {\n    var base = this.prototype;\n    var prototype = Object.create(base);\n    body.apply(prototype, Array.from(arguments, 1).concat(base));\n    if (!Object.ownPropertyOf(prototype, \"constructor\")) return prototype;\n    var constructor = prototype.constructor;\n    constructor.prototype = prototype;\n    return constructor;\n};\n\n(function funct() {\n    var bind = funct.bind;\n    var bindable = Function.bindable = bind.bind(bind);\n    var callable = Function.callable = bindable(funct.call);\n    Object.ownPropertyOf = callable(funct.hasOwnProperty);\n    Array.from = callable([].slice);\n}());\n", "if (typeof module === \"object\") module.exports = StateMachine;\n\nif (typeof require === \"function\") {\n    var SortedArray = require(\"sorted-array\");\n    require(\"augment\");\n}\n\nvar sortable = Function.bindable(SortedArray, null);\n\nfunction StateMachine(transition, final) {\n    this.transition = transition;\n    this.final = final;\n}\n\nStateMachine.Deterministic = StateMachine.augment(function (base) {\n    this.constructor = function (transition, final) {\n        base.constructor.call(this, transition, final);\n    };\n\n    this.test = function (string) {\n        var state = 0, index = 0;\n        var length = string.length;\n        var transition = this.transition;\n\n        while (index < length) {\n            state = transition[state][string.charAt(index++)];\n            if (typeof state === \"undefined\") return false;\n        }\n\n        return this.final.indexOf(state) >= 0;\n    };\n});\n\nStateMachine.Nondeterministic = StateMachine.augment(function (base) {\n    this.constructor = function (transition, final) {\n        base.constructor.call(this, transition, final);\n    };\n\n    this.test = function (string) {\n        var index = 0;\n        var length = string.length;\n        var state = epsilonMoves.call(this, 0);\n\n        while (index < length) {\n            state = moveOn.apply(this, [string.charAt(index++)].concat(state));\n            if (state.length) state = epsilonMoves.apply(this, state);\n            else return false;\n        }\n\n        return isFinal.apply(this, state);\n    };\n\n    this.subset = function () {\n        var initial = epsilonMoves.call(this, 0);\n        var names = [initial.toString()];\n        var states = [initial];\n        var transition = [];\n        var final = [];\n\n        for (var i = 0; i < states.length; i++) {\n            var state = states[i];\n            var symbols = moves.apply(this, state);\n            var length = symbols.length;\n            var node = {};\n\n            for (var j = 0; j < length; j++) {\n                var symbol = symbols[j];\n                var next = epsilonMoves.apply(this,\n                    moveOn.apply(this, [symbol].concat(state)));\n                var name = next.toString();\n                var index = names.indexOf(name);\n\n                if (index < 0) {\n                    states.push(next);\n                    index = names.length;\n                    names.push(name);\n                }\n\n                node[symbol] = index;\n            }\n\n            transition.push(node);\n\n            if (isFinal.apply(this, state)) final.push(i);\n        }\n\n        return new StateMachine.Deterministic(transition, final);\n    };\n\n    function epsilonMoves() {\n        var stack = Array.from(arguments);\n        var states = new (sortable.apply(null, stack));\n        var transition = this.transition;\n\n        while (stack.length) {\n            var moves = transition[stack.pop()][\"\"];\n\n            if (moves) {\n                var length = moves.length;\n\n                for (var i = 0; i < length; i++) {\n                    var move = moves[i];\n\n                    if (states.search(move) < 0) {\n                        states.insert(move);\n                        stack.push(move);\n                    }\n                }\n            }\n        }\n\n        return states.array;\n    }\n\n    function moves() {\n        var transition = this.transition;\n        var stack = Array.from(arguments);\n        var symbols = new SortedArray;\n\n        while (stack.length) {\n            var keys = Object.keys(transition[stack.pop()]);\n            var length = keys.length;\n\n            for (var i = 0; i < length; i++) {\n                var key = keys[i];\n\n                if (symbols.search(key) < 0)\n                    symbols.insert(key);\n            }\n        }\n\n        return symbols.remove(\"\").array;\n    }\n\n    function moveOn(symbol) {\n        var stack = Array.from(arguments, 1);\n        var transition = this.transition;\n        var states = new SortedArray;\n\n        while (stack.length) {\n            var moves = transition[stack.pop()][symbol];\n\n            if (moves) {\n                var length = moves.length;\n\n                for (var i = 0; i < length; i++) {\n                    var move = moves[i];\n\n                    if (states.search(move) < 0)\n                        states.insert(move);\n                }\n            }\n        }\n\n        return states.array;\n    }\n\n    function isFinal() {\n        var stack = Array.from(arguments);\n        var final = this.final;\n\n        while (stack.length)\n            if (final.indexOf(stack.pop()) >= 0)\n                return true;\n\n        return false;\n    }\n});\n", "/*\n * Introduces a typal object to make classical/prototypal patterns easier\n * Plus some AOP sugar\n *\n * By Zachary Carter <zach@carter.name>\n * MIT Licensed\n * */\n\nvar typal = (function () {\n\nvar create = Object.create || function (o) { function F(){} F.prototype = o; return new F(); };\nvar position = /^(before|after)/;\n\n// basic method layering\n// always returns original method's return value\nfunction layerMethod(k, fun) {\n    var pos = k.match(position)[0],\n        key = k.replace(position, ''),\n        prop = this[key];\n\n    if (pos === 'after') {\n        this[key] = function () {\n            var ret = prop.apply(this, arguments);\n            var args = [].slice.call(arguments);\n            args.splice(0, 0, ret);\n            fun.apply(this, args);\n            return ret;\n        };\n    } else if (pos === 'before') {\n        this[key] = function () {\n            fun.apply(this, arguments);\n            var ret = prop.apply(this, arguments);\n            return ret;\n        };\n    }\n}\n\n// mixes each argument's own properties into calling object,\n// overwriting them or layering them. i.e. an object method 'meth' is\n// layered by mixin methods 'beforemeth' or 'aftermeth'\nfunction typal_mix() {\n    var self = this;\n    for(var i=0,o,k; i<arguments.length; i++) {\n        o=arguments[i];\n        if (!o) continue;\n        if (Object.prototype.hasOwnProperty.call(o,'constructor'))\n            this.constructor = o.constructor;\n        if (Object.prototype.hasOwnProperty.call(o,'toString'))\n            this.toString = o.toString;\n        for(k in o) {\n            if (Object.prototype.hasOwnProperty.call(o, k)) {\n                if(k.match(position) && typeof this[k.replace(position, '')] === 'function')\n                    layerMethod.call(this, k, o[k]);\n                else\n                    this[k] = o[k];\n            }\n        }\n    }\n    return this;\n}\n\nreturn {\n    // extend object with own typalperties of each argument\n    mix: typal_mix,\n\n    // sugar for object begetting and mixing\n    // - Object.create(typal).mix(etc, etc);\n    // + typal.beget(etc, etc);\n    beget: function typal_beget() {\n        return arguments.length ? typal_mix.apply(create(this), arguments) : create(this);\n    },\n\n    // Creates a new Class function based on an object with a constructor method\n    construct: function typal_construct() {\n        var o = typal_mix.apply(create(this), arguments);\n        var constructor = o.constructor;\n        var Klass = o.constructor = function () { return constructor.apply(this, arguments); };\n        Klass.prototype = o;\n        Klass.mix = typal_mix; // allow for easy singleton property extension\n        return Klass;\n    },\n\n    // no op\n    constructor: function typal_constructor() { return this; }\n};\n\n})();\n\nif (typeof exports !== 'undefined')\n    exports.typal = typal;\n", "// Set class to wrap arrays\n\nvar typal = require(\"./typal\").typal;\n\nvar setMixin = {\n    constructor: function Set_constructor (set, raw) {\n        this._items = [];\n        if (set && set.constructor === Array)\n            this._items = raw ? set: set.slice(0);\n        else if(arguments.length)\n            this._items = [].slice.call(arguments,0);\n    },\n    concat: function concat (setB) {\n        this._items.push.apply(this._items, setB._items || setB); \n        return this;\n    },\n    eq: function eq (set) {\n        return this._items.length === set._items.length && this.subset(set); \n    },\n    indexOf: function indexOf (item) {\n        if(item && item.eq) {\n            for(var k=0; k<this._items.length;k++)\n                if(item.eq(this._items[k]))\n                    return k;\n            return -1;\n        }\n        return this._items.indexOf(item);\n    },\n    union: function union (set) {\n        return (new Set(this._items)).concat(this.complement(set));\n    },\n    intersection: function intersection (set) {\n    return this.filter(function (elm) {\n            return set.contains(elm);\n        });\n    },\n    complement: function complement (set) {\n        var that = this;\n        return set.filter(function sub_complement (elm) {\n            return !that.contains(elm);\n        });\n    },\n    subset: function subset (set) {\n        var cont = true;\n        for (var i=0; i<this._items.length && cont;i++) {\n            cont = cont && set.contains(this._items[i]);\n        }\n        return cont;\n    },\n    superset: function superset (set) {\n        return set.subset(this);\n    },\n    joinSet: function joinSet (set) {\n        return this.concat(this.complement(set));\n    },\n    contains: function contains (item) { return this.indexOf(item) !== -1; },\n    item: function item (v, val) { return this._items[v]; },\n    i: function i (v, val) { return this._items[v]; },\n    first: function first () { return this._items[0]; },\n    last: function last () { return this._items[this._items.length-1]; },\n    size: function size () { return this._items.length; },\n    isEmpty: function isEmpty () { return this._items.length === 0; },\n    copy: function copy () { return new Set(this._items); },\n    toString: function toString () { return this._items.toString(); }\n};\n\n\"push shift unshift forEach some every join sort\".split(' ').forEach(function (e,i) {\n    setMixin[e] = function () { return Array.prototype[e].apply(this._items, arguments); };\n    setMixin[e].name = e;\n});\n\"filter slice map\".split(' ').forEach(function (e,i) {\n    setMixin[e] = function () { return new Set(Array.prototype[e].apply(this._items, arguments), true); };\n    setMixin[e].name = e;\n});\n\nvar Set = typal.construct(setMixin).mix({\n    union: function (a, b) {\n        var ar = {};\n        for (var k=a.length-1;k >=0;--k) {\n            ar[a[k]] = true;\n        }\n        for (var i=b.length-1;i >= 0;--i) {\n            if (!ar[b[i]]) {\n                a.push(b[i]);\n            }\n        }\n        return a;\n    }\n});\n\nif (typeof exports !== 'undefined')\n    exports.Set = Set;\n\n", "module.exports = Object.create(new Proxy({}, {\n  get(_, key) {\n    if (\n      key !== '__esModule' &&\n      key !== '__proto__' &&\n      key !== 'constructor' &&\n      key !== 'splice'\n    ) {\n      console.warn(`Module \"fs\" has been externalized for browser compatibility. Cannot access \"fs.${key}\" in client code. See https://vitejs.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`)\n    }\n  }\n}))", "module.exports = Object.create(new Proxy({}, {\n  get(_, key) {\n    if (\n      key !== '__esModule' &&\n      key !== '__proto__' &&\n      key !== 'constructor' &&\n      key !== 'splice'\n    ) {\n      console.warn(`Module \"path\" has been externalized for browser compatibility. Cannot access \"path.${key}\" in client code. See https://vitejs.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`)\n    }\n  }\n}))", "/* parser generated by jison 0.4.6 */\n/*\n  Returns a Parser object of the following structure:\n\n  Parser: {\n    yy: {}\n  }\n\n  Parser.prototype: {\n    yy: {},\n    trace: function(),\n    symbols_: {associative list: name ==> number},\n    terminals_: {associative list: number ==> name},\n    productions_: [...],\n    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),\n    table: [...],\n    defaultActions: {...},\n    parseError: function(str, hash),\n    parse: function(input),\n\n    lexer: {\n        EOF: 1,\n        parseError: function(str, hash),\n        setInput: function(input),\n        input: function(),\n        unput: function(str),\n        more: function(),\n        less: function(n),\n        pastInput: function(),\n        upcomingInput: function(),\n        showPosition: function(),\n        test_match: function(regex_match_array, rule_index),\n        next: function(),\n        lex: function(),\n        begin: function(condition),\n        popState: function(),\n        _currentRules: function(),\n        topState: function(),\n        pushState: function(condition),\n\n        options: {\n            ranges: boolean           (optional: true ==> token location info will include a .range[] member)\n            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)\n            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)\n        },\n\n        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),\n        rules: [...],\n        conditions: {associative list: name ==> set},\n    }\n  }\n\n\n  token location info (@$, _$, etc.): {\n    first_line: n,\n    last_line: n,\n    first_column: n,\n    last_column: n,\n    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)\n  }\n\n\n  the parseError function receives a 'hash' object with these members for lexer and parser errors: {\n    text:        (matched text)\n    token:       (the produced terminal token, if any)\n    line:        (yylineno)\n  }\n  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {\n    loc:         (yylloc)\n    expected:    (string describing the set of expected tokens)\n    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)\n  }\n*/\nvar lex = (function(){\nvar parser = {trace: function trace() { },\nyy: {},\nsymbols_: {\"error\":2,\"lex\":3,\"definitions\":4,\"%%\":5,\"rules\":6,\"epilogue\":7,\"EOF\":8,\"CODE\":9,\"definition\":10,\"ACTION\":11,\"NAME\":12,\"regex\":13,\"START_INC\":14,\"names_inclusive\":15,\"START_EXC\":16,\"names_exclusive\":17,\"START_COND\":18,\"rule\":19,\"start_conditions\":20,\"action\":21,\"{\":22,\"action_body\":23,\"}\":24,\"action_comments_body\":25,\"ACTION_BODY\":26,\"<\":27,\"name_list\":28,\">\":29,\"*\":30,\",\":31,\"regex_list\":32,\"|\":33,\"regex_concat\":34,\"regex_base\":35,\"(\":36,\")\":37,\"SPECIAL_GROUP\":38,\"+\":39,\"?\":40,\"/\":41,\"/!\":42,\"name_expansion\":43,\"range_regex\":44,\"any_group_regex\":45,\".\":46,\"^\":47,\"$\":48,\"string\":49,\"escape_char\":50,\"NAME_BRACE\":51,\"ANY_GROUP_REGEX\":52,\"ESCAPE_CHAR\":53,\"RANGE_REGEX\":54,\"STRING_LIT\":55,\"CHARACTER_LIT\":56,\"$accept\":0,\"$end\":1},\nterminals_: {2:\"error\",5:\"%%\",8:\"EOF\",9:\"CODE\",11:\"ACTION\",12:\"NAME\",14:\"START_INC\",16:\"START_EXC\",18:\"START_COND\",22:\"{\",24:\"}\",26:\"ACTION_BODY\",27:\"<\",29:\">\",30:\"*\",31:\",\",33:\"|\",36:\"(\",37:\")\",38:\"SPECIAL_GROUP\",39:\"+\",40:\"?\",41:\"/\",42:\"/!\",46:\".\",47:\"^\",48:\"$\",51:\"NAME_BRACE\",52:\"ANY_GROUP_REGEX\",53:\"ESCAPE_CHAR\",54:\"RANGE_REGEX\",55:\"STRING_LIT\",56:\"CHARACTER_LIT\"},\nproductions_: [0,[3,4],[7,1],[7,2],[7,3],[4,2],[4,2],[4,0],[10,2],[10,2],[10,2],[15,1],[15,2],[17,1],[17,2],[6,2],[6,1],[19,3],[21,3],[21,1],[23,0],[23,1],[23,5],[23,4],[25,1],[25,2],[20,3],[20,3],[20,0],[28,1],[28,3],[13,1],[32,3],[32,2],[32,1],[32,0],[34,2],[34,1],[35,3],[35,3],[35,2],[35,2],[35,2],[35,2],[35,2],[35,1],[35,2],[35,1],[35,1],[35,1],[35,1],[35,1],[35,1],[43,1],[45,1],[50,1],[44,1],[49,1],[49,1]],\nperformAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {\n/* this == yyval */\n\nvar $0 = $$.length - 1;\nswitch (yystate) {\ncase 1: \n          this.$ = { rules: $$[$0-1] };\n          if ($$[$0-3][0]) this.$.macros = $$[$0-3][0];\n          if ($$[$0-3][1]) this.$.startConditions = $$[$0-3][1];\n          if ($$[$0]) this.$.moduleInclude = $$[$0];\n          if (yy.options) this.$.options = yy.options;\n          if (yy.actionInclude) this.$.actionInclude = yy.actionInclude;\n          delete yy.options;\n          delete yy.actionInclude;\n          return this.$; \n        \nbreak;\ncase 2: this.$ = null; \nbreak;\ncase 3: this.$ = null; \nbreak;\ncase 4: this.$ = $$[$0-1]; \nbreak;\ncase 5:\n          this.$ = $$[$0];\n          if ('length' in $$[$0-1]) {\n            this.$[0] = this.$[0] || {};\n            this.$[0][$$[$0-1][0]] = $$[$0-1][1];\n          } else {\n            this.$[1] = this.$[1] || {};\n            for (var name in $$[$0-1]) {\n              this.$[1][name] = $$[$0-1][name];\n            }\n          }\n        \nbreak;\ncase 6: yy.actionInclude += $$[$0-1]; this.$ = $$[$0]; \nbreak;\ncase 7: yy.actionInclude = ''; this.$ = [null,null]; \nbreak;\ncase 8: this.$ = [$$[$0-1], $$[$0]]; \nbreak;\ncase 9: this.$ = $$[$0]; \nbreak;\ncase 10: this.$ = $$[$0]; \nbreak;\ncase 11: this.$ = {}; this.$[$$[$0]] = 0; \nbreak;\ncase 12: this.$ = $$[$0-1]; this.$[$$[$0]] = 0; \nbreak;\ncase 13: this.$ = {}; this.$[$$[$0]] = 1; \nbreak;\ncase 14: this.$ = $$[$0-1]; this.$[$$[$0]] = 1; \nbreak;\ncase 15: this.$ = $$[$0-1]; this.$.push($$[$0]); \nbreak;\ncase 16: this.$ = [$$[$0]]; \nbreak;\ncase 17: this.$ = $$[$0-2] ? [$$[$0-2], $$[$0-1], $$[$0]] : [$$[$0-1],$$[$0]]; \nbreak;\ncase 18:this.$ = $$[$0-1];\nbreak;\ncase 19:this.$ = $$[$0];\nbreak;\ncase 20:this.$ = '';\nbreak;\ncase 21:this.$ = $$[$0];\nbreak;\ncase 22:this.$ = $$[$0-4]+$$[$0-3]+$$[$0-2]+$$[$0-1]+$$[$0];\nbreak;\ncase 23:this.$ = $$[$0-3] + $$[$0-2] + $$[$0-1] + $$[$0];\nbreak;\ncase 24: this.$ = yytext; \nbreak;\ncase 25: this.$ = $$[$0-1]+$$[$0]; \nbreak;\ncase 26: this.$ = $$[$0-1]; \nbreak;\ncase 27: this.$ = ['*']; \nbreak;\ncase 29: this.$ = [$$[$0]]; \nbreak;\ncase 30: this.$ = $$[$0-2]; this.$.push($$[$0]); \nbreak;\ncase 31:\n          this.$ = $$[$0];\n          if (!(yy.options && yy.options.flex) && this.$.match(/[\\w\\d]$/) && !this.$.match(/\\\\(r|f|n|t|v|s|b|c[A-Z]|x[0-9A-F]{2}|u[a-fA-F0-9]{4}|[0-7]{1,3})$/)) {\n              this.$ += \"\\\\b\";\n          }\n        \nbreak;\ncase 32: this.$ = $$[$0-2] + '|' + $$[$0]; \nbreak;\ncase 33: this.$ = $$[$0-1] + '|'; \nbreak;\ncase 35: this.$ = '' \nbreak;\ncase 36: this.$ = $$[$0-1] + $$[$0]; \nbreak;\ncase 38: this.$ = '(' + $$[$0-1] + ')'; \nbreak;\ncase 39: this.$ = $$[$0-2] + $$[$0-1] + ')'; \nbreak;\ncase 40: this.$ = $$[$0-1] + '+'; \nbreak;\ncase 41: this.$ = $$[$0-1] + '*'; \nbreak;\ncase 42: this.$ = $$[$0-1] + '?'; \nbreak;\ncase 43: this.$ = '(?=' + $$[$0] + ')'; \nbreak;\ncase 44: this.$ = '(?!' + $$[$0] + ')'; \nbreak;\ncase 46: this.$ = $$[$0-1] + $$[$0]; \nbreak;\ncase 48: this.$ = '.'; \nbreak;\ncase 49: this.$ = '^'; \nbreak;\ncase 50: this.$ = '$'; \nbreak;\ncase 54: this.$ = yytext; \nbreak;\ncase 55: this.$ = yytext; \nbreak;\ncase 56: this.$ = yytext; \nbreak;\ncase 57: this.$ = prepareString(yytext.substr(1, yytext.length - 2)); \nbreak;\n}\n},\ntable: [{3:1,4:2,5:[2,7],10:3,11:[1,4],12:[1,5],14:[1,6],16:[1,7]},{1:[3]},{5:[1,8]},{4:9,5:[2,7],10:3,11:[1,4],12:[1,5],14:[1,6],16:[1,7]},{4:10,5:[2,7],10:3,11:[1,4],12:[1,5],14:[1,6],16:[1,7]},{5:[2,35],11:[2,35],12:[2,35],13:11,14:[2,35],16:[2,35],32:12,33:[2,35],34:13,35:14,36:[1,15],38:[1,16],41:[1,17],42:[1,18],43:19,45:20,46:[1,21],47:[1,22],48:[1,23],49:24,50:25,51:[1,26],52:[1,27],53:[1,30],55:[1,28],56:[1,29]},{15:31,18:[1,32]},{17:33,18:[1,34]},{6:35,11:[2,28],19:36,20:37,22:[2,28],27:[1,38],33:[2,28],36:[2,28],38:[2,28],41:[2,28],42:[2,28],46:[2,28],47:[2,28],48:[2,28],51:[2,28],52:[2,28],53:[2,28],55:[2,28],56:[2,28]},{5:[2,5]},{5:[2,6]},{5:[2,8],11:[2,8],12:[2,8],14:[2,8],16:[2,8]},{5:[2,31],11:[2,31],12:[2,31],14:[2,31],16:[2,31],22:[2,31],33:[1,39]},{5:[2,34],11:[2,34],12:[2,34],14:[2,34],16:[2,34],22:[2,34],33:[2,34],35:40,36:[1,15],37:[2,34],38:[1,16],41:[1,17],42:[1,18],43:19,45:20,46:[1,21],47:[1,22],48:[1,23],49:24,50:25,51:[1,26],52:[1,27],53:[1,30],55:[1,28],56:[1,29]},{5:[2,37],11:[2,37],12:[2,37],14:[2,37],16:[2,37],22:[2,37],30:[1,42],33:[2,37],36:[2,37],37:[2,37],38:[2,37],39:[1,41],40:[1,43],41:[2,37],42:[2,37],44:44,46:[2,37],47:[2,37],48:[2,37],51:[2,37],52:[2,37],53:[2,37],54:[1,45],55:[2,37],56:[2,37]},{32:46,33:[2,35],34:13,35:14,36:[1,15],37:[2,35],38:[1,16],41:[1,17],42:[1,18],43:19,45:20,46:[1,21],47:[1,22],48:[1,23],49:24,50:25,51:[1,26],52:[1,27],53:[1,30],55:[1,28],56:[1,29]},{32:47,33:[2,35],34:13,35:14,36:[1,15],37:[2,35],38:[1,16],41:[1,17],42:[1,18],43:19,45:20,46:[1,21],47:[1,22],48:[1,23],49:24,50:25,51:[1,26],52:[1,27],53:[1,30],55:[1,28],56:[1,29]},{35:48,36:[1,15],38:[1,16],41:[1,17],42:[1,18],43:19,45:20,46:[1,21],47:[1,22],48:[1,23],49:24,50:25,51:[1,26],52:[1,27],53:[1,30],55:[1,28],56:[1,29]},{35:49,36:[1,15],38:[1,16],41:[1,17],42:[1,18],43:19,45:20,46:[1,21],47:[1,22],48:[1,23],49:24,50:25,51:[1,26],52:[1,27],53:[1,30],55:[1,28],56:[1,29]},{5:[2,45],11:[2,45],12:[2,45],14:[2,45],16:[2,45],22:[2,45],30:[2,45],33:[2,45],36:[2,45],37:[2,45],38:[2,45],39:[2,45],40:[2,45],41:[2,45],42:[2,45],46:[2,45],47:[2,45],48:[2,45],51:[2,45],52:[2,45],53:[2,45],54:[2,45],55:[2,45],56:[2,45]},{5:[2,47],11:[2,47],12:[2,47],14:[2,47],16:[2,47],22:[2,47],30:[2,47],33:[2,47],36:[2,47],37:[2,47],38:[2,47],39:[2,47],40:[2,47],41:[2,47],42:[2,47],46:[2,47],47:[2,47],48:[2,47],51:[2,47],52:[2,47],53:[2,47],54:[2,47],55:[2,47],56:[2,47]},{5:[2,48],11:[2,48],12:[2,48],14:[2,48],16:[2,48],22:[2,48],30:[2,48],33:[2,48],36:[2,48],37:[2,48],38:[2,48],39:[2,48],40:[2,48],41:[2,48],42:[2,48],46:[2,48],47:[2,48],48:[2,48],51:[2,48],52:[2,48],53:[2,48],54:[2,48],55:[2,48],56:[2,48]},{5:[2,49],11:[2,49],12:[2,49],14:[2,49],16:[2,49],22:[2,49],30:[2,49],33:[2,49],36:[2,49],37:[2,49],38:[2,49],39:[2,49],40:[2,49],41:[2,49],42:[2,49],46:[2,49],47:[2,49],48:[2,49],51:[2,49],52:[2,49],53:[2,49],54:[2,49],55:[2,49],56:[2,49]},{5:[2,50],11:[2,50],12:[2,50],14:[2,50],16:[2,50],22:[2,50],30:[2,50],33:[2,50],36:[2,50],37:[2,50],38:[2,50],39:[2,50],40:[2,50],41:[2,50],42:[2,50],46:[2,50],47:[2,50],48:[2,50],51:[2,50],52:[2,50],53:[2,50],54:[2,50],55:[2,50],56:[2,50]},{5:[2,51],11:[2,51],12:[2,51],14:[2,51],16:[2,51],22:[2,51],30:[2,51],33:[2,51],36:[2,51],37:[2,51],38:[2,51],39:[2,51],40:[2,51],41:[2,51],42:[2,51],46:[2,51],47:[2,51],48:[2,51],51:[2,51],52:[2,51],53:[2,51],54:[2,51],55:[2,51],56:[2,51]},{5:[2,52],11:[2,52],12:[2,52],14:[2,52],16:[2,52],22:[2,52],30:[2,52],33:[2,52],36:[2,52],37:[2,52],38:[2,52],39:[2,52],40:[2,52],41:[2,52],42:[2,52],46:[2,52],47:[2,52],48:[2,52],51:[2,52],52:[2,52],53:[2,52],54:[2,52],55:[2,52],56:[2,52]},{5:[2,53],11:[2,53],12:[2,53],14:[2,53],16:[2,53],22:[2,53],30:[2,53],33:[2,53],36:[2,53],37:[2,53],38:[2,53],39:[2,53],40:[2,53],41:[2,53],42:[2,53],46:[2,53],47:[2,53],48:[2,53],51:[2,53],52:[2,53],53:[2,53],54:[2,53],55:[2,53],56:[2,53]},{5:[2,54],11:[2,54],12:[2,54],14:[2,54],16:[2,54],22:[2,54],30:[2,54],33:[2,54],36:[2,54],37:[2,54],38:[2,54],39:[2,54],40:[2,54],41:[2,54],42:[2,54],46:[2,54],47:[2,54],48:[2,54],51:[2,54],52:[2,54],53:[2,54],54:[2,54],55:[2,54],56:[2,54]},{5:[2,57],11:[2,57],12:[2,57],14:[2,57],16:[2,57],22:[2,57],30:[2,57],33:[2,57],36:[2,57],37:[2,57],38:[2,57],39:[2,57],40:[2,57],41:[2,57],42:[2,57],46:[2,57],47:[2,57],48:[2,57],51:[2,57],52:[2,57],53:[2,57],54:[2,57],55:[2,57],56:[2,57]},{5:[2,58],11:[2,58],12:[2,58],14:[2,58],16:[2,58],22:[2,58],30:[2,58],33:[2,58],36:[2,58],37:[2,58],38:[2,58],39:[2,58],40:[2,58],41:[2,58],42:[2,58],46:[2,58],47:[2,58],48:[2,58],51:[2,58],52:[2,58],53:[2,58],54:[2,58],55:[2,58],56:[2,58]},{5:[2,55],11:[2,55],12:[2,55],14:[2,55],16:[2,55],22:[2,55],30:[2,55],33:[2,55],36:[2,55],37:[2,55],38:[2,55],39:[2,55],40:[2,55],41:[2,55],42:[2,55],46:[2,55],47:[2,55],48:[2,55],51:[2,55],52:[2,55],53:[2,55],54:[2,55],55:[2,55],56:[2,55]},{5:[2,9],11:[2,9],12:[2,9],14:[2,9],16:[2,9],18:[1,50]},{5:[2,11],11:[2,11],12:[2,11],14:[2,11],16:[2,11],18:[2,11]},{5:[2,10],11:[2,10],12:[2,10],14:[2,10],16:[2,10],18:[1,51]},{5:[2,13],11:[2,13],12:[2,13],14:[2,13],16:[2,13],18:[2,13]},{5:[1,55],7:52,8:[1,54],11:[2,28],19:53,20:37,22:[2,28],27:[1,38],33:[2,28],36:[2,28],38:[2,28],41:[2,28],42:[2,28],46:[2,28],47:[2,28],48:[2,28],51:[2,28],52:[2,28],53:[2,28],55:[2,28],56:[2,28]},{5:[2,16],8:[2,16],11:[2,16],22:[2,16],27:[2,16],33:[2,16],36:[2,16],38:[2,16],41:[2,16],42:[2,16],46:[2,16],47:[2,16],48:[2,16],51:[2,16],52:[2,16],53:[2,16],55:[2,16],56:[2,16]},{11:[2,35],13:56,22:[2,35],32:12,33:[2,35],34:13,35:14,36:[1,15],38:[1,16],41:[1,17],42:[1,18],43:19,45:20,46:[1,21],47:[1,22],48:[1,23],49:24,50:25,51:[1,26],52:[1,27],53:[1,30],55:[1,28],56:[1,29]},{12:[1,59],28:57,30:[1,58]},{5:[2,33],11:[2,33],12:[2,33],14:[2,33],16:[2,33],22:[2,33],33:[2,33],34:60,35:14,36:[1,15],37:[2,33],38:[1,16],41:[1,17],42:[1,18],43:19,45:20,46:[1,21],47:[1,22],48:[1,23],49:24,50:25,51:[1,26],52:[1,27],53:[1,30],55:[1,28],56:[1,29]},{5:[2,36],11:[2,36],12:[2,36],14:[2,36],16:[2,36],22:[2,36],30:[1,42],33:[2,36],36:[2,36],37:[2,36],38:[2,36],39:[1,41],40:[1,43],41:[2,36],42:[2,36],44:44,46:[2,36],47:[2,36],48:[2,36],51:[2,36],52:[2,36],53:[2,36],54:[1,45],55:[2,36],56:[2,36]},{5:[2,40],11:[2,40],12:[2,40],14:[2,40],16:[2,40],22:[2,40],30:[2,40],33:[2,40],36:[2,40],37:[2,40],38:[2,40],39:[2,40],40:[2,40],41:[2,40],42:[2,40],46:[2,40],47:[2,40],48:[2,40],51:[2,40],52:[2,40],53:[2,40],54:[2,40],55:[2,40],56:[2,40]},{5:[2,41],11:[2,41],12:[2,41],14:[2,41],16:[2,41],22:[2,41],30:[2,41],33:[2,41],36:[2,41],37:[2,41],38:[2,41],39:[2,41],40:[2,41],41:[2,41],42:[2,41],46:[2,41],47:[2,41],48:[2,41],51:[2,41],52:[2,41],53:[2,41],54:[2,41],55:[2,41],56:[2,41]},{5:[2,42],11:[2,42],12:[2,42],14:[2,42],16:[2,42],22:[2,42],30:[2,42],33:[2,42],36:[2,42],37:[2,42],38:[2,42],39:[2,42],40:[2,42],41:[2,42],42:[2,42],46:[2,42],47:[2,42],48:[2,42],51:[2,42],52:[2,42],53:[2,42],54:[2,42],55:[2,42],56:[2,42]},{5:[2,46],11:[2,46],12:[2,46],14:[2,46],16:[2,46],22:[2,46],30:[2,46],33:[2,46],36:[2,46],37:[2,46],38:[2,46],39:[2,46],40:[2,46],41:[2,46],42:[2,46],46:[2,46],47:[2,46],48:[2,46],51:[2,46],52:[2,46],53:[2,46],54:[2,46],55:[2,46],56:[2,46]},{5:[2,56],11:[2,56],12:[2,56],14:[2,56],16:[2,56],22:[2,56],30:[2,56],33:[2,56],36:[2,56],37:[2,56],38:[2,56],39:[2,56],40:[2,56],41:[2,56],42:[2,56],46:[2,56],47:[2,56],48:[2,56],51:[2,56],52:[2,56],53:[2,56],54:[2,56],55:[2,56],56:[2,56]},{33:[1,39],37:[1,61]},{33:[1,39],37:[1,62]},{5:[2,43],11:[2,43],12:[2,43],14:[2,43],16:[2,43],22:[2,43],30:[1,42],33:[2,43],36:[2,43],37:[2,43],38:[2,43],39:[1,41],40:[1,43],41:[2,43],42:[2,43],44:44,46:[2,43],47:[2,43],48:[2,43],51:[2,43],52:[2,43],53:[2,43],54:[1,45],55:[2,43],56:[2,43]},{5:[2,44],11:[2,44],12:[2,44],14:[2,44],16:[2,44],22:[2,44],30:[1,42],33:[2,44],36:[2,44],37:[2,44],38:[2,44],39:[1,41],40:[1,43],41:[2,44],42:[2,44],44:44,46:[2,44],47:[2,44],48:[2,44],51:[2,44],52:[2,44],53:[2,44],54:[1,45],55:[2,44],56:[2,44]},{5:[2,12],11:[2,12],12:[2,12],14:[2,12],16:[2,12],18:[2,12]},{5:[2,14],11:[2,14],12:[2,14],14:[2,14],16:[2,14],18:[2,14]},{1:[2,1]},{5:[2,15],8:[2,15],11:[2,15],22:[2,15],27:[2,15],33:[2,15],36:[2,15],38:[2,15],41:[2,15],42:[2,15],46:[2,15],47:[2,15],48:[2,15],51:[2,15],52:[2,15],53:[2,15],55:[2,15],56:[2,15]},{1:[2,2]},{8:[1,63],9:[1,64]},{11:[1,67],21:65,22:[1,66]},{29:[1,68],31:[1,69]},{29:[1,70]},{29:[2,29],31:[2,29]},{5:[2,32],11:[2,32],12:[2,32],14:[2,32],16:[2,32],22:[2,32],33:[2,32],35:40,36:[1,15],37:[2,32],38:[1,16],41:[1,17],42:[1,18],43:19,45:20,46:[1,21],47:[1,22],48:[1,23],49:24,50:25,51:[1,26],52:[1,27],53:[1,30],55:[1,28],56:[1,29]},{5:[2,38],11:[2,38],12:[2,38],14:[2,38],16:[2,38],22:[2,38],30:[2,38],33:[2,38],36:[2,38],37:[2,38],38:[2,38],39:[2,38],40:[2,38],41:[2,38],42:[2,38],46:[2,38],47:[2,38],48:[2,38],51:[2,38],52:[2,38],53:[2,38],54:[2,38],55:[2,38],56:[2,38]},{5:[2,39],11:[2,39],12:[2,39],14:[2,39],16:[2,39],22:[2,39],30:[2,39],33:[2,39],36:[2,39],37:[2,39],38:[2,39],39:[2,39],40:[2,39],41:[2,39],42:[2,39],46:[2,39],47:[2,39],48:[2,39],51:[2,39],52:[2,39],53:[2,39],54:[2,39],55:[2,39],56:[2,39]},{1:[2,3]},{8:[1,71]},{5:[2,17],8:[2,17],11:[2,17],22:[2,17],27:[2,17],33:[2,17],36:[2,17],38:[2,17],41:[2,17],42:[2,17],46:[2,17],47:[2,17],48:[2,17],51:[2,17],52:[2,17],53:[2,17],55:[2,17],56:[2,17]},{22:[2,20],23:72,24:[2,20],25:73,26:[1,74]},{5:[2,19],8:[2,19],11:[2,19],22:[2,19],27:[2,19],33:[2,19],36:[2,19],38:[2,19],41:[2,19],42:[2,19],46:[2,19],47:[2,19],48:[2,19],51:[2,19],52:[2,19],53:[2,19],55:[2,19],56:[2,19]},{11:[2,26],22:[2,26],33:[2,26],36:[2,26],38:[2,26],41:[2,26],42:[2,26],46:[2,26],47:[2,26],48:[2,26],51:[2,26],52:[2,26],53:[2,26],55:[2,26],56:[2,26]},{12:[1,75]},{11:[2,27],22:[2,27],33:[2,27],36:[2,27],38:[2,27],41:[2,27],42:[2,27],46:[2,27],47:[2,27],48:[2,27],51:[2,27],52:[2,27],53:[2,27],55:[2,27],56:[2,27]},{1:[2,4]},{22:[1,77],24:[1,76]},{22:[2,21],24:[2,21],26:[1,78]},{22:[2,24],24:[2,24],26:[2,24]},{29:[2,30],31:[2,30]},{5:[2,18],8:[2,18],11:[2,18],22:[2,18],27:[2,18],33:[2,18],36:[2,18],38:[2,18],41:[2,18],42:[2,18],46:[2,18],47:[2,18],48:[2,18],51:[2,18],52:[2,18],53:[2,18],55:[2,18],56:[2,18]},{22:[2,20],23:79,24:[2,20],25:73,26:[1,74]},{22:[2,25],24:[2,25],26:[2,25]},{22:[1,77],24:[1,80]},{22:[2,23],24:[2,23],25:81,26:[1,74]},{22:[2,22],24:[2,22],26:[1,78]}],\ndefaultActions: {9:[2,5],10:[2,6],52:[2,1],54:[2,2],63:[2,3],71:[2,4]},\nparseError: function parseError(str, hash) {\n    if (hash.recoverable) {\n        this.trace(str);\n    } else {\n        throw new Error(str);\n    }\n},\nparse: function parse(input) {\n    var self = this, stack = [0], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;\n    this.lexer.setInput(input);\n    this.lexer.yy = this.yy;\n    this.yy.lexer = this.lexer;\n    this.yy.parser = this;\n    if (typeof this.lexer.yylloc == 'undefined') {\n        this.lexer.yylloc = {};\n    }\n    var yyloc = this.lexer.yylloc;\n    lstack.push(yyloc);\n    var ranges = this.lexer.options && this.lexer.options.ranges;\n    if (typeof this.yy.parseError === 'function') {\n        this.parseError = this.yy.parseError;\n    } else {\n        this.parseError = Object.getPrototypeOf(this).parseError;\n    }\n    function popStack(n) {\n        stack.length = stack.length - 2 * n;\n        vstack.length = vstack.length - n;\n        lstack.length = lstack.length - n;\n    }\n    function lex() {\n        var token;\n        token = self.lexer.lex() || EOF;\n        if (typeof token !== 'number') {\n            token = self.symbols_[token] || token;\n        }\n        return token;\n    }\n    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;\n    while (true) {\n        state = stack[stack.length - 1];\n        if (this.defaultActions[state]) {\n            action = this.defaultActions[state];\n        } else {\n            if (symbol === null || typeof symbol == 'undefined') {\n                symbol = lex();\n            }\n            action = table[state] && table[state][symbol];\n        }\n                    if (typeof action === 'undefined' || !action.length || !action[0]) {\n                var errStr = '';\n                expected = [];\n                for (p in table[state]) {\n                    if (this.terminals_[p] && p > TERROR) {\n                        expected.push('\\'' + this.terminals_[p] + '\\'');\n                    }\n                }\n                if (this.lexer.showPosition) {\n                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\\n' + this.lexer.showPosition() + '\\nExpecting ' + expected.join(', ') + ', got \\'' + (this.terminals_[symbol] || symbol) + '\\'';\n                } else {\n                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\\'' + (this.terminals_[symbol] || symbol) + '\\'');\n                }\n                this.parseError(errStr, {\n                    text: this.lexer.match,\n                    token: this.terminals_[symbol] || symbol,\n                    line: this.lexer.yylineno,\n                    loc: yyloc,\n                    expected: expected\n                });\n            }\n        if (action[0] instanceof Array && action.length > 1) {\n            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);\n        }\n        switch (action[0]) {\n        case 1:\n            stack.push(symbol);\n            vstack.push(this.lexer.yytext);\n            lstack.push(this.lexer.yylloc);\n            stack.push(action[1]);\n            symbol = null;\n            if (!preErrorSymbol) {\n                yyleng = this.lexer.yyleng;\n                yytext = this.lexer.yytext;\n                yylineno = this.lexer.yylineno;\n                yyloc = this.lexer.yylloc;\n                if (recovering > 0) {\n                    recovering--;\n                }\n            } else {\n                symbol = preErrorSymbol;\n                preErrorSymbol = null;\n            }\n            break;\n        case 2:\n            len = this.productions_[action[1]][1];\n            yyval.$ = vstack[vstack.length - len];\n            yyval._$ = {\n                first_line: lstack[lstack.length - (len || 1)].first_line,\n                last_line: lstack[lstack.length - 1].last_line,\n                first_column: lstack[lstack.length - (len || 1)].first_column,\n                last_column: lstack[lstack.length - 1].last_column\n            };\n            if (ranges) {\n                yyval._$.range = [\n                    lstack[lstack.length - (len || 1)].range[0],\n                    lstack[lstack.length - 1].range[1]\n                ];\n            }\n            r = this.performAction.call(yyval, yytext, yyleng, yylineno, this.yy, action[1], vstack, lstack);\n            if (typeof r !== 'undefined') {\n                return r;\n            }\n            if (len) {\n                stack = stack.slice(0, -1 * len * 2);\n                vstack = vstack.slice(0, -1 * len);\n                lstack = lstack.slice(0, -1 * len);\n            }\n            stack.push(this.productions_[action[1]][0]);\n            vstack.push(yyval.$);\n            lstack.push(yyval._$);\n            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];\n            stack.push(newState);\n            break;\n        case 3:\n            return true;\n        }\n    }\n    return true;\n}};\n\n\nfunction encodeRE (s) {\n    return s.replace(/([.*+?^${}()|[\\]\\/\\\\])/g, '\\\\$1').replace(/\\\\\\\\u([a-fA-F0-9]{4})/g,'\\\\u$1');\n}\n\nfunction prepareString (s) {\n    // unescape slashes\n    s = s.replace(/\\\\\\\\/g, \"\\\\\");\n    s = encodeRE(s);\n    return s;\n};\n\n/* generated by jison-lex 0.2.1 */\nvar lexer = (function(){\nvar lexer = {\n\nEOF:1,\n\nparseError:function parseError(str, hash) {\n        if (this.yy.parser) {\n            this.yy.parser.parseError(str, hash);\n        } else {\n            throw new Error(str);\n        }\n    },\n\n// resets the lexer, sets new input\nsetInput:function (input) {\n        this._input = input;\n        this._more = this._backtrack = this.done = false;\n        this.yylineno = this.yyleng = 0;\n        this.yytext = this.matched = this.match = '';\n        this.conditionStack = ['INITIAL'];\n        this.yylloc = {\n            first_line: 1,\n            first_column: 0,\n            last_line: 1,\n            last_column: 0\n        };\n        if (this.options.ranges) {\n            this.yylloc.range = [0,0];\n        }\n        this.offset = 0;\n        return this;\n    },\n\n// consumes and returns one char from the input\ninput:function () {\n        var ch = this._input[0];\n        this.yytext += ch;\n        this.yyleng++;\n        this.offset++;\n        this.match += ch;\n        this.matched += ch;\n        var lines = ch.match(/(?:\\r\\n?|\\n).*/g);\n        if (lines) {\n            this.yylineno++;\n            this.yylloc.last_line++;\n        } else {\n            this.yylloc.last_column++;\n        }\n        if (this.options.ranges) {\n            this.yylloc.range[1]++;\n        }\n\n        this._input = this._input.slice(1);\n        return ch;\n    },\n\n// unshifts one char (or a string) into the input\nunput:function (ch) {\n        var len = ch.length;\n        var lines = ch.split(/(?:\\r\\n?|\\n)/g);\n\n        this._input = ch + this._input;\n        this.yytext = this.yytext.substr(0, this.yytext.length - len - 1);\n        //this.yyleng -= len;\n        this.offset -= len;\n        var oldLines = this.match.split(/(?:\\r\\n?|\\n)/g);\n        this.match = this.match.substr(0, this.match.length - 1);\n        this.matched = this.matched.substr(0, this.matched.length - 1);\n\n        if (lines.length - 1) {\n            this.yylineno -= lines.length - 1;\n        }\n        var r = this.yylloc.range;\n\n        this.yylloc = {\n            first_line: this.yylloc.first_line,\n            last_line: this.yylineno + 1,\n            first_column: this.yylloc.first_column,\n            last_column: lines ?\n                (lines.length === oldLines.length ? this.yylloc.first_column : 0)\n                 + oldLines[oldLines.length - lines.length].length - lines[0].length :\n              this.yylloc.first_column - len\n        };\n\n        if (this.options.ranges) {\n            this.yylloc.range = [r[0], r[0] + this.yyleng - len];\n        }\n        this.yyleng = this.yytext.length;\n        return this;\n    },\n\n// When called from action, caches matched text and appends it on next action\nmore:function () {\n        this._more = true;\n        return this;\n    },\n\n// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.\nreject:function () {\n        if (this.options.backtrack_lexer) {\n            this._backtrack = true;\n        } else {\n            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\\n' + this.showPosition(), {\n                text: \"\",\n                token: null,\n                line: this.yylineno\n            });\n\n        }\n        return this;\n    },\n\n// retain first n characters of the match\nless:function (n) {\n        this.unput(this.match.slice(n));\n    },\n\n// displays already matched input, i.e. for error messages\npastInput:function () {\n        var past = this.matched.substr(0, this.matched.length - this.match.length);\n        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\\n/g, \"\");\n    },\n\n// displays upcoming input, i.e. for error messages\nupcomingInput:function () {\n        var next = this.match;\n        if (next.length < 20) {\n            next += this._input.substr(0, 20-next.length);\n        }\n        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\\n/g, \"\");\n    },\n\n// displays the character position where the lexing error occurred, i.e. for error messages\nshowPosition:function () {\n        var pre = this.pastInput();\n        var c = new Array(pre.length + 1).join(\"-\");\n        return pre + this.upcomingInput() + \"\\n\" + c + \"^\";\n    },\n\n// test the lexed token: return FALSE when not a match, otherwise return token\ntest_match:function (match, indexed_rule) {\n        var token,\n            lines,\n            backup;\n\n        if (this.options.backtrack_lexer) {\n            // save context\n            backup = {\n                yylineno: this.yylineno,\n                yylloc: {\n                    first_line: this.yylloc.first_line,\n                    last_line: this.last_line,\n                    first_column: this.yylloc.first_column,\n                    last_column: this.yylloc.last_column\n                },\n                yytext: this.yytext,\n                match: this.match,\n                matches: this.matches,\n                matched: this.matched,\n                yyleng: this.yyleng,\n                offset: this.offset,\n                _more: this._more,\n                _input: this._input,\n                yy: this.yy,\n                conditionStack: this.conditionStack.slice(0),\n                done: this.done\n            };\n            if (this.options.ranges) {\n                backup.yylloc.range = this.yylloc.range.slice(0);\n            }\n        }\n\n        lines = match[0].match(/(?:\\r\\n?|\\n).*/g);\n        if (lines) {\n            this.yylineno += lines.length;\n        }\n        this.yylloc = {\n            first_line: this.yylloc.last_line,\n            last_line: this.yylineno + 1,\n            first_column: this.yylloc.last_column,\n            last_column: lines ?\n                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\\r?\\n?/)[0].length :\n                         this.yylloc.last_column + match[0].length\n        };\n        this.yytext += match[0];\n        this.match += match[0];\n        this.matches = match;\n        this.yyleng = this.yytext.length;\n        if (this.options.ranges) {\n            this.yylloc.range = [this.offset, this.offset += this.yyleng];\n        }\n        this._more = false;\n        this._backtrack = false;\n        this._input = this._input.slice(match[0].length);\n        this.matched += match[0];\n        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);\n        if (this.done && this._input) {\n            this.done = false;\n        }\n        if (token) {\n            return token;\n        } else if (this._backtrack) {\n            // recover context\n            for (var k in backup) {\n                this[k] = backup[k];\n            }\n            return false; // rule action called reject() implying the next rule should be tested instead.\n        }\n        return false;\n    },\n\n// return next match in input\nnext:function () {\n        if (this.done) {\n            return this.EOF;\n        }\n        if (!this._input) {\n            this.done = true;\n        }\n\n        var token,\n            match,\n            tempMatch,\n            index;\n        if (!this._more) {\n            this.yytext = '';\n            this.match = '';\n        }\n        var rules = this._currentRules();\n        for (var i = 0; i < rules.length; i++) {\n            tempMatch = this._input.match(this.rules[rules[i]]);\n            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {\n                match = tempMatch;\n                index = i;\n                if (this.options.backtrack_lexer) {\n                    token = this.test_match(tempMatch, rules[i]);\n                    if (token !== false) {\n                        return token;\n                    } else if (this._backtrack) {\n                        match = false;\n                        continue; // rule action called reject() implying a rule MISmatch.\n                    } else {\n                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)\n                        return false;\n                    }\n                } else if (!this.options.flex) {\n                    break;\n                }\n            }\n        }\n        if (match) {\n            token = this.test_match(match, rules[index]);\n            if (token !== false) {\n                return token;\n            }\n            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)\n            return false;\n        }\n        if (this._input === \"\") {\n            return this.EOF;\n        } else {\n            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\\n' + this.showPosition(), {\n                text: \"\",\n                token: null,\n                line: this.yylineno\n            });\n        }\n    },\n\n// return next match that has a token\nlex:function lex() {\n        var r = this.next();\n        if (r) {\n            return r;\n        } else {\n            return this.lex();\n        }\n    },\n\n// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)\nbegin:function begin(condition) {\n        this.conditionStack.push(condition);\n    },\n\n// pop the previously active lexer condition state off the condition stack\npopState:function popState() {\n        var n = this.conditionStack.length - 1;\n        if (n > 0) {\n            return this.conditionStack.pop();\n        } else {\n            return this.conditionStack[0];\n        }\n    },\n\n// produce the lexer rule set which is active for the currently active lexer condition state\n_currentRules:function _currentRules() {\n        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {\n            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;\n        } else {\n            return this.conditions[\"INITIAL\"].rules;\n        }\n    },\n\n// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available\ntopState:function topState(n) {\n        n = this.conditionStack.length - 1 - Math.abs(n || 0);\n        if (n >= 0) {\n            return this.conditionStack[n];\n        } else {\n            return \"INITIAL\";\n        }\n    },\n\n// alias for begin(condition)\npushState:function pushState(condition) {\n        this.begin(condition);\n    },\n\n// return the number of states currently on the stack\nstateStackSize:function stateStackSize() {\n        return this.conditionStack.length;\n    },\noptions: {},\nperformAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {\n\nvar YYSTATE=YY_START;\nswitch($avoiding_name_collisions) {\ncase 0:return 26;\nbreak;\ncase 1:return 26;\nbreak;\ncase 2:return 26; // regexp with braces or quotes (and no spaces)\nbreak;\ncase 3:return 26;\nbreak;\ncase 4:return 26;\nbreak;\ncase 5:return 26;\nbreak;\ncase 6:return 26;\nbreak;\ncase 7:yy.depth++; return 22\nbreak;\ncase 8:yy.depth == 0 ? this.begin('trail') : yy.depth--; return 24\nbreak;\ncase 9:return 12;\nbreak;\ncase 10:this.popState(); return 29;\nbreak;\ncase 11:return 31;\nbreak;\ncase 12:return 30;\nbreak;\ncase 13:/* */\nbreak;\ncase 14:/* */\nbreak;\ncase 15:this.begin('indented')\nbreak;\ncase 16:this.begin('code'); return 5\nbreak;\ncase 17:return 56\nbreak;\ncase 18:yy.options[yy_.yytext] = true\nbreak;\ncase 19:this.begin('INITIAL')\nbreak;\ncase 20:this.begin('INITIAL')\nbreak;\ncase 21:/* empty */\nbreak;\ncase 22:return 18\nbreak;\ncase 23:this.begin('INITIAL')\nbreak;\ncase 24:this.begin('INITIAL')\nbreak;\ncase 25:/* empty */\nbreak;\ncase 26:this.begin('rules')\nbreak;\ncase 27:yy.depth = 0; this.begin('action'); return 22\nbreak;\ncase 28:this.begin('trail'); yy_.yytext = yy_.yytext.substr(2, yy_.yytext.length-4);return 11\nbreak;\ncase 29:yy_.yytext = yy_.yytext.substr(2, yy_.yytext.length-4); return 11\nbreak;\ncase 30:this.begin('rules'); return 11\nbreak;\ncase 31:/* ignore */\nbreak;\ncase 32:/* ignore */\nbreak;\ncase 33:/* */\nbreak;\ncase 34:/* */\nbreak;\ncase 35:return 12;\nbreak;\ncase 36:yy_.yytext = yy_.yytext.replace(/\\\\\"/g,'\"'); return 55;\nbreak;\ncase 37:yy_.yytext = yy_.yytext.replace(/\\\\'/g,\"'\"); return 55;\nbreak;\ncase 38:return 33;\nbreak;\ncase 39:return 52;\nbreak;\ncase 40:return 38;\nbreak;\ncase 41:return 38;\nbreak;\ncase 42:return 38;\nbreak;\ncase 43:return 36;\nbreak;\ncase 44:return 37;\nbreak;\ncase 45:return 39;\nbreak;\ncase 46:return 30;\nbreak;\ncase 47:return 40;\nbreak;\ncase 48:return 47;\nbreak;\ncase 49:return 31;\nbreak;\ncase 50:return 48;\nbreak;\ncase 51:this.begin('conditions'); return 27;\nbreak;\ncase 52:return 42;\nbreak;\ncase 53:return 41;\nbreak;\ncase 54:return 53;\nbreak;\ncase 55:yy_.yytext = yy_.yytext.replace(/^\\\\/g,''); return 53;\nbreak;\ncase 56:return 48;\nbreak;\ncase 57:return 46;\nbreak;\ncase 58:yy.options = {}; this.begin('options');\nbreak;\ncase 59:this.begin('start_condition'); return 14;\nbreak;\ncase 60:this.begin('start_condition'); return 16;\nbreak;\ncase 61:this.begin('rules'); return 5;\nbreak;\ncase 62:return 54;\nbreak;\ncase 63:return 51;\nbreak;\ncase 64:return 22;\nbreak;\ncase 65:return 24;\nbreak;\ncase 66:/* ignore bad characters */\nbreak;\ncase 67:return 8;\nbreak;\ncase 68:return 9;\nbreak;\n}\n},\nrules: [/^(?:\\/\\*(.|\\n|\\r)*?\\*\\/)/,/^(?:\\/\\/.*)/,/^(?:\\/[^ /]*?['\"{}'][^ ]*?\\/)/,/^(?:\"(\\\\\\\\|\\\\\"|[^\"])*\")/,/^(?:'(\\\\\\\\|\\\\'|[^'])*')/,/^(?:[/\"'][^{}/\"']+)/,/^(?:[^{}/\"']+)/,/^(?:\\{)/,/^(?:\\})/,/^(?:([a-zA-Z_][a-zA-Z0-9_-]*))/,/^(?:>)/,/^(?:,)/,/^(?:\\*)/,/^(?:(\\r\\n|\\n|\\r)+)/,/^(?:\\s+(\\r\\n|\\n|\\r)+)/,/^(?:\\s+)/,/^(?:%%)/,/^(?:[a-zA-Z0-9_]+)/,/^(?:([a-zA-Z_][a-zA-Z0-9_-]*))/,/^(?:(\\r\\n|\\n|\\r)+)/,/^(?:\\s+(\\r\\n|\\n|\\r)+)/,/^(?:\\s+)/,/^(?:([a-zA-Z_][a-zA-Z0-9_-]*))/,/^(?:(\\r\\n|\\n|\\r)+)/,/^(?:\\s+(\\r\\n|\\n|\\r)+)/,/^(?:\\s+)/,/^(?:.*(\\r\\n|\\n|\\r)+)/,/^(?:\\{)/,/^(?:%\\{(.|(\\r\\n|\\n|\\r))*?%\\})/,/^(?:%\\{(.|(\\r\\n|\\n|\\r))*?%\\})/,/^(?:.+)/,/^(?:\\/\\*(.|\\n|\\r)*?\\*\\/)/,/^(?:\\/\\/.*)/,/^(?:(\\r\\n|\\n|\\r)+)/,/^(?:\\s+)/,/^(?:([a-zA-Z_][a-zA-Z0-9_-]*))/,/^(?:\"(\\\\\\\\|\\\\\"|[^\"])*\")/,/^(?:'(\\\\\\\\|\\\\'|[^'])*')/,/^(?:\\|)/,/^(?:\\[(\\\\\\\\|\\\\\\]|[^\\]])*\\])/,/^(?:\\(\\?:)/,/^(?:\\(\\?=)/,/^(?:\\(\\?!)/,/^(?:\\()/,/^(?:\\))/,/^(?:\\+)/,/^(?:\\*)/,/^(?:\\?)/,/^(?:\\^)/,/^(?:,)/,/^(?:<<EOF>>)/,/^(?:<)/,/^(?:\\/!)/,/^(?:\\/)/,/^(?:\\\\([0-7]{1,3}|[rfntvsSbBwWdD\\\\*+()${}|[\\]\\/.^?]|c[A-Z]|x[0-9A-F]{2}|u[a-fA-F0-9]{4}))/,/^(?:\\\\.)/,/^(?:\\$)/,/^(?:\\.)/,/^(?:%options\\b)/,/^(?:%s\\b)/,/^(?:%x\\b)/,/^(?:%%)/,/^(?:\\{\\d+(,\\s?\\d+|,)?\\})/,/^(?:\\{([a-zA-Z_][a-zA-Z0-9_-]*)\\})/,/^(?:\\{)/,/^(?:\\})/,/^(?:.)/,/^(?:$)/,/^(?:(.|(\\r\\n|\\n|\\r))+)/],\nconditions: {\"code\":{\"rules\":[67,68],\"inclusive\":false},\"start_condition\":{\"rules\":[22,23,24,25,67],\"inclusive\":false},\"options\":{\"rules\":[18,19,20,21,67],\"inclusive\":false},\"conditions\":{\"rules\":[9,10,11,12,67],\"inclusive\":false},\"action\":{\"rules\":[0,1,2,3,4,5,6,7,8,67],\"inclusive\":false},\"indented\":{\"rules\":[27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67],\"inclusive\":true},\"trail\":{\"rules\":[26,29,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67],\"inclusive\":true},\"rules\":{\"rules\":[13,14,15,16,17,29,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67],\"inclusive\":true},\"INITIAL\":{\"rules\":[29,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67],\"inclusive\":true}}\n};\nreturn lexer;\n})();\nparser.lexer = lexer;\nfunction Parser () {\n  this.yy = {};\n}\nParser.prototype = parser;parser.Parser = Parser;\nreturn new Parser;\n})();\n\n\nif (typeof require !== 'undefined' && typeof exports !== 'undefined') {\nexports.parser = lex;\nexports.Parser = lex.Parser;\nexports.parse = function () { return lex.parse.apply(lex, arguments); };\nexports.main = function commonjsMain(args) {\n    if (!args[1]) {\n        console.log('Usage: '+args[0]+' FILE');\n        process.exit(1);\n    }\n    var source = require('fs').readFileSync(require('path').normalize(args[1]), \"utf8\");\n    return exports.parser.parse(source);\n};\nif (typeof module !== 'undefined' && require.main === module) {\n  exports.main(process.argv.slice(1));\n}\n}", "{\n  \"author\": \"Zach Carter <zach@carter.name> (http://zaa.ch)\",\n  \"name\": \"jison-lex\",\n  \"description\": \"lexical analyzer generator used by jison\",\n  \"version\": \"0.2.1\",\n  \"keywords\": [\n    \"jison\",\n    \"parser\",\n    \"generator\",\n    \"lexer\",\n    \"flex\",\n    \"tokenizer\"\n  ],\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git://github.com/zaach/jison-lex.git\"\n  },\n  \"bugs\": {\n    \"email\": \"jison@librelist.com\",\n    \"url\": \"http://github.com/zaach/jison-lex/issues\"\n  },\n  \"main\": \"regexp-lexer\",\n  \"bin\": \"cli.js\",\n  \"engines\": {\n    \"node\": \">=0.4\"\n  },\n  \"dependencies\": {\n    \"lex-parser\": \"0.1.x\",\n    \"nomnom\": \"1.5.2\"\n  },\n  \"devDependencies\": {\n    \"test\": \"0.4.4\"\n  },\n  \"scripts\": {\n    \"test\": \"node tests/all-tests.js\"\n  },\n  \"directories\": {\n    \"lib\": \"lib\",\n    \"tests\": \"tests\"\n  },\n  \"homepage\": \"http://jison.org\"\n}\n", "// Basic Lexer implemented using JavaScript regular expressions\n// MIT Licensed\n\nvar RegExpLexer = (function () {\n\"use strict\";\n\nvar lexParser = require('lex-parser');\nvar version = require('./package.json').version;\n\n// expand macros and convert matchers to RegExp's\nfunction prepareRules(rules, macros, actions, tokens, startConditions, caseless) {\n    var m,i,k,action,conditions,\n        newRules = [];\n\n    if (macros) {\n        macros = prepareMacros(macros);\n    }\n\n    function tokenNumberReplacement (str, token) {\n        return \"return \"+(tokens[token] || \"'\"+token+\"'\");\n    }\n\n    actions.push('switch($avoiding_name_collisions) {');\n\n    for (i=0;i < rules.length; i++) {\n        if (Object.prototype.toString.apply(rules[i][0]) !== '[object Array]') {\n            // implicit add to all inclusive start conditions\n            for (k in startConditions) {\n                if (startConditions[k].inclusive) {\n                    startConditions[k].rules.push(i);\n                }\n            }\n        } else if (rules[i][0][0] === '*') {\n            // Add to ALL start conditions\n            for (k in startConditions) {\n                startConditions[k].rules.push(i);\n            }\n            rules[i].shift();\n        } else {\n            // Add to explicit start conditions\n            conditions = rules[i].shift();\n            for (k=0;k<conditions.length;k++) {\n                startConditions[conditions[k]].rules.push(i);\n            }\n        }\n\n        m = rules[i][0];\n        if (typeof m === 'string') {\n            for (k in macros) {\n                if (macros.hasOwnProperty(k)) {\n                    m = m.split(\"{\"+k+\"}\").join('(' + macros[k] + ')');\n                }\n            }\n            m = new RegExp(\"^(?:\"+m+\")\", caseless ? 'i':'');\n        }\n        newRules.push(m);\n        if (typeof rules[i][1] === 'function') {\n            rules[i][1] = String(rules[i][1]).replace(/^\\s*function \\(\\)\\s?\\{/, '').replace(/\\}\\s*$/, '');\n        }\n        action = rules[i][1];\n        if (tokens && action.match(/return '[^']+'/)) {\n            action = action.replace(/return '([^']+)'/g, tokenNumberReplacement);\n        }\n        actions.push('case '+i+':' +action+'\\nbreak;');\n    }\n    actions.push(\"}\");\n\n    return newRules;\n}\n\n// expand macros within macros\nfunction prepareMacros (macros) {\n    var cont = true,\n        m,i,k,mnew;\n    while (cont) {\n        cont = false;\n        for (i in macros) if (macros.hasOwnProperty(i)) {\n            m = macros[i];\n            for (k in macros) if (macros.hasOwnProperty(k) && i !== k) {\n                mnew = m.split(\"{\"+k+\"}\").join('(' + macros[k] + ')');\n                if (mnew !== m) {\n                    cont = true;\n                    macros[i] = mnew;\n                }\n            }\n        }\n    }\n    return macros;\n}\n\nfunction prepareStartConditions (conditions) {\n    var sc,\n        hash = {};\n    for (sc in conditions) if (conditions.hasOwnProperty(sc)) {\n        hash[sc] = {rules:[],inclusive:!!!conditions[sc]};\n    }\n    return hash;\n}\n\nfunction buildActions (dict, tokens) {\n    var actions = [dict.actionInclude || '', \"var YYSTATE=YY_START;\"];\n    var tok;\n    var toks = {};\n\n    for (tok in tokens) {\n        toks[tokens[tok]] = tok;\n    }\n\n    if (dict.options && dict.options.flex) {\n        dict.rules.push([\".\", \"console.log(yytext);\"]);\n    }\n\n    this.rules = prepareRules(dict.rules, dict.macros, actions, tokens && toks, this.conditions, this.options[\"case-insensitive\"]);\n    var fun = actions.join(\"\\n\");\n    \"yytext yyleng yylineno yylloc\".split(' ').forEach(function (yy) {\n        fun = fun.replace(new RegExp(\"\\\\b(\"+yy+\")\\\\b\", \"g\"), \"yy_.$1\");\n    });\n\n\n    // first try to create the performAction function the old way,\n    // but this will break for some legal constructs in the user action code:\n    try {\n        return Function(\"yy,yy_,$avoiding_name_collisions,YY_START\", fun);\n    } catch (e) {\n        return \"function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {\" + fun + \"\\n}\";\n    }\n}\n\nfunction RegExpLexer (dict, input, tokens) {\n    if (typeof dict === 'string') {\n        dict = lexParser.parse(dict);\n    }\n    dict = dict || {};\n    this.options = dict.options || {};\n\n    this.conditions = prepareStartConditions(dict.startConditions);\n    this.conditions.INITIAL = {rules:[],inclusive:true};\n\n    this.performAction = buildActions.call(this, dict, tokens);\n    this.conditionStack = ['INITIAL'];\n\n    this.moduleInclude = (dict.moduleInclude || '').trim();\n\n    this.yy = {};\n    if (input) {\n        this.setInput(input);\n    }\n}\n\nRegExpLexer.prototype = {\n    EOF: 1,\n    parseError: function parseError(str, hash) {\n        if (this.yy.parser) {\n            this.yy.parser.parseError(str, hash);\n        } else {\n            throw new Error(str);\n        }\n    },\n\n    // resets the lexer, sets new input\n    setInput: function (input) {\n        this._input = input;\n        this._more = this._backtrack = this.done = false;\n        this.yylineno = this.yyleng = 0;\n        this.yytext = this.matched = this.match = '';\n        this.conditionStack = ['INITIAL'];\n        this.yylloc = {\n            first_line: 1,\n            first_column: 0,\n            last_line: 1,\n            last_column: 0\n        };\n        if (this.options.ranges) {\n            this.yylloc.range = [0,0];\n        }\n        this.offset = 0;\n        return this;\n    },\n\n    // consumes and returns one char from the input\n    input: function () {\n        var ch = this._input[0];\n        this.yytext += ch;\n        this.yyleng++;\n        this.offset++;\n        this.match += ch;\n        this.matched += ch;\n        var lines = ch.match(/(?:\\r\\n?|\\n).*/g);\n        if (lines) {\n            this.yylineno++;\n            this.yylloc.last_line++;\n        } else {\n            this.yylloc.last_column++;\n        }\n        if (this.options.ranges) {\n            this.yylloc.range[1]++;\n        }\n\n        this._input = this._input.slice(1);\n        return ch;\n    },\n\n    // unshifts one char (or a string) into the input\n    unput: function (ch) {\n        var len = ch.length;\n        var lines = ch.split(/(?:\\r\\n?|\\n)/g);\n\n        this._input = ch + this._input;\n        this.yytext = this.yytext.substr(0, this.yytext.length - len - 1);\n        //this.yyleng -= len;\n        this.offset -= len;\n        var oldLines = this.match.split(/(?:\\r\\n?|\\n)/g);\n        this.match = this.match.substr(0, this.match.length - 1);\n        this.matched = this.matched.substr(0, this.matched.length - 1);\n\n        if (lines.length - 1) {\n            this.yylineno -= lines.length - 1;\n        }\n        var r = this.yylloc.range;\n\n        this.yylloc = {\n            first_line: this.yylloc.first_line,\n            last_line: this.yylineno + 1,\n            first_column: this.yylloc.first_column,\n            last_column: lines ?\n                (lines.length === oldLines.length ? this.yylloc.first_column : 0)\n                 + oldLines[oldLines.length - lines.length].length - lines[0].length :\n              this.yylloc.first_column - len\n        };\n\n        if (this.options.ranges) {\n            this.yylloc.range = [r[0], r[0] + this.yyleng - len];\n        }\n        this.yyleng = this.yytext.length;\n        return this;\n    },\n\n    // When called from action, caches matched text and appends it on next action\n    more: function () {\n        this._more = true;\n        return this;\n    },\n\n    // When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.\n    reject: function () {\n        if (this.options.backtrack_lexer) {\n            this._backtrack = true;\n        } else {\n            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\\n' + this.showPosition(), {\n                text: \"\",\n                token: null,\n                line: this.yylineno\n            });\n\n        }\n        return this;\n    },\n\n    // retain first n characters of the match\n    less: function (n) {\n        this.unput(this.match.slice(n));\n    },\n\n    // displays already matched input, i.e. for error messages\n    pastInput: function () {\n        var past = this.matched.substr(0, this.matched.length - this.match.length);\n        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\\n/g, \"\");\n    },\n\n    // displays upcoming input, i.e. for error messages\n    upcomingInput: function () {\n        var next = this.match;\n        if (next.length < 20) {\n            next += this._input.substr(0, 20-next.length);\n        }\n        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\\n/g, \"\");\n    },\n\n    // displays the character position where the lexing error occurred, i.e. for error messages\n    showPosition: function () {\n        var pre = this.pastInput();\n        var c = new Array(pre.length + 1).join(\"-\");\n        return pre + this.upcomingInput() + \"\\n\" + c + \"^\";\n    },\n\n    // test the lexed token: return FALSE when not a match, otherwise return token\n    test_match: function(match, indexed_rule) {\n        var token,\n            lines,\n            backup;\n\n        if (this.options.backtrack_lexer) {\n            // save context\n            backup = {\n                yylineno: this.yylineno,\n                yylloc: {\n                    first_line: this.yylloc.first_line,\n                    last_line: this.last_line,\n                    first_column: this.yylloc.first_column,\n                    last_column: this.yylloc.last_column\n                },\n                yytext: this.yytext,\n                match: this.match,\n                matches: this.matches,\n                matched: this.matched,\n                yyleng: this.yyleng,\n                offset: this.offset,\n                _more: this._more,\n                _input: this._input,\n                yy: this.yy,\n                conditionStack: this.conditionStack.slice(0),\n                done: this.done\n            };\n            if (this.options.ranges) {\n                backup.yylloc.range = this.yylloc.range.slice(0);\n            }\n        }\n\n        lines = match[0].match(/(?:\\r\\n?|\\n).*/g);\n        if (lines) {\n            this.yylineno += lines.length;\n        }\n        this.yylloc = {\n            first_line: this.yylloc.last_line,\n            last_line: this.yylineno + 1,\n            first_column: this.yylloc.last_column,\n            last_column: lines ?\n                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\\r?\\n?/)[0].length :\n                         this.yylloc.last_column + match[0].length\n        };\n        this.yytext += match[0];\n        this.match += match[0];\n        this.matches = match;\n        this.yyleng = this.yytext.length;\n        if (this.options.ranges) {\n            this.yylloc.range = [this.offset, this.offset += this.yyleng];\n        }\n        this._more = false;\n        this._backtrack = false;\n        this._input = this._input.slice(match[0].length);\n        this.matched += match[0];\n        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);\n        if (this.done && this._input) {\n            this.done = false;\n        }\n        if (token) {\n            return token;\n        } else if (this._backtrack) {\n            // recover context\n            for (var k in backup) {\n                this[k] = backup[k];\n            }\n            return false; // rule action called reject() implying the next rule should be tested instead.\n        }\n        return false;\n    },\n\n    // return next match in input\n    next: function () {\n        if (this.done) {\n            return this.EOF;\n        }\n        if (!this._input) {\n            this.done = true;\n        }\n\n        var token,\n            match,\n            tempMatch,\n            index;\n        if (!this._more) {\n            this.yytext = '';\n            this.match = '';\n        }\n        var rules = this._currentRules();\n        for (var i = 0; i < rules.length; i++) {\n            tempMatch = this._input.match(this.rules[rules[i]]);\n            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {\n                match = tempMatch;\n                index = i;\n                if (this.options.backtrack_lexer) {\n                    token = this.test_match(tempMatch, rules[i]);\n                    if (token !== false) {\n                        return token;\n                    } else if (this._backtrack) {\n                        match = false;\n                        continue; // rule action called reject() implying a rule MISmatch.\n                    } else {\n                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)\n                        return false;\n                    }\n                } else if (!this.options.flex) {\n                    break;\n                }\n            }\n        }\n        if (match) {\n            token = this.test_match(match, rules[index]);\n            if (token !== false) {\n                return token;\n            }\n            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)\n            return false;\n        }\n        if (this._input === \"\") {\n            return this.EOF;\n        } else {\n            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\\n' + this.showPosition(), {\n                text: \"\",\n                token: null,\n                line: this.yylineno\n            });\n        }\n    },\n\n    // return next match that has a token\n    lex: function lex () {\n        var r = this.next();\n        if (r) {\n            return r;\n        } else {\n            return this.lex();\n        }\n    },\n\n    // activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)\n    begin: function begin (condition) {\n        this.conditionStack.push(condition);\n    },\n\n    // pop the previously active lexer condition state off the condition stack\n    popState: function popState () {\n        var n = this.conditionStack.length - 1;\n        if (n > 0) {\n            return this.conditionStack.pop();\n        } else {\n            return this.conditionStack[0];\n        }\n    },\n\n    // produce the lexer rule set which is active for the currently active lexer condition state\n    _currentRules: function _currentRules () {\n        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {\n            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;\n        } else {\n            return this.conditions[\"INITIAL\"].rules;\n        }\n    },\n\n    // return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available\n    topState: function topState (n) {\n        n = this.conditionStack.length - 1 - Math.abs(n || 0);\n        if (n >= 0) {\n            return this.conditionStack[n];\n        } else {\n            return \"INITIAL\";\n        }\n    },\n\n    // alias for begin(condition)\n    pushState: function pushState (condition) {\n        this.begin(condition);\n    },\n\n    // return the number of states pushed\n    stateStackSize: function stateStackSize() {\n        return this.conditionStack.length;\n    },\n\n    generate:  function generate(opt) {\n        var code = \"\";\n        if (opt.moduleType === 'commonjs') {\n            code = this.generateCommonJSModule(opt);\n        } else if (opt.moduleType === 'amd') {\n            code = this.generateAMDModule(opt);\n        } else {\n            code = this.generateModule(opt);\n        }\n\n        return code;\n    },\n    generateModuleBody: function generateModule() {\n        var function_descriptions = {\n            setInput: \"resets the lexer, sets new input\",\n            input: \"consumes and returns one char from the input\",\n            unput: \"unshifts one char (or a string) into the input\",\n            more: \"When called from action, caches matched text and appends it on next action\",\n            reject: \"When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.\",\n            less: \"retain first n characters of the match\",\n            pastInput: \"displays already matched input, i.e. for error messages\",\n            upcomingInput: \"displays upcoming input, i.e. for error messages\",\n            showPosition: \"displays the character position where the lexing error occurred, i.e. for error messages\",\n            test_match: \"test the lexed token: return FALSE when not a match, otherwise return token\",\n            next: \"return next match in input\",\n            lex: \"return next match that has a token\",\n            begin: \"activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)\",\n            popState: \"pop the previously active lexer condition state off the condition stack\",\n            _currentRules: \"produce the lexer rule set which is active for the currently active lexer condition state\",\n            topState: \"return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available\",\n            pushState: \"alias for begin(condition)\",\n            stateStackSize: \"return the number of states currently on the stack\"\n        };\n        var out = \"{\\n\";\n        var p = [];\n        var descr;\n        for (var k in RegExpLexer.prototype) {\n            if (RegExpLexer.prototype.hasOwnProperty(k) && k.indexOf(\"generate\") === -1) {\n                // copy the function description as a comment before the implementation; supports multi-line descriptions\n                descr = \"\\n\";\n                if (function_descriptions[k]) {\n                    descr += \"// \" + function_descriptions[k].replace(/\\n/g, \"\\n\\/\\/ \") + \"\\n\";\n                }\n                p.push(descr + k + \":\" + (RegExpLexer.prototype[k].toString() || '\"\"'));\n            }\n        }\n        out += p.join(\",\\n\");\n\n        if (this.options) {\n            out += \",\\noptions: \" + JSON.stringify(this.options);\n        }\n\n        out += \",\\nperformAction: \" + String(this.performAction);\n        out += \",\\nrules: [\" + this.rules + \"]\";\n        out += \",\\nconditions: \" + JSON.stringify(this.conditions);\n        out += \"\\n}\";\n\n        return out;\n    },\n    generateModule: function generateModule(opt) {\n        opt = opt || {};\n\n        var out = \"/* generated by jison-lex \" + version + \" */\";\n        var moduleName = opt.moduleName || \"lexer\";\n\n        out += \"\\nvar \" + moduleName + \" = (function(){\\nvar lexer = \"\n              + this.generateModuleBody();\n\n        if (this.moduleInclude) out += \";\\n\"+this.moduleInclude;\n        out += \";\\nreturn lexer;\\n})();\";\n        return out;\n    },\n    generateAMDModule: function generateAMDModule() {\n        var out = \"/* generated by jison-lex \" + version + \" */\";\n\n        out += \"define([], function(){\\nvar lexer = \"\n              + this.generateModuleBody();\n\n        if (this.moduleInclude) out += \";\\n\"+this.moduleInclude;\n        out += \";\\nreturn lexer;\"\n             + \"\\n})();\";\n        return out;\n    },\n    generateCommonJSModule: function generateCommonJSModule(opt) {\n        opt = opt || {};\n\n        var out = \"\";\n        var moduleName = opt.moduleName || \"lexer\";\n\n        out += this.generateModule(opt);\n        out += \"\\nexports.lexer = \"+moduleName;\n        out += \";\\nexports.lex = function () { return \"+moduleName+\".lex.apply(lexer, arguments); };\";\n        return out;\n    }\n};\n\nreturn RegExpLexer;\n\n})();\n\nmodule.exports = RegExpLexer;\n\n", "/* parser generated by jison 0.4.11 */\n/*\n  Returns a Parser object of the following structure:\n\n  Parser: {\n    yy: {}\n  }\n\n  Parser.prototype: {\n    yy: {},\n    trace: function(),\n    symbols_: {associative list: name ==> number},\n    terminals_: {associative list: number ==> name},\n    productions_: [...],\n    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),\n    table: [...],\n    defaultActions: {...},\n    parseError: function(str, hash),\n    parse: function(input),\n\n    lexer: {\n        EOF: 1,\n        parseError: function(str, hash),\n        setInput: function(input),\n        input: function(),\n        unput: function(str),\n        more: function(),\n        less: function(n),\n        pastInput: function(),\n        upcomingInput: function(),\n        showPosition: function(),\n        test_match: function(regex_match_array, rule_index),\n        next: function(),\n        lex: function(),\n        begin: function(condition),\n        popState: function(),\n        _currentRules: function(),\n        topState: function(),\n        pushState: function(condition),\n\n        options: {\n            ranges: boolean           (optional: true ==> token location info will include a .range[] member)\n            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)\n            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)\n        },\n\n        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),\n        rules: [...],\n        conditions: {associative list: name ==> set},\n    }\n  }\n\n\n  token location info (@$, _$, etc.): {\n    first_line: n,\n    last_line: n,\n    first_column: n,\n    last_column: n,\n    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)\n  }\n\n\n  the parseError function receives a 'hash' object with these members for lexer and parser errors: {\n    text:        (matched text)\n    token:       (the produced terminal token, if any)\n    line:        (yylineno)\n  }\n  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {\n    loc:         (yylloc)\n    expected:    (string describing the set of expected tokens)\n    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)\n  }\n*/\nvar ebnf = (function(){\nvar parser = {trace: function trace() { },\nyy: {},\nsymbols_: {\"error\":2,\"production\":3,\"handle\":4,\"EOF\":5,\"handle_list\":6,\"|\":7,\"expression_suffix\":8,\"expression\":9,\"suffix\":10,\"ALIAS\":11,\"symbol\":12,\"(\":13,\")\":14,\"*\":15,\"?\":16,\"+\":17,\"$accept\":0,\"$end\":1},\nterminals_: {2:\"error\",5:\"EOF\",7:\"|\",11:\"ALIAS\",12:\"symbol\",13:\"(\",14:\")\",15:\"*\",16:\"?\",17:\"+\"},\nproductions_: [0,[3,2],[6,1],[6,3],[4,0],[4,2],[8,3],[8,2],[9,1],[9,3],[10,0],[10,1],[10,1],[10,1]],\nperformAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {\n/* this == yyval */\n\nvar $0 = $$.length - 1;\nswitch (yystate) {\ncase 1: return $$[$0-1]; \nbreak;\ncase 2: this.$ = [$$[$0]]; \nbreak;\ncase 3: $$[$0-2].push($$[$0]); \nbreak;\ncase 4: this.$ = []; \nbreak;\ncase 5: $$[$0-1].push($$[$0]); \nbreak;\ncase 6: this.$ = ['xalias', $$[$0-1], $$[$0-2], $$[$0]]; \nbreak;\ncase 7: if ($$[$0]) this.$ = [$$[$0], $$[$0-1]]; else this.$ = $$[$0-1]; \nbreak;\ncase 8: this.$ = ['symbol', $$[$0]]; \nbreak;\ncase 9: this.$ = ['()', $$[$0-1]]; \nbreak;\n}\n},\ntable: [{3:1,4:2,5:[2,4],12:[2,4],13:[2,4]},{1:[3]},{5:[1,3],8:4,9:5,12:[1,6],13:[1,7]},{1:[2,1]},{5:[2,5],7:[2,5],12:[2,5],13:[2,5],14:[2,5]},{5:[2,10],7:[2,10],10:8,11:[2,10],12:[2,10],13:[2,10],14:[2,10],15:[1,9],16:[1,10],17:[1,11]},{5:[2,8],7:[2,8],11:[2,8],12:[2,8],13:[2,8],14:[2,8],15:[2,8],16:[2,8],17:[2,8]},{4:13,6:12,7:[2,4],12:[2,4],13:[2,4],14:[2,4]},{5:[2,7],7:[2,7],11:[1,14],12:[2,7],13:[2,7],14:[2,7]},{5:[2,11],7:[2,11],11:[2,11],12:[2,11],13:[2,11],14:[2,11]},{5:[2,12],7:[2,12],11:[2,12],12:[2,12],13:[2,12],14:[2,12]},{5:[2,13],7:[2,13],11:[2,13],12:[2,13],13:[2,13],14:[2,13]},{7:[1,16],14:[1,15]},{7:[2,2],8:4,9:5,12:[1,6],13:[1,7],14:[2,2]},{5:[2,6],7:[2,6],12:[2,6],13:[2,6],14:[2,6]},{5:[2,9],7:[2,9],11:[2,9],12:[2,9],13:[2,9],14:[2,9],15:[2,9],16:[2,9],17:[2,9]},{4:17,7:[2,4],12:[2,4],13:[2,4],14:[2,4]},{7:[2,3],8:4,9:5,12:[1,6],13:[1,7],14:[2,3]}],\ndefaultActions: {3:[2,1]},\nparseError: function parseError(str, hash) {\n    if (hash.recoverable) {\n        this.trace(str);\n    } else {\n        throw new Error(str);\n    }\n},\nparse: function parse(input) {\n    var self = this, stack = [0], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;\n    var args = lstack.slice.call(arguments, 1);\n    this.lexer.setInput(input);\n    this.lexer.yy = this.yy;\n    this.yy.lexer = this.lexer;\n    this.yy.parser = this;\n    if (typeof this.lexer.yylloc == 'undefined') {\n        this.lexer.yylloc = {};\n    }\n    var yyloc = this.lexer.yylloc;\n    lstack.push(yyloc);\n    var ranges = this.lexer.options && this.lexer.options.ranges;\n    if (typeof this.yy.parseError === 'function') {\n        this.parseError = this.yy.parseError;\n    } else {\n        this.parseError = Object.getPrototypeOf(this).parseError;\n    }\n    function popStack(n) {\n        stack.length = stack.length - 2 * n;\n        vstack.length = vstack.length - n;\n        lstack.length = lstack.length - n;\n    }\n    function lex() {\n        var token;\n        token = self.lexer.lex() || EOF;\n        if (typeof token !== 'number') {\n            token = self.symbols_[token] || token;\n        }\n        return token;\n    }\n    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;\n    while (true) {\n        state = stack[stack.length - 1];\n        if (this.defaultActions[state]) {\n            action = this.defaultActions[state];\n        } else {\n            if (symbol === null || typeof symbol == 'undefined') {\n                symbol = lex();\n            }\n            action = table[state] && table[state][symbol];\n        }\n                    if (typeof action === 'undefined' || !action.length || !action[0]) {\n                var errStr = '';\n                expected = [];\n                for (p in table[state]) {\n                    if (this.terminals_[p] && p > TERROR) {\n                        expected.push('\\'' + this.terminals_[p] + '\\'');\n                    }\n                }\n                if (this.lexer.showPosition) {\n                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\\n' + this.lexer.showPosition() + '\\nExpecting ' + expected.join(', ') + ', got \\'' + (this.terminals_[symbol] || symbol) + '\\'';\n                } else {\n                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\\'' + (this.terminals_[symbol] || symbol) + '\\'');\n                }\n                this.parseError(errStr, {\n                    text: this.lexer.match,\n                    token: this.terminals_[symbol] || symbol,\n                    line: this.lexer.yylineno,\n                    loc: yyloc,\n                    expected: expected\n                });\n            }\n        if (action[0] instanceof Array && action.length > 1) {\n            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);\n        }\n        switch (action[0]) {\n        case 1:\n            stack.push(symbol);\n            vstack.push(this.lexer.yytext);\n            lstack.push(this.lexer.yylloc);\n            stack.push(action[1]);\n            symbol = null;\n            if (!preErrorSymbol) {\n                yyleng = this.lexer.yyleng;\n                yytext = this.lexer.yytext;\n                yylineno = this.lexer.yylineno;\n                yyloc = this.lexer.yylloc;\n                if (recovering > 0) {\n                    recovering--;\n                }\n            } else {\n                symbol = preErrorSymbol;\n                preErrorSymbol = null;\n            }\n            break;\n        case 2:\n            len = this.productions_[action[1]][1];\n            yyval.$ = vstack[vstack.length - len];\n            yyval._$ = {\n                first_line: lstack[lstack.length - (len || 1)].first_line,\n                last_line: lstack[lstack.length - 1].last_line,\n                first_column: lstack[lstack.length - (len || 1)].first_column,\n                last_column: lstack[lstack.length - 1].last_column\n            };\n            if (ranges) {\n                yyval._$.range = [\n                    lstack[lstack.length - (len || 1)].range[0],\n                    lstack[lstack.length - 1].range[1]\n                ];\n            }\n            r = this.performAction.apply(yyval, [\n                yytext,\n                yyleng,\n                yylineno,\n                this.yy,\n                action[1],\n                vstack,\n                lstack\n            ].concat(args));\n            if (typeof r !== 'undefined') {\n                return r;\n            }\n            if (len) {\n                stack = stack.slice(0, -1 * len * 2);\n                vstack = vstack.slice(0, -1 * len);\n                lstack = lstack.slice(0, -1 * len);\n            }\n            stack.push(this.productions_[action[1]][0]);\n            vstack.push(yyval.$);\n            lstack.push(yyval._$);\n            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];\n            stack.push(newState);\n            break;\n        case 3:\n            return true;\n        }\n    }\n    return true;\n}};\n/* generated by jison-lex 0.2.1 */\nvar lexer = (function(){\nvar lexer = {\n\nEOF:1,\n\nparseError:function parseError(str, hash) {\n        if (this.yy.parser) {\n            this.yy.parser.parseError(str, hash);\n        } else {\n            throw new Error(str);\n        }\n    },\n\n// resets the lexer, sets new input\nsetInput:function (input) {\n        this._input = input;\n        this._more = this._backtrack = this.done = false;\n        this.yylineno = this.yyleng = 0;\n        this.yytext = this.matched = this.match = '';\n        this.conditionStack = ['INITIAL'];\n        this.yylloc = {\n            first_line: 1,\n            first_column: 0,\n            last_line: 1,\n            last_column: 0\n        };\n        if (this.options.ranges) {\n            this.yylloc.range = [0,0];\n        }\n        this.offset = 0;\n        return this;\n    },\n\n// consumes and returns one char from the input\ninput:function () {\n        var ch = this._input[0];\n        this.yytext += ch;\n        this.yyleng++;\n        this.offset++;\n        this.match += ch;\n        this.matched += ch;\n        var lines = ch.match(/(?:\\r\\n?|\\n).*/g);\n        if (lines) {\n            this.yylineno++;\n            this.yylloc.last_line++;\n        } else {\n            this.yylloc.last_column++;\n        }\n        if (this.options.ranges) {\n            this.yylloc.range[1]++;\n        }\n\n        this._input = this._input.slice(1);\n        return ch;\n    },\n\n// unshifts one char (or a string) into the input\nunput:function (ch) {\n        var len = ch.length;\n        var lines = ch.split(/(?:\\r\\n?|\\n)/g);\n\n        this._input = ch + this._input;\n        this.yytext = this.yytext.substr(0, this.yytext.length - len - 1);\n        //this.yyleng -= len;\n        this.offset -= len;\n        var oldLines = this.match.split(/(?:\\r\\n?|\\n)/g);\n        this.match = this.match.substr(0, this.match.length - 1);\n        this.matched = this.matched.substr(0, this.matched.length - 1);\n\n        if (lines.length - 1) {\n            this.yylineno -= lines.length - 1;\n        }\n        var r = this.yylloc.range;\n\n        this.yylloc = {\n            first_line: this.yylloc.first_line,\n            last_line: this.yylineno + 1,\n            first_column: this.yylloc.first_column,\n            last_column: lines ?\n                (lines.length === oldLines.length ? this.yylloc.first_column : 0)\n                 + oldLines[oldLines.length - lines.length].length - lines[0].length :\n              this.yylloc.first_column - len\n        };\n\n        if (this.options.ranges) {\n            this.yylloc.range = [r[0], r[0] + this.yyleng - len];\n        }\n        this.yyleng = this.yytext.length;\n        return this;\n    },\n\n// When called from action, caches matched text and appends it on next action\nmore:function () {\n        this._more = true;\n        return this;\n    },\n\n// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.\nreject:function () {\n        if (this.options.backtrack_lexer) {\n            this._backtrack = true;\n        } else {\n            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\\n' + this.showPosition(), {\n                text: \"\",\n                token: null,\n                line: this.yylineno\n            });\n\n        }\n        return this;\n    },\n\n// retain first n characters of the match\nless:function (n) {\n        this.unput(this.match.slice(n));\n    },\n\n// displays already matched input, i.e. for error messages\npastInput:function () {\n        var past = this.matched.substr(0, this.matched.length - this.match.length);\n        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\\n/g, \"\");\n    },\n\n// displays upcoming input, i.e. for error messages\nupcomingInput:function () {\n        var next = this.match;\n        if (next.length < 20) {\n            next += this._input.substr(0, 20-next.length);\n        }\n        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\\n/g, \"\");\n    },\n\n// displays the character position where the lexing error occurred, i.e. for error messages\nshowPosition:function () {\n        var pre = this.pastInput();\n        var c = new Array(pre.length + 1).join(\"-\");\n        return pre + this.upcomingInput() + \"\\n\" + c + \"^\";\n    },\n\n// test the lexed token: return FALSE when not a match, otherwise return token\ntest_match:function (match, indexed_rule) {\n        var token,\n            lines,\n            backup;\n\n        if (this.options.backtrack_lexer) {\n            // save context\n            backup = {\n                yylineno: this.yylineno,\n                yylloc: {\n                    first_line: this.yylloc.first_line,\n                    last_line: this.last_line,\n                    first_column: this.yylloc.first_column,\n                    last_column: this.yylloc.last_column\n                },\n                yytext: this.yytext,\n                match: this.match,\n                matches: this.matches,\n                matched: this.matched,\n                yyleng: this.yyleng,\n                offset: this.offset,\n                _more: this._more,\n                _input: this._input,\n                yy: this.yy,\n                conditionStack: this.conditionStack.slice(0),\n                done: this.done\n            };\n            if (this.options.ranges) {\n                backup.yylloc.range = this.yylloc.range.slice(0);\n            }\n        }\n\n        lines = match[0].match(/(?:\\r\\n?|\\n).*/g);\n        if (lines) {\n            this.yylineno += lines.length;\n        }\n        this.yylloc = {\n            first_line: this.yylloc.last_line,\n            last_line: this.yylineno + 1,\n            first_column: this.yylloc.last_column,\n            last_column: lines ?\n                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\\r?\\n?/)[0].length :\n                         this.yylloc.last_column + match[0].length\n        };\n        this.yytext += match[0];\n        this.match += match[0];\n        this.matches = match;\n        this.yyleng = this.yytext.length;\n        if (this.options.ranges) {\n            this.yylloc.range = [this.offset, this.offset += this.yyleng];\n        }\n        this._more = false;\n        this._backtrack = false;\n        this._input = this._input.slice(match[0].length);\n        this.matched += match[0];\n        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);\n        if (this.done && this._input) {\n            this.done = false;\n        }\n        if (token) {\n            return token;\n        } else if (this._backtrack) {\n            // recover context\n            for (var k in backup) {\n                this[k] = backup[k];\n            }\n            return false; // rule action called reject() implying the next rule should be tested instead.\n        }\n        return false;\n    },\n\n// return next match in input\nnext:function () {\n        if (this.done) {\n            return this.EOF;\n        }\n        if (!this._input) {\n            this.done = true;\n        }\n\n        var token,\n            match,\n            tempMatch,\n            index;\n        if (!this._more) {\n            this.yytext = '';\n            this.match = '';\n        }\n        var rules = this._currentRules();\n        for (var i = 0; i < rules.length; i++) {\n            tempMatch = this._input.match(this.rules[rules[i]]);\n            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {\n                match = tempMatch;\n                index = i;\n                if (this.options.backtrack_lexer) {\n                    token = this.test_match(tempMatch, rules[i]);\n                    if (token !== false) {\n                        return token;\n                    } else if (this._backtrack) {\n                        match = false;\n                        continue; // rule action called reject() implying a rule MISmatch.\n                    } else {\n                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)\n                        return false;\n                    }\n                } else if (!this.options.flex) {\n                    break;\n                }\n            }\n        }\n        if (match) {\n            token = this.test_match(match, rules[index]);\n            if (token !== false) {\n                return token;\n            }\n            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)\n            return false;\n        }\n        if (this._input === \"\") {\n            return this.EOF;\n        } else {\n            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\\n' + this.showPosition(), {\n                text: \"\",\n                token: null,\n                line: this.yylineno\n            });\n        }\n    },\n\n// return next match that has a token\nlex:function lex() {\n        var r = this.next();\n        if (r) {\n            return r;\n        } else {\n            return this.lex();\n        }\n    },\n\n// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)\nbegin:function begin(condition) {\n        this.conditionStack.push(condition);\n    },\n\n// pop the previously active lexer condition state off the condition stack\npopState:function popState() {\n        var n = this.conditionStack.length - 1;\n        if (n > 0) {\n            return this.conditionStack.pop();\n        } else {\n            return this.conditionStack[0];\n        }\n    },\n\n// produce the lexer rule set which is active for the currently active lexer condition state\n_currentRules:function _currentRules() {\n        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {\n            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;\n        } else {\n            return this.conditions[\"INITIAL\"].rules;\n        }\n    },\n\n// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available\ntopState:function topState(n) {\n        n = this.conditionStack.length - 1 - Math.abs(n || 0);\n        if (n >= 0) {\n            return this.conditionStack[n];\n        } else {\n            return \"INITIAL\";\n        }\n    },\n\n// alias for begin(condition)\npushState:function pushState(condition) {\n        this.begin(condition);\n    },\n\n// return the number of states currently on the stack\nstateStackSize:function stateStackSize() {\n        return this.conditionStack.length;\n    },\noptions: {},\nperformAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {\n\nvar YYSTATE=YY_START;\nswitch($avoiding_name_collisions) {\ncase 0:/* skip whitespace */\nbreak;\ncase 1:return 12;\nbreak;\ncase 2:yy_.yytext = yy_.yytext.substr(1, yy_.yyleng-2); return 11;\nbreak;\ncase 3:return 12;\nbreak;\ncase 4:return 12;\nbreak;\ncase 5:return 'bar';\nbreak;\ncase 6:return 13;\nbreak;\ncase 7:return 14;\nbreak;\ncase 8:return 15;\nbreak;\ncase 9:return 16;\nbreak;\ncase 10:return 7;\nbreak;\ncase 11:return 17;\nbreak;\ncase 12:return 5;\nbreak;\n}\n},\nrules: [/^(?:\\s+)/,/^(?:([a-zA-Z][a-zA-Z0-9_-]*))/,/^(?:\\[([a-zA-Z][a-zA-Z0-9_-]*)\\])/,/^(?:'[^']*')/,/^(?:\\.)/,/^(?:bar\\b)/,/^(?:\\()/,/^(?:\\))/,/^(?:\\*)/,/^(?:\\?)/,/^(?:\\|)/,/^(?:\\+)/,/^(?:$)/],\nconditions: {\"INITIAL\":{\"rules\":[0,1,2,3,4,5,6,7,8,9,10,11,12],\"inclusive\":true}}\n};\nreturn lexer;\n})();\nparser.lexer = lexer;\nfunction Parser () {\n  this.yy = {};\n}\nParser.prototype = parser;parser.Parser = Parser;\nreturn new Parser;\n})();\n\n\nif (typeof require !== 'undefined' && typeof exports !== 'undefined') {\nexports.parser = ebnf;\nexports.Parser = ebnf.Parser;\nexports.parse = function () { return ebnf.parse.apply(ebnf, arguments); };\nexports.main = function commonjsMain(args) {\n    if (!args[1]) {\n        console.log('Usage: '+args[0]+' FILE');\n        process.exit(1);\n    }\n    var source = require('fs').readFileSync(require('path').normalize(args[1]), \"utf8\");\n    return exports.parser.parse(source);\n};\nif (typeof module !== 'undefined' && require.main === module) {\n  exports.main(process.argv.slice(1));\n}\n}", "var EBNF = (function(){\n    var parser = require('./transform-parser.js');\n\n    var transformExpression = function(e, opts, emit) {\n        var type = e[0], value = e[1], name = false;\n\n        if (type === 'xalias') {\n            type = e[1];\n            value = e[2]\n            name = e[3];\n            if (type) {\n                e = e.slice(1,2);\n            } else {\n                e = value;\n                type = e[0];\n                value = e[1];\n            }\n        }\n\n        if (type === 'symbol') {\n            var n;\n            if (e[1][0] === '\\\\') n = e[1][1];\n            else if (e[1][0] === '\\'') n = e[1].substring(1, e[1].length-1);\n            else n = e[1];\n            emit(n + (name ? \"[\"+name+\"]\" : \"\"));\n        } else if (type === \"+\") {\n            if (!name) {\n                name = opts.production + \"_repetition_plus\" + opts.repid++;\n            }\n            emit(name);\n\n            opts = optsForProduction(name, opts.grammar);\n            var list = transformExpressionList([value], opts);\n            opts.grammar[name] = [\n                [list, \"$$ = [$1];\"],\n                [\n                    name + \" \" + list,\n                    \"$1.push($2);\"\n                ]\n            ];\n        } else if (type === \"*\") {\n            if (!name) {\n                name = opts.production + \"_repetition\" + opts.repid++;\n            }\n            emit(name);\n\n            opts = optsForProduction(name, opts.grammar);\n            opts.grammar[name] = [\n                [\"\", \"$$ = [];\"],\n                [\n                    name + \" \" + transformExpressionList([value], opts),\n                    \"$1.push($2);\"\n                ]\n            ];\n        } else if (type ===\"?\") {\n            if (!name) {\n                name = opts.production + \"_option\" + opts.optid++;\n            }\n            emit(name);\n\n            opts = optsForProduction(name, opts.grammar);\n            opts.grammar[name] = [\n                \"\", transformExpressionList([value], opts)\n            ];\n        } else if (type === \"()\") {\n            if (value.length == 1) {\n                emit(transformExpressionList(value[0], opts));\n            } else {\n                if (!name) {\n                    name = opts.production + \"_group\" + opts.groupid++;\n                }\n                emit(name);\n\n                opts = optsForProduction(name, opts.grammar);\n                opts.grammar[name] = value.map(function(handle) {\n                    return transformExpressionList(handle, opts);\n                });\n            }\n        }\n    };\n\n    var transformExpressionList = function(list, opts) {\n        return list.reduce (function (tot, e) {\n            transformExpression (e, opts, function (i) { tot.push(i); });\n            return tot;\n        }, []).\n        join(\" \");\n    };\n\n    var optsForProduction = function(id, grammar) {\n        return {\n            production: id,\n            repid: 0,\n            groupid: 0,\n            optid: 0,\n            grammar: grammar\n        };\n    };\n\n    var transformProduction = function(id, production, grammar) {\n        var transform_opts = optsForProduction(id, grammar);\n        return production.map(function (handle) {\n            var action = null, opts = null;\n            if (typeof(handle) !== 'string')\n                action = handle[1],\n                opts = handle[2],\n                handle = handle[0];\n            var expressions = parser.parse(handle);\n\n            handle = transformExpressionList(expressions, transform_opts);\n\n            var ret = [handle];\n            if (action) ret.push(action);\n            if (opts) ret.push(opts);\n            if (ret.length == 1) return ret[0];\n            else return ret;\n        });\n    };\n\n    var transformGrammar = function(grammar) {\n        Object.keys(grammar).forEach(function(id) {\n            grammar[id] = transformProduction(id, grammar[id], grammar);\n        });\n    };\n\n    return {\n        transform: function (ebnf) {\n            transformGrammar(ebnf);\n            return ebnf;\n        }\n    };\n})();\n\nexports.transform = EBNF.transform;\n\n", "/* parser generated by jison 0.4.11 */\n/*\n  Returns a Parser object of the following structure:\n\n  Parser: {\n    yy: {}\n  }\n\n  Parser.prototype: {\n    yy: {},\n    trace: function(),\n    symbols_: {associative list: name ==> number},\n    terminals_: {associative list: number ==> name},\n    productions_: [...],\n    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),\n    table: [...],\n    defaultActions: {...},\n    parseError: function(str, hash),\n    parse: function(input),\n\n    lexer: {\n        EOF: 1,\n        parseError: function(str, hash),\n        setInput: function(input),\n        input: function(),\n        unput: function(str),\n        more: function(),\n        less: function(n),\n        pastInput: function(),\n        upcomingInput: function(),\n        showPosition: function(),\n        test_match: function(regex_match_array, rule_index),\n        next: function(),\n        lex: function(),\n        begin: function(condition),\n        popState: function(),\n        _currentRules: function(),\n        topState: function(),\n        pushState: function(condition),\n\n        options: {\n            ranges: boolean           (optional: true ==> token location info will include a .range[] member)\n            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)\n            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)\n        },\n\n        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),\n        rules: [...],\n        conditions: {associative list: name ==> set},\n    }\n  }\n\n\n  token location info (@$, _$, etc.): {\n    first_line: n,\n    last_line: n,\n    first_column: n,\n    last_column: n,\n    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)\n  }\n\n\n  the parseError function receives a 'hash' object with these members for lexer and parser errors: {\n    text:        (matched text)\n    token:       (the produced terminal token, if any)\n    line:        (yylineno)\n  }\n  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {\n    loc:         (yylloc)\n    expected:    (string describing the set of expected tokens)\n    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)\n  }\n*/\nvar bnf = (function(){\nvar parser = {trace: function trace() { },\nyy: {},\nsymbols_: {\"error\":2,\"spec\":3,\"declaration_list\":4,\"%%\":5,\"grammar\":6,\"optional_end_block\":7,\"EOF\":8,\"CODE\":9,\"declaration\":10,\"START\":11,\"id\":12,\"LEX_BLOCK\":13,\"operator\":14,\"ACTION\":15,\"parse_param\":16,\"options\":17,\"OPTIONS\":18,\"token_list\":19,\"PARSE_PARAM\":20,\"associativity\":21,\"LEFT\":22,\"RIGHT\":23,\"NONASSOC\":24,\"symbol\":25,\"production_list\":26,\"production\":27,\":\":28,\"handle_list\":29,\";\":30,\"|\":31,\"handle_action\":32,\"handle\":33,\"prec\":34,\"action\":35,\"expression_suffix\":36,\"handle_sublist\":37,\"expression\":38,\"suffix\":39,\"ALIAS\":40,\"ID\":41,\"STRING\":42,\"(\":43,\")\":44,\"*\":45,\"?\":46,\"+\":47,\"PREC\":48,\"{\":49,\"action_body\":50,\"}\":51,\"ARROW_ACTION\":52,\"action_comments_body\":53,\"ACTION_BODY\":54,\"$accept\":0,\"$end\":1},\nterminals_: {2:\"error\",5:\"%%\",8:\"EOF\",9:\"CODE\",11:\"START\",13:\"LEX_BLOCK\",15:\"ACTION\",18:\"OPTIONS\",20:\"PARSE_PARAM\",22:\"LEFT\",23:\"RIGHT\",24:\"NONASSOC\",28:\":\",30:\";\",31:\"|\",40:\"ALIAS\",41:\"ID\",42:\"STRING\",43:\"(\",44:\")\",45:\"*\",46:\"?\",47:\"+\",48:\"PREC\",49:\"{\",51:\"}\",52:\"ARROW_ACTION\",54:\"ACTION_BODY\"},\nproductions_: [0,[3,5],[3,6],[7,0],[7,1],[4,2],[4,0],[10,2],[10,1],[10,1],[10,1],[10,1],[10,1],[17,2],[16,2],[14,2],[21,1],[21,1],[21,1],[19,2],[19,1],[6,1],[26,2],[26,1],[27,4],[29,3],[29,1],[32,3],[33,2],[33,0],[37,3],[37,1],[36,3],[36,2],[38,1],[38,1],[38,3],[39,0],[39,1],[39,1],[39,1],[34,2],[34,0],[25,1],[25,1],[12,1],[35,3],[35,1],[35,1],[35,0],[50,0],[50,1],[50,5],[50,4],[53,1],[53,2]],\nperformAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {\n/* this == yyval */\n\nvar $0 = $$.length - 1;\nswitch (yystate) {\ncase 1:\n          this.$ = $$[$0-4];\n          return extend(this.$, $$[$0-2]);\n        \nbreak;\ncase 2:\n          this.$ = $$[$0-5];\n          yy.addDeclaration(this.$, { include: $$[$0-1] });\n          return extend(this.$, $$[$0-3]);\n        \nbreak;\ncase 5:this.$ = $$[$0-1]; yy.addDeclaration(this.$, $$[$0]);\nbreak;\ncase 6:this.$ = {};\nbreak;\ncase 7:this.$ = {start: $$[$0]};\nbreak;\ncase 8:this.$ = {lex: $$[$0]};\nbreak;\ncase 9:this.$ = {operator: $$[$0]};\nbreak;\ncase 10:this.$ = {include: $$[$0]};\nbreak;\ncase 11:this.$ = {parseParam: $$[$0]};\nbreak;\ncase 12:this.$ = {options: $$[$0]};\nbreak;\ncase 13:this.$ = $$[$0];\nbreak;\ncase 14:this.$ = $$[$0];\nbreak;\ncase 15:this.$ = [$$[$0-1]]; this.$.push.apply(this.$, $$[$0]);\nbreak;\ncase 16:this.$ = 'left';\nbreak;\ncase 17:this.$ = 'right';\nbreak;\ncase 18:this.$ = 'nonassoc';\nbreak;\ncase 19:this.$ = $$[$0-1]; this.$.push($$[$0]);\nbreak;\ncase 20:this.$ = [$$[$0]];\nbreak;\ncase 21:this.$ = $$[$0];\nbreak;\ncase 22:\n            this.$ = $$[$0-1];\n            if ($$[$0][0] in this.$) \n                this.$[$$[$0][0]] = this.$[$$[$0][0]].concat($$[$0][1]);\n            else\n                this.$[$$[$0][0]] = $$[$0][1];\n        \nbreak;\ncase 23:this.$ = {}; this.$[$$[$0][0]] = $$[$0][1];\nbreak;\ncase 24:this.$ = [$$[$0-3], $$[$0-1]];\nbreak;\ncase 25:this.$ = $$[$0-2]; this.$.push($$[$0]);\nbreak;\ncase 26:this.$ = [$$[$0]];\nbreak;\ncase 27:\n            this.$ = [($$[$0-2].length ? $$[$0-2].join(' ') : '')];\n            if($$[$0]) this.$.push($$[$0]);\n            if($$[$0-1]) this.$.push($$[$0-1]);\n            if (this.$.length === 1) this.$ = this.$[0];\n        \nbreak;\ncase 28:this.$ = $$[$0-1]; this.$.push($$[$0])\nbreak;\ncase 29:this.$ = [];\nbreak;\ncase 30:this.$ = $$[$0-2]; this.$.push($$[$0].join(' '));\nbreak;\ncase 31:this.$ = [$$[$0].join(' ')];\nbreak;\ncase 32:this.$ = $$[$0-2] + $$[$0-1] + \"[\" + $$[$0] + \"]\"; \nbreak;\ncase 33:this.$ = $$[$0-1] + $$[$0]; \nbreak;\ncase 34:this.$ = $$[$0]; \nbreak;\ncase 35:this.$ = ebnf ? \"'\" + $$[$0] + \"'\" : $$[$0]; \nbreak;\ncase 36:this.$ = '(' + $$[$0-1].join(' | ') + ')'; \nbreak;\ncase 37:this.$ = ''\nbreak;\ncase 41:this.$ = {prec: $$[$0]};\nbreak;\ncase 42:this.$ = null;\nbreak;\ncase 43:this.$ = $$[$0];\nbreak;\ncase 44:this.$ = yytext;\nbreak;\ncase 45:this.$ = yytext;\nbreak;\ncase 46:this.$ = $$[$0-1];\nbreak;\ncase 47:this.$ = $$[$0];\nbreak;\ncase 48:this.$ = '$$ =' + $$[$0] + ';';\nbreak;\ncase 49:this.$ = '';\nbreak;\ncase 50:this.$ = '';\nbreak;\ncase 51:this.$ = $$[$0];\nbreak;\ncase 52:this.$ = $$[$0-4] + $$[$0-3] + $$[$0-2] + $$[$0-1] + $$[$0];\nbreak;\ncase 53:this.$ = $$[$0-3] + $$[$0-2] + $$[$0-1] + $$[$0];\nbreak;\ncase 54: this.$ = yytext; \nbreak;\ncase 55: this.$ = $$[$0-1]+$$[$0]; \nbreak;\n}\n},\ntable: [{3:1,4:2,5:[2,6],11:[2,6],13:[2,6],15:[2,6],18:[2,6],20:[2,6],22:[2,6],23:[2,6],24:[2,6]},{1:[3]},{5:[1,3],10:4,11:[1,5],13:[1,6],14:7,15:[1,8],16:9,17:10,18:[1,13],20:[1,12],21:11,22:[1,14],23:[1,15],24:[1,16]},{6:17,12:20,26:18,27:19,41:[1,21]},{5:[2,5],11:[2,5],13:[2,5],15:[2,5],18:[2,5],20:[2,5],22:[2,5],23:[2,5],24:[2,5]},{12:22,41:[1,21]},{5:[2,8],11:[2,8],13:[2,8],15:[2,8],18:[2,8],20:[2,8],22:[2,8],23:[2,8],24:[2,8]},{5:[2,9],11:[2,9],13:[2,9],15:[2,9],18:[2,9],20:[2,9],22:[2,9],23:[2,9],24:[2,9]},{5:[2,10],11:[2,10],13:[2,10],15:[2,10],18:[2,10],20:[2,10],22:[2,10],23:[2,10],24:[2,10]},{5:[2,11],11:[2,11],13:[2,11],15:[2,11],18:[2,11],20:[2,11],22:[2,11],23:[2,11],24:[2,11]},{5:[2,12],11:[2,12],13:[2,12],15:[2,12],18:[2,12],20:[2,12],22:[2,12],23:[2,12],24:[2,12]},{12:25,19:23,25:24,41:[1,21],42:[1,26]},{12:25,19:27,25:24,41:[1,21],42:[1,26]},{12:25,19:28,25:24,41:[1,21],42:[1,26]},{41:[2,16],42:[2,16]},{41:[2,17],42:[2,17]},{41:[2,18],42:[2,18]},{5:[1,30],7:29,8:[2,3]},{5:[2,21],8:[2,21],12:20,27:31,41:[1,21]},{5:[2,23],8:[2,23],41:[2,23]},{28:[1,32]},{5:[2,45],11:[2,45],13:[2,45],15:[2,45],18:[2,45],20:[2,45],22:[2,45],23:[2,45],24:[2,45],28:[2,45],30:[2,45],31:[2,45],41:[2,45],42:[2,45],49:[2,45],52:[2,45]},{5:[2,7],11:[2,7],13:[2,7],15:[2,7],18:[2,7],20:[2,7],22:[2,7],23:[2,7],24:[2,7]},{5:[2,15],11:[2,15],12:25,13:[2,15],15:[2,15],18:[2,15],20:[2,15],22:[2,15],23:[2,15],24:[2,15],25:33,41:[1,21],42:[1,26]},{5:[2,20],11:[2,20],13:[2,20],15:[2,20],18:[2,20],20:[2,20],22:[2,20],23:[2,20],24:[2,20],41:[2,20],42:[2,20]},{5:[2,43],11:[2,43],13:[2,43],15:[2,43],18:[2,43],20:[2,43],22:[2,43],23:[2,43],24:[2,43],30:[2,43],31:[2,43],41:[2,43],42:[2,43],49:[2,43],52:[2,43]},{5:[2,44],11:[2,44],13:[2,44],15:[2,44],18:[2,44],20:[2,44],22:[2,44],23:[2,44],24:[2,44],30:[2,44],31:[2,44],41:[2,44],42:[2,44],49:[2,44],52:[2,44]},{5:[2,14],11:[2,14],12:25,13:[2,14],15:[2,14],18:[2,14],20:[2,14],22:[2,14],23:[2,14],24:[2,14],25:33,41:[1,21],42:[1,26]},{5:[2,13],11:[2,13],12:25,13:[2,13],15:[2,13],18:[2,13],20:[2,13],22:[2,13],23:[2,13],24:[2,13],25:33,41:[1,21],42:[1,26]},{8:[1,34]},{8:[2,4],9:[1,35]},{5:[2,22],8:[2,22],41:[2,22]},{15:[2,29],29:36,30:[2,29],31:[2,29],32:37,33:38,41:[2,29],42:[2,29],43:[2,29],48:[2,29],49:[2,29],52:[2,29]},{5:[2,19],11:[2,19],13:[2,19],15:[2,19],18:[2,19],20:[2,19],22:[2,19],23:[2,19],24:[2,19],41:[2,19],42:[2,19]},{1:[2,1]},{8:[1,39]},{30:[1,40],31:[1,41]},{30:[2,26],31:[2,26]},{15:[2,42],30:[2,42],31:[2,42],34:42,36:43,38:45,41:[1,46],42:[1,47],43:[1,48],48:[1,44],49:[2,42],52:[2,42]},{1:[2,2]},{5:[2,24],8:[2,24],41:[2,24]},{15:[2,29],30:[2,29],31:[2,29],32:49,33:38,41:[2,29],42:[2,29],43:[2,29],48:[2,29],49:[2,29],52:[2,29]},{15:[1,52],30:[2,49],31:[2,49],35:50,49:[1,51],52:[1,53]},{15:[2,28],30:[2,28],31:[2,28],41:[2,28],42:[2,28],43:[2,28],44:[2,28],48:[2,28],49:[2,28],52:[2,28]},{12:25,25:54,41:[1,21],42:[1,26]},{15:[2,37],30:[2,37],31:[2,37],39:55,40:[2,37],41:[2,37],42:[2,37],43:[2,37],44:[2,37],45:[1,56],46:[1,57],47:[1,58],48:[2,37],49:[2,37],52:[2,37]},{15:[2,34],30:[2,34],31:[2,34],40:[2,34],41:[2,34],42:[2,34],43:[2,34],44:[2,34],45:[2,34],46:[2,34],47:[2,34],48:[2,34],49:[2,34],52:[2,34]},{15:[2,35],30:[2,35],31:[2,35],40:[2,35],41:[2,35],42:[2,35],43:[2,35],44:[2,35],45:[2,35],46:[2,35],47:[2,35],48:[2,35],49:[2,35],52:[2,35]},{31:[2,29],33:60,37:59,41:[2,29],42:[2,29],43:[2,29],44:[2,29]},{30:[2,25],31:[2,25]},{30:[2,27],31:[2,27]},{49:[2,50],50:61,51:[2,50],53:62,54:[1,63]},{30:[2,47],31:[2,47]},{30:[2,48],31:[2,48]},{15:[2,41],30:[2,41],31:[2,41],49:[2,41],52:[2,41]},{15:[2,33],30:[2,33],31:[2,33],40:[1,64],41:[2,33],42:[2,33],43:[2,33],44:[2,33],48:[2,33],49:[2,33],52:[2,33]},{15:[2,38],30:[2,38],31:[2,38],40:[2,38],41:[2,38],42:[2,38],43:[2,38],44:[2,38],48:[2,38],49:[2,38],52:[2,38]},{15:[2,39],30:[2,39],31:[2,39],40:[2,39],41:[2,39],42:[2,39],43:[2,39],44:[2,39],48:[2,39],49:[2,39],52:[2,39]},{15:[2,40],30:[2,40],31:[2,40],40:[2,40],41:[2,40],42:[2,40],43:[2,40],44:[2,40],48:[2,40],49:[2,40],52:[2,40]},{31:[1,66],44:[1,65]},{31:[2,31],36:43,38:45,41:[1,46],42:[1,47],43:[1,48],44:[2,31]},{49:[1,68],51:[1,67]},{49:[2,51],51:[2,51],54:[1,69]},{49:[2,54],51:[2,54],54:[2,54]},{15:[2,32],30:[2,32],31:[2,32],41:[2,32],42:[2,32],43:[2,32],44:[2,32],48:[2,32],49:[2,32],52:[2,32]},{15:[2,36],30:[2,36],31:[2,36],40:[2,36],41:[2,36],42:[2,36],43:[2,36],44:[2,36],45:[2,36],46:[2,36],47:[2,36],48:[2,36],49:[2,36],52:[2,36]},{31:[2,29],33:70,41:[2,29],42:[2,29],43:[2,29],44:[2,29]},{30:[2,46],31:[2,46]},{49:[2,50],50:71,51:[2,50],53:62,54:[1,63]},{49:[2,55],51:[2,55],54:[2,55]},{31:[2,30],36:43,38:45,41:[1,46],42:[1,47],43:[1,48],44:[2,30]},{49:[1,68],51:[1,72]},{49:[2,53],51:[2,53],53:73,54:[1,63]},{49:[2,52],51:[2,52],54:[1,69]}],\ndefaultActions: {34:[2,1],39:[2,2]},\nparseError: function parseError(str, hash) {\n    if (hash.recoverable) {\n        this.trace(str);\n    } else {\n        throw new Error(str);\n    }\n},\nparse: function parse(input) {\n    var self = this, stack = [0], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;\n    var args = lstack.slice.call(arguments, 1);\n    this.lexer.setInput(input);\n    this.lexer.yy = this.yy;\n    this.yy.lexer = this.lexer;\n    this.yy.parser = this;\n    if (typeof this.lexer.yylloc == 'undefined') {\n        this.lexer.yylloc = {};\n    }\n    var yyloc = this.lexer.yylloc;\n    lstack.push(yyloc);\n    var ranges = this.lexer.options && this.lexer.options.ranges;\n    if (typeof this.yy.parseError === 'function') {\n        this.parseError = this.yy.parseError;\n    } else {\n        this.parseError = Object.getPrototypeOf(this).parseError;\n    }\n    function popStack(n) {\n        stack.length = stack.length - 2 * n;\n        vstack.length = vstack.length - n;\n        lstack.length = lstack.length - n;\n    }\n    function lex() {\n        var token;\n        token = self.lexer.lex() || EOF;\n        if (typeof token !== 'number') {\n            token = self.symbols_[token] || token;\n        }\n        return token;\n    }\n    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;\n    while (true) {\n        state = stack[stack.length - 1];\n        if (this.defaultActions[state]) {\n            action = this.defaultActions[state];\n        } else {\n            if (symbol === null || typeof symbol == 'undefined') {\n                symbol = lex();\n            }\n            action = table[state] && table[state][symbol];\n        }\n                    if (typeof action === 'undefined' || !action.length || !action[0]) {\n                var errStr = '';\n                expected = [];\n                for (p in table[state]) {\n                    if (this.terminals_[p] && p > TERROR) {\n                        expected.push('\\'' + this.terminals_[p] + '\\'');\n                    }\n                }\n                if (this.lexer.showPosition) {\n                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\\n' + this.lexer.showPosition() + '\\nExpecting ' + expected.join(', ') + ', got \\'' + (this.terminals_[symbol] || symbol) + '\\'';\n                } else {\n                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\\'' + (this.terminals_[symbol] || symbol) + '\\'');\n                }\n                this.parseError(errStr, {\n                    text: this.lexer.match,\n                    token: this.terminals_[symbol] || symbol,\n                    line: this.lexer.yylineno,\n                    loc: yyloc,\n                    expected: expected\n                });\n            }\n        if (action[0] instanceof Array && action.length > 1) {\n            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);\n        }\n        switch (action[0]) {\n        case 1:\n            stack.push(symbol);\n            vstack.push(this.lexer.yytext);\n            lstack.push(this.lexer.yylloc);\n            stack.push(action[1]);\n            symbol = null;\n            if (!preErrorSymbol) {\n                yyleng = this.lexer.yyleng;\n                yytext = this.lexer.yytext;\n                yylineno = this.lexer.yylineno;\n                yyloc = this.lexer.yylloc;\n                if (recovering > 0) {\n                    recovering--;\n                }\n            } else {\n                symbol = preErrorSymbol;\n                preErrorSymbol = null;\n            }\n            break;\n        case 2:\n            len = this.productions_[action[1]][1];\n            yyval.$ = vstack[vstack.length - len];\n            yyval._$ = {\n                first_line: lstack[lstack.length - (len || 1)].first_line,\n                last_line: lstack[lstack.length - 1].last_line,\n                first_column: lstack[lstack.length - (len || 1)].first_column,\n                last_column: lstack[lstack.length - 1].last_column\n            };\n            if (ranges) {\n                yyval._$.range = [\n                    lstack[lstack.length - (len || 1)].range[0],\n                    lstack[lstack.length - 1].range[1]\n                ];\n            }\n            r = this.performAction.apply(yyval, [\n                yytext,\n                yyleng,\n                yylineno,\n                this.yy,\n                action[1],\n                vstack,\n                lstack\n            ].concat(args));\n            if (typeof r !== 'undefined') {\n                return r;\n            }\n            if (len) {\n                stack = stack.slice(0, -1 * len * 2);\n                vstack = vstack.slice(0, -1 * len);\n                lstack = lstack.slice(0, -1 * len);\n            }\n            stack.push(this.productions_[action[1]][0]);\n            vstack.push(yyval.$);\n            lstack.push(yyval._$);\n            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];\n            stack.push(newState);\n            break;\n        case 3:\n            return true;\n        }\n    }\n    return true;\n}};\n\nvar transform = require('./ebnf-transform').transform;\nvar ebnf = false;\n\n\n// transform ebnf to bnf if necessary\nfunction extend (json, grammar) {\n    json.bnf = ebnf ? transform(grammar) : grammar;\n    return json;\n}\n\n/* generated by jison-lex 0.2.1 */\nvar lexer = (function(){\nvar lexer = {\n\nEOF:1,\n\nparseError:function parseError(str, hash) {\n        if (this.yy.parser) {\n            this.yy.parser.parseError(str, hash);\n        } else {\n            throw new Error(str);\n        }\n    },\n\n// resets the lexer, sets new input\nsetInput:function (input) {\n        this._input = input;\n        this._more = this._backtrack = this.done = false;\n        this.yylineno = this.yyleng = 0;\n        this.yytext = this.matched = this.match = '';\n        this.conditionStack = ['INITIAL'];\n        this.yylloc = {\n            first_line: 1,\n            first_column: 0,\n            last_line: 1,\n            last_column: 0\n        };\n        if (this.options.ranges) {\n            this.yylloc.range = [0,0];\n        }\n        this.offset = 0;\n        return this;\n    },\n\n// consumes and returns one char from the input\ninput:function () {\n        var ch = this._input[0];\n        this.yytext += ch;\n        this.yyleng++;\n        this.offset++;\n        this.match += ch;\n        this.matched += ch;\n        var lines = ch.match(/(?:\\r\\n?|\\n).*/g);\n        if (lines) {\n            this.yylineno++;\n            this.yylloc.last_line++;\n        } else {\n            this.yylloc.last_column++;\n        }\n        if (this.options.ranges) {\n            this.yylloc.range[1]++;\n        }\n\n        this._input = this._input.slice(1);\n        return ch;\n    },\n\n// unshifts one char (or a string) into the input\nunput:function (ch) {\n        var len = ch.length;\n        var lines = ch.split(/(?:\\r\\n?|\\n)/g);\n\n        this._input = ch + this._input;\n        this.yytext = this.yytext.substr(0, this.yytext.length - len - 1);\n        //this.yyleng -= len;\n        this.offset -= len;\n        var oldLines = this.match.split(/(?:\\r\\n?|\\n)/g);\n        this.match = this.match.substr(0, this.match.length - 1);\n        this.matched = this.matched.substr(0, this.matched.length - 1);\n\n        if (lines.length - 1) {\n            this.yylineno -= lines.length - 1;\n        }\n        var r = this.yylloc.range;\n\n        this.yylloc = {\n            first_line: this.yylloc.first_line,\n            last_line: this.yylineno + 1,\n            first_column: this.yylloc.first_column,\n            last_column: lines ?\n                (lines.length === oldLines.length ? this.yylloc.first_column : 0)\n                 + oldLines[oldLines.length - lines.length].length - lines[0].length :\n              this.yylloc.first_column - len\n        };\n\n        if (this.options.ranges) {\n            this.yylloc.range = [r[0], r[0] + this.yyleng - len];\n        }\n        this.yyleng = this.yytext.length;\n        return this;\n    },\n\n// When called from action, caches matched text and appends it on next action\nmore:function () {\n        this._more = true;\n        return this;\n    },\n\n// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.\nreject:function () {\n        if (this.options.backtrack_lexer) {\n            this._backtrack = true;\n        } else {\n            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\\n' + this.showPosition(), {\n                text: \"\",\n                token: null,\n                line: this.yylineno\n            });\n\n        }\n        return this;\n    },\n\n// retain first n characters of the match\nless:function (n) {\n        this.unput(this.match.slice(n));\n    },\n\n// displays already matched input, i.e. for error messages\npastInput:function () {\n        var past = this.matched.substr(0, this.matched.length - this.match.length);\n        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\\n/g, \"\");\n    },\n\n// displays upcoming input, i.e. for error messages\nupcomingInput:function () {\n        var next = this.match;\n        if (next.length < 20) {\n            next += this._input.substr(0, 20-next.length);\n        }\n        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\\n/g, \"\");\n    },\n\n// displays the character position where the lexing error occurred, i.e. for error messages\nshowPosition:function () {\n        var pre = this.pastInput();\n        var c = new Array(pre.length + 1).join(\"-\");\n        return pre + this.upcomingInput() + \"\\n\" + c + \"^\";\n    },\n\n// test the lexed token: return FALSE when not a match, otherwise return token\ntest_match:function (match, indexed_rule) {\n        var token,\n            lines,\n            backup;\n\n        if (this.options.backtrack_lexer) {\n            // save context\n            backup = {\n                yylineno: this.yylineno,\n                yylloc: {\n                    first_line: this.yylloc.first_line,\n                    last_line: this.last_line,\n                    first_column: this.yylloc.first_column,\n                    last_column: this.yylloc.last_column\n                },\n                yytext: this.yytext,\n                match: this.match,\n                matches: this.matches,\n                matched: this.matched,\n                yyleng: this.yyleng,\n                offset: this.offset,\n                _more: this._more,\n                _input: this._input,\n                yy: this.yy,\n                conditionStack: this.conditionStack.slice(0),\n                done: this.done\n            };\n            if (this.options.ranges) {\n                backup.yylloc.range = this.yylloc.range.slice(0);\n            }\n        }\n\n        lines = match[0].match(/(?:\\r\\n?|\\n).*/g);\n        if (lines) {\n            this.yylineno += lines.length;\n        }\n        this.yylloc = {\n            first_line: this.yylloc.last_line,\n            last_line: this.yylineno + 1,\n            first_column: this.yylloc.last_column,\n            last_column: lines ?\n                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\\r?\\n?/)[0].length :\n                         this.yylloc.last_column + match[0].length\n        };\n        this.yytext += match[0];\n        this.match += match[0];\n        this.matches = match;\n        this.yyleng = this.yytext.length;\n        if (this.options.ranges) {\n            this.yylloc.range = [this.offset, this.offset += this.yyleng];\n        }\n        this._more = false;\n        this._backtrack = false;\n        this._input = this._input.slice(match[0].length);\n        this.matched += match[0];\n        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);\n        if (this.done && this._input) {\n            this.done = false;\n        }\n        if (token) {\n            return token;\n        } else if (this._backtrack) {\n            // recover context\n            for (var k in backup) {\n                this[k] = backup[k];\n            }\n            return false; // rule action called reject() implying the next rule should be tested instead.\n        }\n        return false;\n    },\n\n// return next match in input\nnext:function () {\n        if (this.done) {\n            return this.EOF;\n        }\n        if (!this._input) {\n            this.done = true;\n        }\n\n        var token,\n            match,\n            tempMatch,\n            index;\n        if (!this._more) {\n            this.yytext = '';\n            this.match = '';\n        }\n        var rules = this._currentRules();\n        for (var i = 0; i < rules.length; i++) {\n            tempMatch = this._input.match(this.rules[rules[i]]);\n            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {\n                match = tempMatch;\n                index = i;\n                if (this.options.backtrack_lexer) {\n                    token = this.test_match(tempMatch, rules[i]);\n                    if (token !== false) {\n                        return token;\n                    } else if (this._backtrack) {\n                        match = false;\n                        continue; // rule action called reject() implying a rule MISmatch.\n                    } else {\n                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)\n                        return false;\n                    }\n                } else if (!this.options.flex) {\n                    break;\n                }\n            }\n        }\n        if (match) {\n            token = this.test_match(match, rules[index]);\n            if (token !== false) {\n                return token;\n            }\n            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)\n            return false;\n        }\n        if (this._input === \"\") {\n            return this.EOF;\n        } else {\n            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\\n' + this.showPosition(), {\n                text: \"\",\n                token: null,\n                line: this.yylineno\n            });\n        }\n    },\n\n// return next match that has a token\nlex:function lex() {\n        var r = this.next();\n        if (r) {\n            return r;\n        } else {\n            return this.lex();\n        }\n    },\n\n// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)\nbegin:function begin(condition) {\n        this.conditionStack.push(condition);\n    },\n\n// pop the previously active lexer condition state off the condition stack\npopState:function popState() {\n        var n = this.conditionStack.length - 1;\n        if (n > 0) {\n            return this.conditionStack.pop();\n        } else {\n            return this.conditionStack[0];\n        }\n    },\n\n// produce the lexer rule set which is active for the currently active lexer condition state\n_currentRules:function _currentRules() {\n        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {\n            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;\n        } else {\n            return this.conditions[\"INITIAL\"].rules;\n        }\n    },\n\n// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available\ntopState:function topState(n) {\n        n = this.conditionStack.length - 1 - Math.abs(n || 0);\n        if (n >= 0) {\n            return this.conditionStack[n];\n        } else {\n            return \"INITIAL\";\n        }\n    },\n\n// alias for begin(condition)\npushState:function pushState(condition) {\n        this.begin(condition);\n    },\n\n// return the number of states currently on the stack\nstateStackSize:function stateStackSize() {\n        return this.conditionStack.length;\n    },\noptions: {},\nperformAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {\n\nvar YYSTATE=YY_START;\nswitch($avoiding_name_collisions) {\ncase 0:this.pushState('code');return 5;\nbreak;\ncase 1:return 43;\nbreak;\ncase 2:return 44;\nbreak;\ncase 3:return 45;\nbreak;\ncase 4:return 46;\nbreak;\ncase 5:return 47;\nbreak;\ncase 6:/* skip whitespace */\nbreak;\ncase 7:/* skip comment */\nbreak;\ncase 8:/* skip comment */\nbreak;\ncase 9:yy_.yytext = yy_.yytext.substr(1, yy_.yyleng-2); return 40;\nbreak;\ncase 10:return 41;\nbreak;\ncase 11:yy_.yytext = yy_.yytext.substr(1, yy_.yyleng-2); return 42;\nbreak;\ncase 12:yy_.yytext = yy_.yytext.substr(1, yy_.yyleng-2); return 42;\nbreak;\ncase 13:return 28;\nbreak;\ncase 14:return 30;\nbreak;\ncase 15:return 31;\nbreak;\ncase 16:this.pushState(ebnf ? 'ebnf' : 'bnf'); return 5;\nbreak;\ncase 17:if (!yy.options) yy.options = {}; ebnf = yy.options.ebnf = true;\nbreak;\ncase 18:return 48;\nbreak;\ncase 19:return 11;\nbreak;\ncase 20:return 22;\nbreak;\ncase 21:return 23;\nbreak;\ncase 22:return 24;\nbreak;\ncase 23:return 20;\nbreak;\ncase 24:return 18;\nbreak;\ncase 25:return 13;\nbreak;\ncase 26:/* ignore unrecognized decl */\nbreak;\ncase 27:/* ignore type */\nbreak;\ncase 28:yy_.yytext = yy_.yytext.substr(2, yy_.yyleng-4); return 15;\nbreak;\ncase 29:yy_.yytext = yy_.yytext.substr(2, yy_.yytext.length-4); return 15;\nbreak;\ncase 30:yy.depth = 0; this.pushState('action'); return 49;\nbreak;\ncase 31:yy_.yytext = yy_.yytext.substr(2, yy_.yyleng-2); return 52;\nbreak;\ncase 32:/* ignore bad characters */\nbreak;\ncase 33:return 8;\nbreak;\ncase 34:return 54;\nbreak;\ncase 35:return 54;\nbreak;\ncase 36:return 54; // regexp with braces or quotes (and no spaces)\nbreak;\ncase 37:return 54;\nbreak;\ncase 38:return 54;\nbreak;\ncase 39:return 54;\nbreak;\ncase 40:return 54;\nbreak;\ncase 41:yy.depth++; return 49;\nbreak;\ncase 42:if (yy.depth==0) this.begin(ebnf ? 'ebnf' : 'bnf'); else yy.depth--; return 51;\nbreak;\ncase 43:return 9;\nbreak;\n}\n},\nrules: [/^(?:%%)/,/^(?:\\()/,/^(?:\\))/,/^(?:\\*)/,/^(?:\\?)/,/^(?:\\+)/,/^(?:\\s+)/,/^(?:\\/\\/.*)/,/^(?:\\/\\*(.|\\n|\\r)*?\\*\\/)/,/^(?:\\[([a-zA-Z][a-zA-Z0-9_-]*)\\])/,/^(?:([a-zA-Z][a-zA-Z0-9_-]*))/,/^(?:\"[^\"]+\")/,/^(?:'[^']+')/,/^(?::)/,/^(?:;)/,/^(?:\\|)/,/^(?:%%)/,/^(?:%ebnf\\b)/,/^(?:%prec\\b)/,/^(?:%start\\b)/,/^(?:%left\\b)/,/^(?:%right\\b)/,/^(?:%nonassoc\\b)/,/^(?:%parse-param\\b)/,/^(?:%options\\b)/,/^(?:%lex[\\w\\W]*?\\/lex\\b)/,/^(?:%[a-zA-Z]+[^\\r\\n]*)/,/^(?:<[a-zA-Z]*>)/,/^(?:\\{\\{[\\w\\W]*?\\}\\})/,/^(?:%\\{(.|\\r|\\n)*?%\\})/,/^(?:\\{)/,/^(?:->.*)/,/^(?:.)/,/^(?:$)/,/^(?:\\/\\*(.|\\n|\\r)*?\\*\\/)/,/^(?:\\/\\/.*)/,/^(?:\\/[^ /]*?['\"{}'][^ ]*?\\/)/,/^(?:\"(\\\\\\\\|\\\\\"|[^\"])*\")/,/^(?:'(\\\\\\\\|\\\\'|[^'])*')/,/^(?:[/\"'][^{}/\"']+)/,/^(?:[^{}/\"']+)/,/^(?:\\{)/,/^(?:\\})/,/^(?:(.|\\n|\\r)+)/],\nconditions: {\"bnf\":{\"rules\":[0,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33],\"inclusive\":true},\"ebnf\":{\"rules\":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33],\"inclusive\":true},\"action\":{\"rules\":[33,34,35,36,37,38,39,40,41,42],\"inclusive\":false},\"code\":{\"rules\":[33,43],\"inclusive\":false},\"INITIAL\":{\"rules\":[6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33],\"inclusive\":true}}\n};\nreturn lexer;\n})();\nparser.lexer = lexer;\nfunction Parser () {\n  this.yy = {};\n}\nParser.prototype = parser;parser.Parser = Parser;\nreturn new Parser;\n})();\n\n\nif (typeof require !== 'undefined' && typeof exports !== 'undefined') {\nexports.parser = bnf;\nexports.Parser = bnf.Parser;\nexports.parse = function () { return bnf.parse.apply(bnf, arguments); };\nexports.main = function commonjsMain(args) {\n    if (!args[1]) {\n        console.log('Usage: '+args[0]+' FILE');\n        process.exit(1);\n    }\n    var source = require('fs').readFileSync(require('path').normalize(args[1]), \"utf8\");\n    return exports.parser.parse(source);\n};\nif (typeof module !== 'undefined' && require.main === module) {\n  exports.main(process.argv.slice(1));\n}\n}", "var bnf = require(\"./parser\").parser,\n    ebnf = require(\"./ebnf-transform\"),\n    jisonlex = require(\"lex-parser\");\n\nexports.parse = function parse (grammar) { return bnf.parse(grammar); };\nexports.transform = ebnf.transform;\n\n// adds a declaration to the grammar\nbnf.yy.addDeclaration = function (grammar, decl) {\n    if (decl.start) {\n        grammar.start = decl.start;\n\n    } else if (decl.lex) {\n        grammar.lex = parseLex(decl.lex);\n\n    } else if (decl.operator) {\n        if (!grammar.operators) grammar.operators = [];\n        grammar.operators.push(decl.operator);\n\n    } else if (decl.parseParam) {\n        if (!grammar.parseParams) grammar.parseParams = [];\n        grammar.parseParams = grammar.parseParams.concat(decl.parseParam);\n\n    } else if (decl.include) {\n        if (!grammar.moduleInclude) grammar.moduleInclude = '';\n        grammar.moduleInclude += decl.include;\n\n    } else if (decl.options) {\n        if (!grammar.options) grammar.options = {};\n        for (var i=0; i < decl.options.length; i++) {\n            grammar.options[decl.options[i]] = true;\n        }\n    }\n\n};\n\n// parse an embedded lex section\nvar parseLex = function (text) {\n    return jisonlex.parse(text.replace(/(?:^%lex)|(?:\\/lex$)/g, ''));\n};\n\n", "/*! Copyright (c) 2011, Lloyd Hilaiel, ISC License */\n/*\n * This is the JSONSelect reference implementation, in javascript.  This\n * code is designed to run under node.js or in a browser.  In the former\n * case, the \"public API\" is exposed as properties on the `export` object,\n * in the latter, as properties on `window.JSONSelect`.  That API is thus:\n *\n * Selector formating and parameter escaping:\n *\n * Anywhere where a string selector is selected, it may be followed by an\n * optional array of values.  When provided, they will be escaped and\n * inserted into the selector string properly escaped.  i.e.:\n *\n *   .match(':has(?)', [ 'foo' ], {}) \n * \n * would result in the seclector ':has(\"foo\")' being matched against {}.\n *\n * This feature makes dynamically generated selectors more readable.\n *\n * .match(selector, [ values ], object)\n *\n *   Parses and \"compiles\" the selector, then matches it against the object\n *   argument.  Matches are returned in an array.  Throws an error when\n *   there's a problem parsing the selector.\n *\n * .forEach(selector, [ values ], object, callback)\n *\n *   Like match, but rather than returning an array, invokes the provided\n *   callback once per match as the matches are discovered. \n * \n * .compile(selector, [ values ]) \n *\n *   Parses the selector and compiles it to an internal form, and returns\n *   an object which contains the compiled selector and has two properties:\n *   `match` and `forEach`.  These two functions work identically to the\n *   above, except they do not take a selector as an argument and instead\n *   use the compiled selector.\n *\n *   For cases where a complex selector is repeatedly used, this method\n *   should be faster as it will avoid recompiling the selector each time. \n */\n(function(exports) {\n\n    var // localize references\n    toString = Object.prototype.toString;\n\n    function jsonParse(str) {\n      try {\n          if(JSON && JSON.parse){\n              return JSON.parse(str);\n          }\n          return (new Function(\"return \" + str))();\n      } catch(e) {\n        te(\"ijs\", e.message);\n      }\n    }\n\n    // emitted error codes.\n    var errorCodes = {\n        \"bop\":  \"binary operator expected\",\n        \"ee\":   \"expression expected\",\n        \"epex\": \"closing paren expected ')'\",\n        \"ijs\":  \"invalid json string\",\n        \"mcp\":  \"missing closing paren\",\n        \"mepf\": \"malformed expression in pseudo-function\",\n        \"mexp\": \"multiple expressions not allowed\",\n        \"mpc\":  \"multiple pseudo classes (:xxx) not allowed\",\n        \"nmi\":  \"multiple ids not allowed\",\n        \"pex\":  \"opening paren expected '('\",\n        \"se\":   \"selector expected\",\n        \"sex\":  \"string expected\",\n        \"sra\":  \"string required after '.'\",\n        \"uc\":   \"unrecognized char\",\n        \"ucp\":  \"unexpected closing paren\",\n        \"ujs\":  \"unclosed json string\",\n        \"upc\":  \"unrecognized pseudo class\"\n    };\n\n    // throw an error message\n    function te(ec, context) {\n      throw new Error(errorCodes[ec] + ( context && \" in '\" + context + \"'\"));\n    }\n\n    // THE LEXER\n    var toks = {\n        psc: 1, // pseudo class\n        psf: 2, // pseudo class function\n        typ: 3, // type\n        str: 4, // string\n        ide: 5  // identifiers (or \"classes\", stuff after a dot)\n    };\n\n    // The primary lexing regular expression in jsonselect\n    var pat = new RegExp(\n        \"^(?:\" +\n        // (1) whitespace\n        \"([\\\\r\\\\n\\\\t\\\\ ]+)|\" +\n        // (2) one-char ops\n        \"([~*,>\\\\)\\\\(])|\" +\n        // (3) types names\n        \"(string|boolean|null|array|object|number)|\" +\n        // (4) pseudo classes\n        \"(:(?:root|first-child|last-child|only-child))|\" +\n        // (5) pseudo functions\n        \"(:(?:nth-child|nth-last-child|has|expr|val|contains))|\" +\n        // (6) bogusly named pseudo something or others\n        \"(:\\\\w+)|\" +\n        // (7 & 8) identifiers and JSON strings\n        \"(?:(\\\\.)?(\\\\\\\"(?:[^\\\\\\\\\\\\\\\"]|\\\\\\\\[^\\\\\\\"])*\\\\\\\"))|\" +\n        // (8) bogus JSON strings missing a trailing quote\n        \"(\\\\\\\")|\" +\n        // (9) identifiers (unquoted)\n        \"\\\\.((?:[_a-zA-Z]|[^\\\\0-\\\\0177]|\\\\\\\\[^\\\\r\\\\n\\\\f0-9a-fA-F])(?:[_a-zA-Z0-9\\\\-]|[^\\\\u0000-\\\\u0177]|(?:\\\\\\\\[^\\\\r\\\\n\\\\f0-9a-fA-F]))*)\" +\n        \")\"\n    );\n\n    // A regular expression for matching \"nth expressions\" (see grammar, what :nth-child() eats)\n    var nthPat = /^\\s*\\(\\s*(?:([+\\-]?)([0-9]*)n\\s*(?:([+\\-])\\s*([0-9]))?|(odd|even)|([+\\-]?[0-9]+))\\s*\\)/;\n    function lex(str, off) {\n        if (!off) off = 0;\n        var m = pat.exec(str.substr(off));\n        if (!m) return undefined;\n        off+=m[0].length;\n        var a;\n        if (m[1]) a = [off, \" \"];\n        else if (m[2]) a = [off, m[0]];\n        else if (m[3]) a = [off, toks.typ, m[0]];\n        else if (m[4]) a = [off, toks.psc, m[0]];\n        else if (m[5]) a = [off, toks.psf, m[0]];\n        else if (m[6]) te(\"upc\", str);\n        else if (m[8]) a = [off, m[7] ? toks.ide : toks.str, jsonParse(m[8])];\n        else if (m[9]) te(\"ujs\", str);\n        else if (m[10]) a = [off, toks.ide, m[10].replace(/\\\\([^\\r\\n\\f0-9a-fA-F])/g,\"$1\")];\n        return a;\n    }\n\n    // THE EXPRESSION SUBSYSTEM\n\n    var exprPat = new RegExp(\n            // skip and don't capture leading whitespace\n            \"^\\\\s*(?:\" +\n            // (1) simple vals\n            \"(true|false|null)|\" + \n            // (2) numbers\n            \"(-?\\\\d+(?:\\\\.\\\\d*)?(?:[eE][+\\\\-]?\\\\d+)?)|\" +\n            // (3) strings\n            \"(\\\"(?:[^\\\\]|\\\\[^\\\"])*\\\")|\" +\n            // (4) the 'x' value placeholder\n            \"(x)|\" +\n            // (5) binops\n            \"(&&|\\\\|\\\\||[\\\\$\\\\^<>!\\\\*]=|[=+\\\\-*/%<>])|\" +\n            // (6) parens\n            \"([\\\\(\\\\)])\" +\n            \")\"\n    );\n\n    function is(o, t) { return typeof o === t; }\n    var operators = {\n        '*':  [ 9, function(lhs, rhs) { return lhs * rhs; } ],\n        '/':  [ 9, function(lhs, rhs) { return lhs / rhs; } ],\n        '%':  [ 9, function(lhs, rhs) { return lhs % rhs; } ],\n        '+':  [ 7, function(lhs, rhs) { return lhs + rhs; } ],\n        '-':  [ 7, function(lhs, rhs) { return lhs - rhs; } ],\n        '<=': [ 5, function(lhs, rhs) { return is(lhs, 'number') && is(rhs, 'number') && lhs <= rhs; } ],\n        '>=': [ 5, function(lhs, rhs) { return is(lhs, 'number') && is(rhs, 'number') && lhs >= rhs; } ],\n        '$=': [ 5, function(lhs, rhs) { return is(lhs, 'string') && is(rhs, 'string') && lhs.lastIndexOf(rhs) === lhs.length - rhs.length; } ],\n        '^=': [ 5, function(lhs, rhs) { return is(lhs, 'string') && is(rhs, 'string') && lhs.indexOf(rhs) === 0; } ],\n        '*=': [ 5, function(lhs, rhs) { return is(lhs, 'string') && is(rhs, 'string') && lhs.indexOf(rhs) !== -1; } ],\n        '>':  [ 5, function(lhs, rhs) { return is(lhs, 'number') && is(rhs, 'number') && lhs > rhs; } ],\n        '<':  [ 5, function(lhs, rhs) { return is(lhs, 'number') && is(rhs, 'number') && lhs < rhs; } ],\n        '=':  [ 3, function(lhs, rhs) { return lhs === rhs; } ],\n        '!=': [ 3, function(lhs, rhs) { return lhs !== rhs; } ],\n        '&&': [ 2, function(lhs, rhs) { return lhs && rhs; } ],\n        '||': [ 1, function(lhs, rhs) { return lhs || rhs; } ]\n    };\n\n    function exprLex(str, off) {\n        var v, m = exprPat.exec(str.substr(off));\n        if (m) {\n            off += m[0].length;\n            v = m[1] || m[2] || m[3] || m[5] || m[6];\n            if (m[1] || m[2] || m[3]) return [off, 0, jsonParse(v)];\n            else if (m[4]) return [off, 0, undefined];\n            return [off, v];\n        }\n    }\n\n    function exprParse2(str, off) {\n        if (!off) off = 0;\n        // first we expect a value or a '('\n        var l = exprLex(str, off),\n            lhs;\n        if (l && l[1] === '(') {\n            lhs = exprParse2(str, l[0]);\n            var p = exprLex(str, lhs[0]);\n            if (!p || p[1] !== ')') te('epex', str);\n            off = p[0];\n            lhs = [ '(', lhs[1] ];\n        } else if (!l || (l[1] && l[1] != 'x')) {\n            te(\"ee\", str + \" - \" + ( l[1] && l[1] ));\n        } else {\n            lhs = ((l[1] === 'x') ? undefined : l[2]);\n            off = l[0];\n        }\n\n        // now we expect a binary operator or a ')'\n        var op = exprLex(str, off);\n        if (!op || op[1] == ')') return [off, lhs];\n        else if (op[1] == 'x' || !op[1]) {\n            te('bop', str + \" - \" + ( op[1] && op[1] ));\n        }\n\n        // tail recursion to fetch the rhs expression\n        var rhs = exprParse2(str, op[0]);\n        off = rhs[0];\n        rhs = rhs[1];\n\n        // and now precedence!  how shall we put everything together?\n        var v;\n        if (typeof rhs !== 'object' || rhs[0] === '(' || operators[op[1]][0] < operators[rhs[1]][0] ) {\n            v = [lhs, op[1], rhs];\n        }\n        else {\n            v = rhs;\n            while (typeof rhs[0] === 'object' && rhs[0][0] != '(' && operators[op[1]][0] >= operators[rhs[0][1]][0]) {\n                rhs = rhs[0];\n            }\n            rhs[0] = [lhs, op[1], rhs[0]];\n        }\n        return [off, v];\n    }\n\n    function exprParse(str, off) {\n        function deparen(v) {\n            if (typeof v !== 'object' || v === null) return v;\n            else if (v[0] === '(') return deparen(v[1]);\n            else return [deparen(v[0]), v[1], deparen(v[2])];\n        }\n        var e = exprParse2(str, off ? off : 0);\n        return [e[0], deparen(e[1])];\n    }\n\n    function exprEval(expr, x) {\n        if (expr === undefined) return x;\n        else if (expr === null || typeof expr !== 'object') {\n            return expr;\n        }\n        var lhs = exprEval(expr[0], x),\n            rhs = exprEval(expr[2], x);\n        return operators[expr[1]][1](lhs, rhs);\n    }\n\n    // THE PARSER\n\n    function parse(str, off, nested, hints) {\n        if (!nested) hints = {};\n\n        var a = [], am, readParen;\n        if (!off) off = 0; \n\n        while (true) {\n            var s = parse_selector(str, off, hints);\n            a.push(s[1]);\n            s = lex(str, off = s[0]);\n            if (s && s[1] === \" \") s = lex(str, off = s[0]);\n            if (!s) break;\n            // now we've parsed a selector, and have something else...\n            if (s[1] === \">\" || s[1] === \"~\") {\n                if (s[1] === \"~\") hints.usesSiblingOp = true;\n                a.push(s[1]);\n                off = s[0];\n            } else if (s[1] === \",\") {\n                if (am === undefined) am = [ \",\", a ];\n                else am.push(a);\n                a = [];\n                off = s[0];\n            } else if (s[1] === \")\") {\n                if (!nested) te(\"ucp\", s[1]);\n                readParen = 1;\n                off = s[0];\n                break;\n            }\n        }\n        if (nested && !readParen) te(\"mcp\", str);\n        if (am) am.push(a);\n        var rv;\n        if (!nested && hints.usesSiblingOp) {\n            rv = normalize(am ? am : a);\n        } else {\n            rv = am ? am : a;\n        }\n        return [off, rv];\n    }\n\n    function normalizeOne(sel) {\n        var sels = [], s;\n        for (var i = 0; i < sel.length; i++) {\n            if (sel[i] === '~') {\n                // `A ~ B` maps to `:has(:root > A) > B`\n                // `Z A ~ B` maps to `Z :has(:root > A) > B, Z:has(:root > A) > B`\n                // This first clause, takes care of the first case, and the first half of the latter case.\n                if (i < 2 || sel[i-2] != '>') {\n                    s = sel.slice(0,i-1);\n                    s = s.concat([{has:[[{pc: \":root\"}, \">\", sel[i-1]]]}, \">\"]);\n                    s = s.concat(sel.slice(i+1));\n                    sels.push(s);\n                }\n                // here we take care of the second half of above:\n                // (`Z A ~ B` maps to `Z :has(:root > A) > B, Z :has(:root > A) > B`)\n                // and a new case:\n                // Z > A ~ B maps to Z:has(:root > A) > B\n                if (i > 1) {\n                    var at = sel[i-2] === '>' ? i-3 : i-2;\n                    s = sel.slice(0,at);\n                    var z = {};\n                    for (var k in sel[at]) if (sel[at].hasOwnProperty(k)) z[k] = sel[at][k];\n                    if (!z.has) z.has = [];\n                    z.has.push([{pc: \":root\"}, \">\", sel[i-1]]);\n                    s = s.concat(z, '>', sel.slice(i+1));\n                    sels.push(s);\n                }\n                break;\n            }\n        }\n        if (i == sel.length) return sel;\n        return sels.length > 1 ? [','].concat(sels) : sels[0];\n    }\n\n    function normalize(sels) {\n        if (sels[0] === ',') {\n            var r = [\",\"];\n            for (var i = i; i < sels.length; i++) {\n                var s = normalizeOne(s[i]);\n                r = r.concat(s[0] === \",\" ? s.slice(1) : s);\n            }\n            return r;\n        } else {\n            return normalizeOne(sels);\n        }\n    }\n\n    function parse_selector(str, off, hints) {\n        var soff = off;\n        var s = { };\n        var l = lex(str, off);\n        // skip space\n        if (l && l[1] === \" \") { soff = off = l[0]; l = lex(str, off); }\n        if (l && l[1] === toks.typ) {\n            s.type = l[2];\n            l = lex(str, (off = l[0]));\n        } else if (l && l[1] === \"*\") {\n            // don't bother representing the universal sel, '*' in the\n            // parse tree, cause it's the default\n            l = lex(str, (off = l[0]));\n        }\n\n        // now support either an id or a pc\n        while (true) {\n            if (l === undefined) {\n                break;\n            } else if (l[1] === toks.ide) {\n                if (s.id) te(\"nmi\", l[1]);\n                s.id = l[2];\n            } else if (l[1] === toks.psc) {\n                if (s.pc || s.pf) te(\"mpc\", l[1]);\n                // collapse first-child and last-child into nth-child expressions\n                if (l[2] === \":first-child\") {\n                    s.pf = \":nth-child\";\n                    s.a = 0;\n                    s.b = 1;\n                } else if (l[2] === \":last-child\") {\n                    s.pf = \":nth-last-child\";\n                    s.a = 0;\n                    s.b = 1;\n                } else {\n                    s.pc = l[2];\n                }\n            } else if (l[1] === toks.psf) {\n                if (l[2] === \":val\" || l[2] === \":contains\") {\n                    s.expr = [ undefined, l[2] === \":val\" ? \"=\" : \"*=\", undefined];\n                    // any amount of whitespace, followed by paren, string, paren\n                    l = lex(str, (off = l[0]));\n                    if (l && l[1] === \" \") l = lex(str, off = l[0]);\n                    if (!l || l[1] !== \"(\") te(\"pex\", str);\n                    l = lex(str, (off = l[0]));\n                    if (l && l[1] === \" \") l = lex(str, off = l[0]);\n                    if (!l || l[1] !== toks.str) te(\"sex\", str);\n                    s.expr[2] = l[2];\n                    l = lex(str, (off = l[0]));\n                    if (l && l[1] === \" \") l = lex(str, off = l[0]);\n                    if (!l || l[1] !== \")\") te(\"epex\", str);\n                } else if (l[2] === \":has\") {\n                    // any amount of whitespace, followed by paren\n                    l = lex(str, (off = l[0]));\n                    if (l && l[1] === \" \") l = lex(str, off = l[0]);\n                    if (!l || l[1] !== \"(\") te(\"pex\", str);\n                    var h = parse(str, l[0], true);\n                    l[0] = h[0];\n                    if (!s.has) s.has = [];\n                    s.has.push(h[1]);\n                } else if (l[2] === \":expr\") {\n                    if (s.expr) te(\"mexp\", str);\n                    var e = exprParse(str, l[0]);\n                    l[0] = e[0];\n                    s.expr = e[1];\n                } else {\n                    if (s.pc || s.pf ) te(\"mpc\", str);\n                    s.pf = l[2];\n                    var m = nthPat.exec(str.substr(l[0]));\n                    if (!m) te(\"mepf\", str);\n                    if (m[5]) {\n                        s.a = 2;\n                        s.b = (m[5] === \"odd\") ? 1 : 0;\n                    } else if (m[6]) {\n                        s.a = 0;\n                        s.b = parseInt(m[6], 10);\n                    } else {\n                        s.a = parseInt((m[1] ? m[1] : \"+\") + (m[2] ? m[2] : \"1\"),10);\n                        s.b = m[3] ? parseInt(m[3] + m[4],10) : 0;\n                    }\n                    l[0] += m[0].length;\n                }\n            } else {\n                break;\n            }\n            l = lex(str, (off = l[0]));\n        }\n\n        // now if we didn't actually parse anything it's an error\n        if (soff === off) te(\"se\", str);\n\n        return [off, s];\n    }\n\n    // THE EVALUATOR\n\n    function isArray(o) {\n        return Array.isArray ? Array.isArray(o) : \n          toString.call(o) === \"[object Array]\";\n    }\n\n    function mytypeof(o) {\n        if (o === null) return \"null\";\n        var to = typeof o;\n        if (to === \"object\" && isArray(o)) to = \"array\";\n        return to;\n    }\n\n    function mn(node, sel, id, num, tot) {\n        var sels = [];\n        var cs = (sel[0] === \">\") ? sel[1] : sel[0];\n        var m = true, mod;\n        if (cs.type) m = m && (cs.type === mytypeof(node));\n        if (cs.id)   m = m && (cs.id === id);\n        if (m && cs.pf) {\n            if (cs.pf === \":nth-last-child\") num = tot - num;\n            else num++;\n            if (cs.a === 0) {\n                m = cs.b === num;\n            } else {\n                mod = ((num - cs.b) % cs.a);\n\n                m = (!mod && ((num*cs.a + cs.b) >= 0));\n            }\n        }\n        if (m && cs.has) {\n            // perhaps we should augment forEach to handle a return value\n            // that indicates \"client cancels traversal\"?\n            var bail = function() { throw 42; };\n            for (var i = 0; i < cs.has.length; i++) {\n                try {\n                    forEach(cs.has[i], node, bail);\n                } catch (e) {\n                    if (e === 42) continue;\n                }\n                m = false;\n                break;\n            }\n        }\n        if (m && cs.expr) {\n            m = exprEval(cs.expr, node);\n        }\n        // should we repeat this selector for descendants?\n        if (sel[0] !== \">\" && sel[0].pc !== \":root\") sels.push(sel);\n\n        if (m) {\n            // is there a fragment that we should pass down?\n            if (sel[0] === \">\") { if (sel.length > 2) { m = false; sels.push(sel.slice(2)); } }\n            else if (sel.length > 1) { m = false; sels.push(sel.slice(1)); }\n        }\n\n        return [m, sels];\n    }\n\n    function forEach(sel, obj, fun, id, num, tot) {\n        var a = (sel[0] === \",\") ? sel.slice(1) : [sel],\n        a0 = [],\n        call = false,\n        i = 0, j = 0, k, x;\n        for (i = 0; i < a.length; i++) {\n            x = mn(obj, a[i], id, num, tot);\n            if (x[0]) {\n                call = true;\n            }\n            for (j = 0; j < x[1].length; j++) {\n                a0.push(x[1][j]);\n            }\n        }\n        if (a0.length && typeof obj === \"object\") {\n            if (a0.length >= 1) {\n                a0.unshift(\",\");\n            }\n            if (isArray(obj)) {\n                for (i = 0; i < obj.length; i++) {\n                    forEach(a0, obj[i], fun, undefined, i, obj.length);\n                }\n            } else {\n                for (k in obj) {\n                    if (obj.hasOwnProperty(k)) {\n                        forEach(a0, obj[k], fun, k);\n                    }\n                }\n            }\n        }\n        if (call && fun) {\n            fun(obj);\n        }\n    }\n\n    function match(sel, obj) {\n        var a = [];\n        forEach(sel, obj, function(x) {\n            a.push(x);\n        });\n        return a;\n    }\n\n    function format(sel, arr) {\n        sel = sel.replace(/\\?/g, function() {\n            if (arr.length === 0) throw \"too few parameters given\";\n            var p = arr.shift();\n            return ((typeof p === 'string') ? JSON.stringify(p) : p);\n        });\n        if (arr.length) throw \"too many parameters supplied\";\n        return sel;\n    } \n\n    function compile(sel, arr) {\n        if (arr) sel = format(sel, arr);\n        return {\n            sel: parse(sel)[1],\n            match: function(obj){\n                return match(this.sel, obj);\n            },\n            forEach: function(obj, fun) {\n                return forEach(this.sel, obj, fun);\n            }\n        };\n    }\n\n    exports._lex = lex;\n    exports._parse = parse;\n    exports.match = function (sel, arr, obj) {\n        if (!obj) { obj = arr; arr = undefined; }\n        return compile(sel, arr).match(obj);\n    };\n    exports.forEach = function(sel, arr, obj, fun) {\n        if (!fun) { fun = obj;  obj = arr; arr = undefined }\n        return compile(sel, arr).forEach(obj, fun);\n    };\n    exports.compile = compile;\n})(typeof exports === \"undefined\" ? (window.JSONSelect = {}) : exports);\n", "/*\n  Copyright (C) 2012 Ariya Hidayat <ariya.hidayat@gmail.com>\n  Copyright (C) 2012 Mathias Bynens <mathias@qiwi.be>\n  Copyright (C) 2012 Joost-Wim Boekesteijn <joost-wim@boekesteijn.nl>\n  Copyright (C) 2012 Kris Kowal <kris.kowal@cixar.com>\n  Copyright (C) 2012 Yusuke Suzuki <utatane.tea@gmail.com>\n  Copyright (C) 2012 Arpad Borsos <arpad.borsos@googlemail.com>\n  Copyright (C) 2011 Ariya Hidayat <ariya.hidayat@gmail.com>\n\n  Redistribution and use in source and binary forms, with or without\n  modification, are permitted provided that the following conditions are met:\n\n    * Redistributions of source code must retain the above copyright\n      notice, this list of conditions and the following disclaimer.\n    * Redistributions in binary form must reproduce the above copyright\n      notice, this list of conditions and the following disclaimer in the\n      documentation and/or other materials provided with the distribution.\n\n  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n  ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY\n  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n*/\n\n/*jslint bitwise:true plusplus:true */\n/*global esprima:true, define:true, exports:true, window: true,\nthrowError: true, createLiteral: true, generateStatement: true,\nparseAssignmentExpression: true, parseBlock: true, parseExpression: true,\nparseFunctionDeclaration: true, parseFunctionExpression: true,\nparseFunctionSourceElements: true, parseVariableIdentifier: true,\nparseLeftHandSideExpression: true,\nparseStatement: true, parseSourceElement: true */\n\n(function (root, factory) {\n    'use strict';\n\n    // Universal Module Definition (UMD) to support AMD, CommonJS/Node.js,\n    // Rhino, and plain browser loading.\n    if (typeof define === 'function' && define.amd) {\n        define(['exports'], factory);\n    } else if (typeof exports !== 'undefined') {\n        factory(exports);\n    } else {\n        factory((root.esprima = {}));\n    }\n}(this, function (exports) {\n    'use strict';\n\n    var Token,\n        TokenName,\n        Syntax,\n        PropertyKind,\n        Messages,\n        Regex,\n        source,\n        strict,\n        index,\n        lineNumber,\n        lineStart,\n        length,\n        buffer,\n        state,\n        extra;\n\n    Token = {\n        BooleanLiteral: 1,\n        EOF: 2,\n        Identifier: 3,\n        Keyword: 4,\n        NullLiteral: 5,\n        NumericLiteral: 6,\n        Punctuator: 7,\n        StringLiteral: 8\n    };\n\n    TokenName = {};\n    TokenName[Token.BooleanLiteral] = 'Boolean';\n    TokenName[Token.EOF] = '<end>';\n    TokenName[Token.Identifier] = 'Identifier';\n    TokenName[Token.Keyword] = 'Keyword';\n    TokenName[Token.NullLiteral] = 'Null';\n    TokenName[Token.NumericLiteral] = 'Numeric';\n    TokenName[Token.Punctuator] = 'Punctuator';\n    TokenName[Token.StringLiteral] = 'String';\n\n    Syntax = {\n        AssignmentExpression: 'AssignmentExpression',\n        ArrayExpression: 'ArrayExpression',\n        BlockStatement: 'BlockStatement',\n        BinaryExpression: 'BinaryExpression',\n        BreakStatement: 'BreakStatement',\n        CallExpression: 'CallExpression',\n        CatchClause: 'CatchClause',\n        ConditionalExpression: 'ConditionalExpression',\n        ContinueStatement: 'ContinueStatement',\n        DoWhileStatement: 'DoWhileStatement',\n        DebuggerStatement: 'DebuggerStatement',\n        EmptyStatement: 'EmptyStatement',\n        ExpressionStatement: 'ExpressionStatement',\n        ForStatement: 'ForStatement',\n        ForInStatement: 'ForInStatement',\n        FunctionDeclaration: 'FunctionDeclaration',\n        FunctionExpression: 'FunctionExpression',\n        Identifier: 'Identifier',\n        IfStatement: 'IfStatement',\n        Literal: 'Literal',\n        LabeledStatement: 'LabeledStatement',\n        LogicalExpression: 'LogicalExpression',\n        MemberExpression: 'MemberExpression',\n        NewExpression: 'NewExpression',\n        ObjectExpression: 'ObjectExpression',\n        Program: 'Program',\n        Property: 'Property',\n        ReturnStatement: 'ReturnStatement',\n        SequenceExpression: 'SequenceExpression',\n        SwitchStatement: 'SwitchStatement',\n        SwitchCase: 'SwitchCase',\n        ThisExpression: 'ThisExpression',\n        ThrowStatement: 'ThrowStatement',\n        TryStatement: 'TryStatement',\n        UnaryExpression: 'UnaryExpression',\n        UpdateExpression: 'UpdateExpression',\n        VariableDeclaration: 'VariableDeclaration',\n        VariableDeclarator: 'VariableDeclarator',\n        WhileStatement: 'WhileStatement',\n        WithStatement: 'WithStatement'\n    };\n\n    PropertyKind = {\n        Data: 1,\n        Get: 2,\n        Set: 4\n    };\n\n    // Error messages should be identical to V8.\n    Messages = {\n        UnexpectedToken:  'Unexpected token %0',\n        UnexpectedNumber:  'Unexpected number',\n        UnexpectedString:  'Unexpected string',\n        UnexpectedIdentifier:  'Unexpected identifier',\n        UnexpectedReserved:  'Unexpected reserved word',\n        UnexpectedEOS:  'Unexpected end of input',\n        NewlineAfterThrow:  'Illegal newline after throw',\n        InvalidRegExp: 'Invalid regular expression',\n        UnterminatedRegExp:  'Invalid regular expression: missing /',\n        InvalidLHSInAssignment:  'Invalid left-hand side in assignment',\n        InvalidLHSInForIn:  'Invalid left-hand side in for-in',\n        MultipleDefaultsInSwitch: 'More than one default clause in switch statement',\n        NoCatchOrFinally:  'Missing catch or finally after try',\n        UnknownLabel: 'Undefined label \\'%0\\'',\n        Redeclaration: '%0 \\'%1\\' has already been declared',\n        IllegalContinue: 'Illegal continue statement',\n        IllegalBreak: 'Illegal break statement',\n        IllegalReturn: 'Illegal return statement',\n        StrictModeWith:  'Strict mode code may not include a with statement',\n        StrictCatchVariable:  'Catch variable may not be eval or arguments in strict mode',\n        StrictVarName:  'Variable name may not be eval or arguments in strict mode',\n        StrictParamName:  'Parameter name eval or arguments is not allowed in strict mode',\n        StrictParamDupe: 'Strict mode function may not have duplicate parameter names',\n        StrictFunctionName:  'Function name may not be eval or arguments in strict mode',\n        StrictOctalLiteral:  'Octal literals are not allowed in strict mode.',\n        StrictDelete:  'Delete of an unqualified identifier in strict mode.',\n        StrictDuplicateProperty:  'Duplicate data property in object literal not allowed in strict mode',\n        AccessorDataProperty:  'Object literal may not have data and accessor property with the same name',\n        AccessorGetSet:  'Object literal may not have multiple get/set accessors with the same name',\n        StrictLHSAssignment:  'Assignment to eval or arguments is not allowed in strict mode',\n        StrictLHSPostfix:  'Postfix increment/decrement may not have eval or arguments operand in strict mode',\n        StrictLHSPrefix:  'Prefix increment/decrement may not have eval or arguments operand in strict mode',\n        StrictReservedWord:  'Use of future reserved word in strict mode'\n    };\n\n    // See also tools/generate-unicode-regex.py.\n    Regex = {\n        NonAsciiIdentifierStart: new RegExp('[\\xaa\\xb5\\xba\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02c1\\u02c6-\\u02d1\\u02e0-\\u02e4\\u02ec\\u02ee\\u0370-\\u0374\\u0376\\u0377\\u037a-\\u037d\\u0386\\u0388-\\u038a\\u038c\\u038e-\\u03a1\\u03a3-\\u03f5\\u03f7-\\u0481\\u048a-\\u0527\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05d0-\\u05ea\\u05f0-\\u05f2\\u0620-\\u064a\\u066e\\u066f\\u0671-\\u06d3\\u06d5\\u06e5\\u06e6\\u06ee\\u06ef\\u06fa-\\u06fc\\u06ff\\u0710\\u0712-\\u072f\\u074d-\\u07a5\\u07b1\\u07ca-\\u07ea\\u07f4\\u07f5\\u07fa\\u0800-\\u0815\\u081a\\u0824\\u0828\\u0840-\\u0858\\u08a0\\u08a2-\\u08ac\\u0904-\\u0939\\u093d\\u0950\\u0958-\\u0961\\u0971-\\u0977\\u0979-\\u097f\\u0985-\\u098c\\u098f\\u0990\\u0993-\\u09a8\\u09aa-\\u09b0\\u09b2\\u09b6-\\u09b9\\u09bd\\u09ce\\u09dc\\u09dd\\u09df-\\u09e1\\u09f0\\u09f1\\u0a05-\\u0a0a\\u0a0f\\u0a10\\u0a13-\\u0a28\\u0a2a-\\u0a30\\u0a32\\u0a33\\u0a35\\u0a36\\u0a38\\u0a39\\u0a59-\\u0a5c\\u0a5e\\u0a72-\\u0a74\\u0a85-\\u0a8d\\u0a8f-\\u0a91\\u0a93-\\u0aa8\\u0aaa-\\u0ab0\\u0ab2\\u0ab3\\u0ab5-\\u0ab9\\u0abd\\u0ad0\\u0ae0\\u0ae1\\u0b05-\\u0b0c\\u0b0f\\u0b10\\u0b13-\\u0b28\\u0b2a-\\u0b30\\u0b32\\u0b33\\u0b35-\\u0b39\\u0b3d\\u0b5c\\u0b5d\\u0b5f-\\u0b61\\u0b71\\u0b83\\u0b85-\\u0b8a\\u0b8e-\\u0b90\\u0b92-\\u0b95\\u0b99\\u0b9a\\u0b9c\\u0b9e\\u0b9f\\u0ba3\\u0ba4\\u0ba8-\\u0baa\\u0bae-\\u0bb9\\u0bd0\\u0c05-\\u0c0c\\u0c0e-\\u0c10\\u0c12-\\u0c28\\u0c2a-\\u0c33\\u0c35-\\u0c39\\u0c3d\\u0c58\\u0c59\\u0c60\\u0c61\\u0c85-\\u0c8c\\u0c8e-\\u0c90\\u0c92-\\u0ca8\\u0caa-\\u0cb3\\u0cb5-\\u0cb9\\u0cbd\\u0cde\\u0ce0\\u0ce1\\u0cf1\\u0cf2\\u0d05-\\u0d0c\\u0d0e-\\u0d10\\u0d12-\\u0d3a\\u0d3d\\u0d4e\\u0d60\\u0d61\\u0d7a-\\u0d7f\\u0d85-\\u0d96\\u0d9a-\\u0db1\\u0db3-\\u0dbb\\u0dbd\\u0dc0-\\u0dc6\\u0e01-\\u0e30\\u0e32\\u0e33\\u0e40-\\u0e46\\u0e81\\u0e82\\u0e84\\u0e87\\u0e88\\u0e8a\\u0e8d\\u0e94-\\u0e97\\u0e99-\\u0e9f\\u0ea1-\\u0ea3\\u0ea5\\u0ea7\\u0eaa\\u0eab\\u0ead-\\u0eb0\\u0eb2\\u0eb3\\u0ebd\\u0ec0-\\u0ec4\\u0ec6\\u0edc-\\u0edf\\u0f00\\u0f40-\\u0f47\\u0f49-\\u0f6c\\u0f88-\\u0f8c\\u1000-\\u102a\\u103f\\u1050-\\u1055\\u105a-\\u105d\\u1061\\u1065\\u1066\\u106e-\\u1070\\u1075-\\u1081\\u108e\\u10a0-\\u10c5\\u10c7\\u10cd\\u10d0-\\u10fa\\u10fc-\\u1248\\u124a-\\u124d\\u1250-\\u1256\\u1258\\u125a-\\u125d\\u1260-\\u1288\\u128a-\\u128d\\u1290-\\u12b0\\u12b2-\\u12b5\\u12b8-\\u12be\\u12c0\\u12c2-\\u12c5\\u12c8-\\u12d6\\u12d8-\\u1310\\u1312-\\u1315\\u1318-\\u135a\\u1380-\\u138f\\u13a0-\\u13f4\\u1401-\\u166c\\u166f-\\u167f\\u1681-\\u169a\\u16a0-\\u16ea\\u16ee-\\u16f0\\u1700-\\u170c\\u170e-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176c\\u176e-\\u1770\\u1780-\\u17b3\\u17d7\\u17dc\\u1820-\\u1877\\u1880-\\u18a8\\u18aa\\u18b0-\\u18f5\\u1900-\\u191c\\u1950-\\u196d\\u1970-\\u1974\\u1980-\\u19ab\\u19c1-\\u19c7\\u1a00-\\u1a16\\u1a20-\\u1a54\\u1aa7\\u1b05-\\u1b33\\u1b45-\\u1b4b\\u1b83-\\u1ba0\\u1bae\\u1baf\\u1bba-\\u1be5\\u1c00-\\u1c23\\u1c4d-\\u1c4f\\u1c5a-\\u1c7d\\u1ce9-\\u1cec\\u1cee-\\u1cf1\\u1cf5\\u1cf6\\u1d00-\\u1dbf\\u1e00-\\u1f15\\u1f18-\\u1f1d\\u1f20-\\u1f45\\u1f48-\\u1f4d\\u1f50-\\u1f57\\u1f59\\u1f5b\\u1f5d\\u1f5f-\\u1f7d\\u1f80-\\u1fb4\\u1fb6-\\u1fbc\\u1fbe\\u1fc2-\\u1fc4\\u1fc6-\\u1fcc\\u1fd0-\\u1fd3\\u1fd6-\\u1fdb\\u1fe0-\\u1fec\\u1ff2-\\u1ff4\\u1ff6-\\u1ffc\\u2071\\u207f\\u2090-\\u209c\\u2102\\u2107\\u210a-\\u2113\\u2115\\u2119-\\u211d\\u2124\\u2126\\u2128\\u212a-\\u212d\\u212f-\\u2139\\u213c-\\u213f\\u2145-\\u2149\\u214e\\u2160-\\u2188\\u2c00-\\u2c2e\\u2c30-\\u2c5e\\u2c60-\\u2ce4\\u2ceb-\\u2cee\\u2cf2\\u2cf3\\u2d00-\\u2d25\\u2d27\\u2d2d\\u2d30-\\u2d67\\u2d6f\\u2d80-\\u2d96\\u2da0-\\u2da6\\u2da8-\\u2dae\\u2db0-\\u2db6\\u2db8-\\u2dbe\\u2dc0-\\u2dc6\\u2dc8-\\u2dce\\u2dd0-\\u2dd6\\u2dd8-\\u2dde\\u2e2f\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303c\\u3041-\\u3096\\u309d-\\u309f\\u30a1-\\u30fa\\u30fc-\\u30ff\\u3105-\\u312d\\u3131-\\u318e\\u31a0-\\u31ba\\u31f0-\\u31ff\\u3400-\\u4db5\\u4e00-\\u9fcc\\ua000-\\ua48c\\ua4d0-\\ua4fd\\ua500-\\ua60c\\ua610-\\ua61f\\ua62a\\ua62b\\ua640-\\ua66e\\ua67f-\\ua697\\ua6a0-\\ua6ef\\ua717-\\ua71f\\ua722-\\ua788\\ua78b-\\ua78e\\ua790-\\ua793\\ua7a0-\\ua7aa\\ua7f8-\\ua801\\ua803-\\ua805\\ua807-\\ua80a\\ua80c-\\ua822\\ua840-\\ua873\\ua882-\\ua8b3\\ua8f2-\\ua8f7\\ua8fb\\ua90a-\\ua925\\ua930-\\ua946\\ua960-\\ua97c\\ua984-\\ua9b2\\ua9cf\\uaa00-\\uaa28\\uaa40-\\uaa42\\uaa44-\\uaa4b\\uaa60-\\uaa76\\uaa7a\\uaa80-\\uaaaf\\uaab1\\uaab5\\uaab6\\uaab9-\\uaabd\\uaac0\\uaac2\\uaadb-\\uaadd\\uaae0-\\uaaea\\uaaf2-\\uaaf4\\uab01-\\uab06\\uab09-\\uab0e\\uab11-\\uab16\\uab20-\\uab26\\uab28-\\uab2e\\uabc0-\\uabe2\\uac00-\\ud7a3\\ud7b0-\\ud7c6\\ud7cb-\\ud7fb\\uf900-\\ufa6d\\ufa70-\\ufad9\\ufb00-\\ufb06\\ufb13-\\ufb17\\ufb1d\\ufb1f-\\ufb28\\ufb2a-\\ufb36\\ufb38-\\ufb3c\\ufb3e\\ufb40\\ufb41\\ufb43\\ufb44\\ufb46-\\ufbb1\\ufbd3-\\ufd3d\\ufd50-\\ufd8f\\ufd92-\\ufdc7\\ufdf0-\\ufdfb\\ufe70-\\ufe74\\ufe76-\\ufefc\\uff21-\\uff3a\\uff41-\\uff5a\\uff66-\\uffbe\\uffc2-\\uffc7\\uffca-\\uffcf\\uffd2-\\uffd7\\uffda-\\uffdc]'),\n        NonAsciiIdentifierPart: new RegExp('[\\xaa\\xb5\\xba\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02c1\\u02c6-\\u02d1\\u02e0-\\u02e4\\u02ec\\u02ee\\u0300-\\u0374\\u0376\\u0377\\u037a-\\u037d\\u0386\\u0388-\\u038a\\u038c\\u038e-\\u03a1\\u03a3-\\u03f5\\u03f7-\\u0481\\u0483-\\u0487\\u048a-\\u0527\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u0591-\\u05bd\\u05bf\\u05c1\\u05c2\\u05c4\\u05c5\\u05c7\\u05d0-\\u05ea\\u05f0-\\u05f2\\u0610-\\u061a\\u0620-\\u0669\\u066e-\\u06d3\\u06d5-\\u06dc\\u06df-\\u06e8\\u06ea-\\u06fc\\u06ff\\u0710-\\u074a\\u074d-\\u07b1\\u07c0-\\u07f5\\u07fa\\u0800-\\u082d\\u0840-\\u085b\\u08a0\\u08a2-\\u08ac\\u08e4-\\u08fe\\u0900-\\u0963\\u0966-\\u096f\\u0971-\\u0977\\u0979-\\u097f\\u0981-\\u0983\\u0985-\\u098c\\u098f\\u0990\\u0993-\\u09a8\\u09aa-\\u09b0\\u09b2\\u09b6-\\u09b9\\u09bc-\\u09c4\\u09c7\\u09c8\\u09cb-\\u09ce\\u09d7\\u09dc\\u09dd\\u09df-\\u09e3\\u09e6-\\u09f1\\u0a01-\\u0a03\\u0a05-\\u0a0a\\u0a0f\\u0a10\\u0a13-\\u0a28\\u0a2a-\\u0a30\\u0a32\\u0a33\\u0a35\\u0a36\\u0a38\\u0a39\\u0a3c\\u0a3e-\\u0a42\\u0a47\\u0a48\\u0a4b-\\u0a4d\\u0a51\\u0a59-\\u0a5c\\u0a5e\\u0a66-\\u0a75\\u0a81-\\u0a83\\u0a85-\\u0a8d\\u0a8f-\\u0a91\\u0a93-\\u0aa8\\u0aaa-\\u0ab0\\u0ab2\\u0ab3\\u0ab5-\\u0ab9\\u0abc-\\u0ac5\\u0ac7-\\u0ac9\\u0acb-\\u0acd\\u0ad0\\u0ae0-\\u0ae3\\u0ae6-\\u0aef\\u0b01-\\u0b03\\u0b05-\\u0b0c\\u0b0f\\u0b10\\u0b13-\\u0b28\\u0b2a-\\u0b30\\u0b32\\u0b33\\u0b35-\\u0b39\\u0b3c-\\u0b44\\u0b47\\u0b48\\u0b4b-\\u0b4d\\u0b56\\u0b57\\u0b5c\\u0b5d\\u0b5f-\\u0b63\\u0b66-\\u0b6f\\u0b71\\u0b82\\u0b83\\u0b85-\\u0b8a\\u0b8e-\\u0b90\\u0b92-\\u0b95\\u0b99\\u0b9a\\u0b9c\\u0b9e\\u0b9f\\u0ba3\\u0ba4\\u0ba8-\\u0baa\\u0bae-\\u0bb9\\u0bbe-\\u0bc2\\u0bc6-\\u0bc8\\u0bca-\\u0bcd\\u0bd0\\u0bd7\\u0be6-\\u0bef\\u0c01-\\u0c03\\u0c05-\\u0c0c\\u0c0e-\\u0c10\\u0c12-\\u0c28\\u0c2a-\\u0c33\\u0c35-\\u0c39\\u0c3d-\\u0c44\\u0c46-\\u0c48\\u0c4a-\\u0c4d\\u0c55\\u0c56\\u0c58\\u0c59\\u0c60-\\u0c63\\u0c66-\\u0c6f\\u0c82\\u0c83\\u0c85-\\u0c8c\\u0c8e-\\u0c90\\u0c92-\\u0ca8\\u0caa-\\u0cb3\\u0cb5-\\u0cb9\\u0cbc-\\u0cc4\\u0cc6-\\u0cc8\\u0cca-\\u0ccd\\u0cd5\\u0cd6\\u0cde\\u0ce0-\\u0ce3\\u0ce6-\\u0cef\\u0cf1\\u0cf2\\u0d02\\u0d03\\u0d05-\\u0d0c\\u0d0e-\\u0d10\\u0d12-\\u0d3a\\u0d3d-\\u0d44\\u0d46-\\u0d48\\u0d4a-\\u0d4e\\u0d57\\u0d60-\\u0d63\\u0d66-\\u0d6f\\u0d7a-\\u0d7f\\u0d82\\u0d83\\u0d85-\\u0d96\\u0d9a-\\u0db1\\u0db3-\\u0dbb\\u0dbd\\u0dc0-\\u0dc6\\u0dca\\u0dcf-\\u0dd4\\u0dd6\\u0dd8-\\u0ddf\\u0df2\\u0df3\\u0e01-\\u0e3a\\u0e40-\\u0e4e\\u0e50-\\u0e59\\u0e81\\u0e82\\u0e84\\u0e87\\u0e88\\u0e8a\\u0e8d\\u0e94-\\u0e97\\u0e99-\\u0e9f\\u0ea1-\\u0ea3\\u0ea5\\u0ea7\\u0eaa\\u0eab\\u0ead-\\u0eb9\\u0ebb-\\u0ebd\\u0ec0-\\u0ec4\\u0ec6\\u0ec8-\\u0ecd\\u0ed0-\\u0ed9\\u0edc-\\u0edf\\u0f00\\u0f18\\u0f19\\u0f20-\\u0f29\\u0f35\\u0f37\\u0f39\\u0f3e-\\u0f47\\u0f49-\\u0f6c\\u0f71-\\u0f84\\u0f86-\\u0f97\\u0f99-\\u0fbc\\u0fc6\\u1000-\\u1049\\u1050-\\u109d\\u10a0-\\u10c5\\u10c7\\u10cd\\u10d0-\\u10fa\\u10fc-\\u1248\\u124a-\\u124d\\u1250-\\u1256\\u1258\\u125a-\\u125d\\u1260-\\u1288\\u128a-\\u128d\\u1290-\\u12b0\\u12b2-\\u12b5\\u12b8-\\u12be\\u12c0\\u12c2-\\u12c5\\u12c8-\\u12d6\\u12d8-\\u1310\\u1312-\\u1315\\u1318-\\u135a\\u135d-\\u135f\\u1380-\\u138f\\u13a0-\\u13f4\\u1401-\\u166c\\u166f-\\u167f\\u1681-\\u169a\\u16a0-\\u16ea\\u16ee-\\u16f0\\u1700-\\u170c\\u170e-\\u1714\\u1720-\\u1734\\u1740-\\u1753\\u1760-\\u176c\\u176e-\\u1770\\u1772\\u1773\\u1780-\\u17d3\\u17d7\\u17dc\\u17dd\\u17e0-\\u17e9\\u180b-\\u180d\\u1810-\\u1819\\u1820-\\u1877\\u1880-\\u18aa\\u18b0-\\u18f5\\u1900-\\u191c\\u1920-\\u192b\\u1930-\\u193b\\u1946-\\u196d\\u1970-\\u1974\\u1980-\\u19ab\\u19b0-\\u19c9\\u19d0-\\u19d9\\u1a00-\\u1a1b\\u1a20-\\u1a5e\\u1a60-\\u1a7c\\u1a7f-\\u1a89\\u1a90-\\u1a99\\u1aa7\\u1b00-\\u1b4b\\u1b50-\\u1b59\\u1b6b-\\u1b73\\u1b80-\\u1bf3\\u1c00-\\u1c37\\u1c40-\\u1c49\\u1c4d-\\u1c7d\\u1cd0-\\u1cd2\\u1cd4-\\u1cf6\\u1d00-\\u1de6\\u1dfc-\\u1f15\\u1f18-\\u1f1d\\u1f20-\\u1f45\\u1f48-\\u1f4d\\u1f50-\\u1f57\\u1f59\\u1f5b\\u1f5d\\u1f5f-\\u1f7d\\u1f80-\\u1fb4\\u1fb6-\\u1fbc\\u1fbe\\u1fc2-\\u1fc4\\u1fc6-\\u1fcc\\u1fd0-\\u1fd3\\u1fd6-\\u1fdb\\u1fe0-\\u1fec\\u1ff2-\\u1ff4\\u1ff6-\\u1ffc\\u200c\\u200d\\u203f\\u2040\\u2054\\u2071\\u207f\\u2090-\\u209c\\u20d0-\\u20dc\\u20e1\\u20e5-\\u20f0\\u2102\\u2107\\u210a-\\u2113\\u2115\\u2119-\\u211d\\u2124\\u2126\\u2128\\u212a-\\u212d\\u212f-\\u2139\\u213c-\\u213f\\u2145-\\u2149\\u214e\\u2160-\\u2188\\u2c00-\\u2c2e\\u2c30-\\u2c5e\\u2c60-\\u2ce4\\u2ceb-\\u2cf3\\u2d00-\\u2d25\\u2d27\\u2d2d\\u2d30-\\u2d67\\u2d6f\\u2d7f-\\u2d96\\u2da0-\\u2da6\\u2da8-\\u2dae\\u2db0-\\u2db6\\u2db8-\\u2dbe\\u2dc0-\\u2dc6\\u2dc8-\\u2dce\\u2dd0-\\u2dd6\\u2dd8-\\u2dde\\u2de0-\\u2dff\\u2e2f\\u3005-\\u3007\\u3021-\\u302f\\u3031-\\u3035\\u3038-\\u303c\\u3041-\\u3096\\u3099\\u309a\\u309d-\\u309f\\u30a1-\\u30fa\\u30fc-\\u30ff\\u3105-\\u312d\\u3131-\\u318e\\u31a0-\\u31ba\\u31f0-\\u31ff\\u3400-\\u4db5\\u4e00-\\u9fcc\\ua000-\\ua48c\\ua4d0-\\ua4fd\\ua500-\\ua60c\\ua610-\\ua62b\\ua640-\\ua66f\\ua674-\\ua67d\\ua67f-\\ua697\\ua69f-\\ua6f1\\ua717-\\ua71f\\ua722-\\ua788\\ua78b-\\ua78e\\ua790-\\ua793\\ua7a0-\\ua7aa\\ua7f8-\\ua827\\ua840-\\ua873\\ua880-\\ua8c4\\ua8d0-\\ua8d9\\ua8e0-\\ua8f7\\ua8fb\\ua900-\\ua92d\\ua930-\\ua953\\ua960-\\ua97c\\ua980-\\ua9c0\\ua9cf-\\ua9d9\\uaa00-\\uaa36\\uaa40-\\uaa4d\\uaa50-\\uaa59\\uaa60-\\uaa76\\uaa7a\\uaa7b\\uaa80-\\uaac2\\uaadb-\\uaadd\\uaae0-\\uaaef\\uaaf2-\\uaaf6\\uab01-\\uab06\\uab09-\\uab0e\\uab11-\\uab16\\uab20-\\uab26\\uab28-\\uab2e\\uabc0-\\uabea\\uabec\\uabed\\uabf0-\\uabf9\\uac00-\\ud7a3\\ud7b0-\\ud7c6\\ud7cb-\\ud7fb\\uf900-\\ufa6d\\ufa70-\\ufad9\\ufb00-\\ufb06\\ufb13-\\ufb17\\ufb1d-\\ufb28\\ufb2a-\\ufb36\\ufb38-\\ufb3c\\ufb3e\\ufb40\\ufb41\\ufb43\\ufb44\\ufb46-\\ufbb1\\ufbd3-\\ufd3d\\ufd50-\\ufd8f\\ufd92-\\ufdc7\\ufdf0-\\ufdfb\\ufe00-\\ufe0f\\ufe20-\\ufe26\\ufe33\\ufe34\\ufe4d-\\ufe4f\\ufe70-\\ufe74\\ufe76-\\ufefc\\uff10-\\uff19\\uff21-\\uff3a\\uff3f\\uff41-\\uff5a\\uff66-\\uffbe\\uffc2-\\uffc7\\uffca-\\uffcf\\uffd2-\\uffd7\\uffda-\\uffdc]')\n    };\n\n    // Ensure the condition is true, otherwise throw an error.\n    // This is only to have a better contract semantic, i.e. another safety net\n    // to catch a logic error. The condition shall be fulfilled in normal case.\n    // Do NOT use this to enforce a certain condition on any user input.\n\n    function assert(condition, message) {\n        if (!condition) {\n            throw new Error('ASSERT: ' + message);\n        }\n    }\n\n    function sliceSource(from, to) {\n        return source.slice(from, to);\n    }\n\n    if (typeof 'esprima'[0] === 'undefined') {\n        sliceSource = function sliceArraySource(from, to) {\n            return source.slice(from, to).join('');\n        };\n    }\n\n    function isDecimalDigit(ch) {\n        return '0123456789'.indexOf(ch) >= 0;\n    }\n\n    function isHexDigit(ch) {\n        return '0123456789abcdefABCDEF'.indexOf(ch) >= 0;\n    }\n\n    function isOctalDigit(ch) {\n        return '01234567'.indexOf(ch) >= 0;\n    }\n\n\n    // 7.2 White Space\n\n    function isWhiteSpace(ch) {\n        return (ch === ' ') || (ch === '\\u0009') || (ch === '\\u000B') ||\n            (ch === '\\u000C') || (ch === '\\u00A0') ||\n            (ch.charCodeAt(0) >= 0x1680 &&\n             '\\u1680\\u180E\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200A\\u202F\\u205F\\u3000\\uFEFF'.indexOf(ch) >= 0);\n    }\n\n    // 7.3 Line Terminators\n\n    function isLineTerminator(ch) {\n        return (ch === '\\n' || ch === '\\r' || ch === '\\u2028' || ch === '\\u2029');\n    }\n\n    // 7.6 Identifier Names and Identifiers\n\n    function isIdentifierStart(ch) {\n        return (ch === '$') || (ch === '_') || (ch === '\\\\') ||\n            (ch >= 'a' && ch <= 'z') || (ch >= 'A' && ch <= 'Z') ||\n            ((ch.charCodeAt(0) >= 0x80) && Regex.NonAsciiIdentifierStart.test(ch));\n    }\n\n    function isIdentifierPart(ch) {\n        return (ch === '$') || (ch === '_') || (ch === '\\\\') ||\n            (ch >= 'a' && ch <= 'z') || (ch >= 'A' && ch <= 'Z') ||\n            ((ch >= '0') && (ch <= '9')) ||\n            ((ch.charCodeAt(0) >= 0x80) && Regex.NonAsciiIdentifierPart.test(ch));\n    }\n\n    // 7.6.1.2 Future Reserved Words\n\n    function isFutureReservedWord(id) {\n        switch (id) {\n\n        // Future reserved words.\n        case 'class':\n        case 'enum':\n        case 'export':\n        case 'extends':\n        case 'import':\n        case 'super':\n            return true;\n        }\n\n        return false;\n    }\n\n    function isStrictModeReservedWord(id) {\n        switch (id) {\n\n        // Strict Mode reserved words.\n        case 'implements':\n        case 'interface':\n        case 'package':\n        case 'private':\n        case 'protected':\n        case 'public':\n        case 'static':\n        case 'yield':\n        case 'let':\n            return true;\n        }\n\n        return false;\n    }\n\n    function isRestrictedWord(id) {\n        return id === 'eval' || id === 'arguments';\n    }\n\n    // 7.6.1.1 Keywords\n\n    function isKeyword(id) {\n        var keyword = false;\n        switch (id.length) {\n        case 2:\n            keyword = (id === 'if') || (id === 'in') || (id === 'do');\n            break;\n        case 3:\n            keyword = (id === 'var') || (id === 'for') || (id === 'new') || (id === 'try');\n            break;\n        case 4:\n            keyword = (id === 'this') || (id === 'else') || (id === 'case') || (id === 'void') || (id === 'with');\n            break;\n        case 5:\n            keyword = (id === 'while') || (id === 'break') || (id === 'catch') || (id === 'throw');\n            break;\n        case 6:\n            keyword = (id === 'return') || (id === 'typeof') || (id === 'delete') || (id === 'switch');\n            break;\n        case 7:\n            keyword = (id === 'default') || (id === 'finally');\n            break;\n        case 8:\n            keyword = (id === 'function') || (id === 'continue') || (id === 'debugger');\n            break;\n        case 10:\n            keyword = (id === 'instanceof');\n            break;\n        }\n\n        if (keyword) {\n            return true;\n        }\n\n        switch (id) {\n        // Future reserved words.\n        // 'const' is specialized as Keyword in V8.\n        case 'const':\n            return true;\n\n        // For compatiblity to SpiderMonkey and ES.next\n        case 'yield':\n        case 'let':\n            return true;\n        }\n\n        if (strict && isStrictModeReservedWord(id)) {\n            return true;\n        }\n\n        return isFutureReservedWord(id);\n    }\n\n    // 7.4 Comments\n\n    function skipComment() {\n        var ch, blockComment, lineComment;\n\n        blockComment = false;\n        lineComment = false;\n\n        while (index < length) {\n            ch = source[index];\n\n            if (lineComment) {\n                ch = source[index++];\n                if (isLineTerminator(ch)) {\n                    lineComment = false;\n                    if (ch === '\\r' && source[index] === '\\n') {\n                        ++index;\n                    }\n                    ++lineNumber;\n                    lineStart = index;\n                }\n            } else if (blockComment) {\n                if (isLineTerminator(ch)) {\n                    if (ch === '\\r' && source[index + 1] === '\\n') {\n                        ++index;\n                    }\n                    ++lineNumber;\n                    ++index;\n                    lineStart = index;\n                    if (index >= length) {\n                        throwError({}, Messages.UnexpectedToken, 'ILLEGAL');\n                    }\n                } else {\n                    ch = source[index++];\n                    if (index >= length) {\n                        throwError({}, Messages.UnexpectedToken, 'ILLEGAL');\n                    }\n                    if (ch === '*') {\n                        ch = source[index];\n                        if (ch === '/') {\n                            ++index;\n                            blockComment = false;\n                        }\n                    }\n                }\n            } else if (ch === '/') {\n                ch = source[index + 1];\n                if (ch === '/') {\n                    index += 2;\n                    lineComment = true;\n                } else if (ch === '*') {\n                    index += 2;\n                    blockComment = true;\n                    if (index >= length) {\n                        throwError({}, Messages.UnexpectedToken, 'ILLEGAL');\n                    }\n                } else {\n                    break;\n                }\n            } else if (isWhiteSpace(ch)) {\n                ++index;\n            } else if (isLineTerminator(ch)) {\n                ++index;\n                if (ch ===  '\\r' && source[index] === '\\n') {\n                    ++index;\n                }\n                ++lineNumber;\n                lineStart = index;\n            } else {\n                break;\n            }\n        }\n    }\n\n    function scanHexEscape(prefix) {\n        var i, len, ch, code = 0;\n\n        len = (prefix === 'u') ? 4 : 2;\n        for (i = 0; i < len; ++i) {\n            if (index < length && isHexDigit(source[index])) {\n                ch = source[index++];\n                code = code * 16 + '0123456789abcdef'.indexOf(ch.toLowerCase());\n            } else {\n                return '';\n            }\n        }\n        return String.fromCharCode(code);\n    }\n\n    function scanIdentifier() {\n        var ch, start, id, restore;\n\n        ch = source[index];\n        if (!isIdentifierStart(ch)) {\n            return;\n        }\n\n        start = index;\n        if (ch === '\\\\') {\n            ++index;\n            if (source[index] !== 'u') {\n                return;\n            }\n            ++index;\n            restore = index;\n            ch = scanHexEscape('u');\n            if (ch) {\n                if (ch === '\\\\' || !isIdentifierStart(ch)) {\n                    return;\n                }\n                id = ch;\n            } else {\n                index = restore;\n                id = 'u';\n            }\n        } else {\n            id = source[index++];\n        }\n\n        while (index < length) {\n            ch = source[index];\n            if (!isIdentifierPart(ch)) {\n                break;\n            }\n            if (ch === '\\\\') {\n                ++index;\n                if (source[index] !== 'u') {\n                    return;\n                }\n                ++index;\n                restore = index;\n                ch = scanHexEscape('u');\n                if (ch) {\n                    if (ch === '\\\\' || !isIdentifierPart(ch)) {\n                        return;\n                    }\n                    id += ch;\n                } else {\n                    index = restore;\n                    id += 'u';\n                }\n            } else {\n                id += source[index++];\n            }\n        }\n\n        // There is no keyword or literal with only one character.\n        // Thus, it must be an identifier.\n        if (id.length === 1) {\n            return {\n                type: Token.Identifier,\n                value: id,\n                lineNumber: lineNumber,\n                lineStart: lineStart,\n                range: [start, index]\n            };\n        }\n\n        if (isKeyword(id)) {\n            return {\n                type: Token.Keyword,\n                value: id,\n                lineNumber: lineNumber,\n                lineStart: lineStart,\n                range: [start, index]\n            };\n        }\n\n        // 7.8.1 Null Literals\n\n        if (id === 'null') {\n            return {\n                type: Token.NullLiteral,\n                value: id,\n                lineNumber: lineNumber,\n                lineStart: lineStart,\n                range: [start, index]\n            };\n        }\n\n        // 7.8.2 Boolean Literals\n\n        if (id === 'true' || id === 'false') {\n            return {\n                type: Token.BooleanLiteral,\n                value: id,\n                lineNumber: lineNumber,\n                lineStart: lineStart,\n                range: [start, index]\n            };\n        }\n\n        return {\n            type: Token.Identifier,\n            value: id,\n            lineNumber: lineNumber,\n            lineStart: lineStart,\n            range: [start, index]\n        };\n    }\n\n    // 7.7 Punctuators\n\n    function scanPunctuator() {\n        var start = index,\n            ch1 = source[index],\n            ch2,\n            ch3,\n            ch4;\n\n        // Check for most common single-character punctuators.\n\n        if (ch1 === ';' || ch1 === '{' || ch1 === '}') {\n            ++index;\n            return {\n                type: Token.Punctuator,\n                value: ch1,\n                lineNumber: lineNumber,\n                lineStart: lineStart,\n                range: [start, index]\n            };\n        }\n\n        if (ch1 === ',' || ch1 === '(' || ch1 === ')') {\n            ++index;\n            return {\n                type: Token.Punctuator,\n                value: ch1,\n                lineNumber: lineNumber,\n                lineStart: lineStart,\n                range: [start, index]\n            };\n        }\n\n        // Dot (.) can also start a floating-point number, hence the need\n        // to check the next character.\n\n        ch2 = source[index + 1];\n        if (ch1 === '.' && !isDecimalDigit(ch2)) {\n            return {\n                type: Token.Punctuator,\n                value: source[index++],\n                lineNumber: lineNumber,\n                lineStart: lineStart,\n                range: [start, index]\n            };\n        }\n\n        // Peek more characters.\n\n        ch3 = source[index + 2];\n        ch4 = source[index + 3];\n\n        // 4-character punctuator: >>>=\n\n        if (ch1 === '>' && ch2 === '>' && ch3 === '>') {\n            if (ch4 === '=') {\n                index += 4;\n                return {\n                    type: Token.Punctuator,\n                    value: '>>>=',\n                    lineNumber: lineNumber,\n                    lineStart: lineStart,\n                    range: [start, index]\n                };\n            }\n        }\n\n        // 3-character punctuators: === !== >>> <<= >>=\n\n        if (ch1 === '=' && ch2 === '=' && ch3 === '=') {\n            index += 3;\n            return {\n                type: Token.Punctuator,\n                value: '===',\n                lineNumber: lineNumber,\n                lineStart: lineStart,\n                range: [start, index]\n            };\n        }\n\n        if (ch1 === '!' && ch2 === '=' && ch3 === '=') {\n            index += 3;\n            return {\n                type: Token.Punctuator,\n                value: '!==',\n                lineNumber: lineNumber,\n                lineStart: lineStart,\n                range: [start, index]\n            };\n        }\n\n        if (ch1 === '>' && ch2 === '>' && ch3 === '>') {\n            index += 3;\n            return {\n                type: Token.Punctuator,\n                value: '>>>',\n                lineNumber: lineNumber,\n                lineStart: lineStart,\n                range: [start, index]\n            };\n        }\n\n        if (ch1 === '<' && ch2 === '<' && ch3 === '=') {\n            index += 3;\n            return {\n                type: Token.Punctuator,\n                value: '<<=',\n                lineNumber: lineNumber,\n                lineStart: lineStart,\n                range: [start, index]\n            };\n        }\n\n        if (ch1 === '>' && ch2 === '>' && ch3 === '=') {\n            index += 3;\n            return {\n                type: Token.Punctuator,\n                value: '>>=',\n                lineNumber: lineNumber,\n                lineStart: lineStart,\n                range: [start, index]\n            };\n        }\n\n        // 2-character punctuators: <= >= == != ++ -- << >> && ||\n        // += -= *= %= &= |= ^= /=\n\n        if (ch2 === '=') {\n            if ('<>=!+-*%&|^/'.indexOf(ch1) >= 0) {\n                index += 2;\n                return {\n                    type: Token.Punctuator,\n                    value: ch1 + ch2,\n                    lineNumber: lineNumber,\n                    lineStart: lineStart,\n                    range: [start, index]\n                };\n            }\n        }\n\n        if (ch1 === ch2 && ('+-<>&|'.indexOf(ch1) >= 0)) {\n            if ('+-<>&|'.indexOf(ch2) >= 0) {\n                index += 2;\n                return {\n                    type: Token.Punctuator,\n                    value: ch1 + ch2,\n                    lineNumber: lineNumber,\n                    lineStart: lineStart,\n                    range: [start, index]\n                };\n            }\n        }\n\n        // The remaining 1-character punctuators.\n\n        if ('[]<>+-*%&|^!~?:=/'.indexOf(ch1) >= 0) {\n            return {\n                type: Token.Punctuator,\n                value: source[index++],\n                lineNumber: lineNumber,\n                lineStart: lineStart,\n                range: [start, index]\n            };\n        }\n    }\n\n    // 7.8.3 Numeric Literals\n\n    function scanNumericLiteral() {\n        var number, start, ch;\n\n        ch = source[index];\n        assert(isDecimalDigit(ch) || (ch === '.'),\n            'Numeric literal must start with a decimal digit or a decimal point');\n\n        start = index;\n        number = '';\n        if (ch !== '.') {\n            number = source[index++];\n            ch = source[index];\n\n            // Hex number starts with '0x'.\n            // Octal number starts with '0'.\n            if (number === '0') {\n                if (ch === 'x' || ch === 'X') {\n                    number += source[index++];\n                    while (index < length) {\n                        ch = source[index];\n                        if (!isHexDigit(ch)) {\n                            break;\n                        }\n                        number += source[index++];\n                    }\n\n                    if (number.length <= 2) {\n                        // only 0x\n                        throwError({}, Messages.UnexpectedToken, 'ILLEGAL');\n                    }\n\n                    if (index < length) {\n                        ch = source[index];\n                        if (isIdentifierStart(ch)) {\n                            throwError({}, Messages.UnexpectedToken, 'ILLEGAL');\n                        }\n                    }\n                    return {\n                        type: Token.NumericLiteral,\n                        value: parseInt(number, 16),\n                        lineNumber: lineNumber,\n                        lineStart: lineStart,\n                        range: [start, index]\n                    };\n                } else if (isOctalDigit(ch)) {\n                    number += source[index++];\n                    while (index < length) {\n                        ch = source[index];\n                        if (!isOctalDigit(ch)) {\n                            break;\n                        }\n                        number += source[index++];\n                    }\n\n                    if (index < length) {\n                        ch = source[index];\n                        if (isIdentifierStart(ch) || isDecimalDigit(ch)) {\n                            throwError({}, Messages.UnexpectedToken, 'ILLEGAL');\n                        }\n                    }\n                    return {\n                        type: Token.NumericLiteral,\n                        value: parseInt(number, 8),\n                        octal: true,\n                        lineNumber: lineNumber,\n                        lineStart: lineStart,\n                        range: [start, index]\n                    };\n                }\n\n                // decimal number starts with '0' such as '09' is illegal.\n                if (isDecimalDigit(ch)) {\n                    throwError({}, Messages.UnexpectedToken, 'ILLEGAL');\n                }\n            }\n\n            while (index < length) {\n                ch = source[index];\n                if (!isDecimalDigit(ch)) {\n                    break;\n                }\n                number += source[index++];\n            }\n        }\n\n        if (ch === '.') {\n            number += source[index++];\n            while (index < length) {\n                ch = source[index];\n                if (!isDecimalDigit(ch)) {\n                    break;\n                }\n                number += source[index++];\n            }\n        }\n\n        if (ch === 'e' || ch === 'E') {\n            number += source[index++];\n\n            ch = source[index];\n            if (ch === '+' || ch === '-') {\n                number += source[index++];\n            }\n\n            ch = source[index];\n            if (isDecimalDigit(ch)) {\n                number += source[index++];\n                while (index < length) {\n                    ch = source[index];\n                    if (!isDecimalDigit(ch)) {\n                        break;\n                    }\n                    number += source[index++];\n                }\n            } else {\n                ch = 'character ' + ch;\n                if (index >= length) {\n                    ch = '<end>';\n                }\n                throwError({}, Messages.UnexpectedToken, 'ILLEGAL');\n            }\n        }\n\n        if (index < length) {\n            ch = source[index];\n            if (isIdentifierStart(ch)) {\n                throwError({}, Messages.UnexpectedToken, 'ILLEGAL');\n            }\n        }\n\n        return {\n            type: Token.NumericLiteral,\n            value: parseFloat(number),\n            lineNumber: lineNumber,\n            lineStart: lineStart,\n            range: [start, index]\n        };\n    }\n\n    // 7.8.4 String Literals\n\n    function scanStringLiteral() {\n        var str = '', quote, start, ch, code, unescaped, restore, octal = false;\n\n        quote = source[index];\n        assert((quote === '\\'' || quote === '\"'),\n            'String literal must starts with a quote');\n\n        start = index;\n        ++index;\n\n        while (index < length) {\n            ch = source[index++];\n\n            if (ch === quote) {\n                quote = '';\n                break;\n            } else if (ch === '\\\\') {\n                ch = source[index++];\n                if (!isLineTerminator(ch)) {\n                    switch (ch) {\n                    case 'n':\n                        str += '\\n';\n                        break;\n                    case 'r':\n                        str += '\\r';\n                        break;\n                    case 't':\n                        str += '\\t';\n                        break;\n                    case 'u':\n                    case 'x':\n                        restore = index;\n                        unescaped = scanHexEscape(ch);\n                        if (unescaped) {\n                            str += unescaped;\n                        } else {\n                            index = restore;\n                            str += ch;\n                        }\n                        break;\n                    case 'b':\n                        str += '\\b';\n                        break;\n                    case 'f':\n                        str += '\\f';\n                        break;\n                    case 'v':\n                        str += '\\x0B';\n                        break;\n\n                    default:\n                        if (isOctalDigit(ch)) {\n                            code = '01234567'.indexOf(ch);\n\n                            // \\0 is not octal escape sequence\n                            if (code !== 0) {\n                                octal = true;\n                            }\n\n                            if (index < length && isOctalDigit(source[index])) {\n                                octal = true;\n                                code = code * 8 + '01234567'.indexOf(source[index++]);\n\n                                // 3 digits are only allowed when string starts\n                                // with 0, 1, 2, 3\n                                if ('0123'.indexOf(ch) >= 0 &&\n                                        index < length &&\n                                        isOctalDigit(source[index])) {\n                                    code = code * 8 + '01234567'.indexOf(source[index++]);\n                                }\n                            }\n                            str += String.fromCharCode(code);\n                        } else {\n                            str += ch;\n                        }\n                        break;\n                    }\n                } else {\n                    ++lineNumber;\n                    if (ch ===  '\\r' && source[index] === '\\n') {\n                        ++index;\n                    }\n                }\n            } else if (isLineTerminator(ch)) {\n                break;\n            } else {\n                str += ch;\n            }\n        }\n\n        if (quote !== '') {\n            throwError({}, Messages.UnexpectedToken, 'ILLEGAL');\n        }\n\n        return {\n            type: Token.StringLiteral,\n            value: str,\n            octal: octal,\n            lineNumber: lineNumber,\n            lineStart: lineStart,\n            range: [start, index]\n        };\n    }\n\n    function scanRegExp() {\n        var str, ch, start, pattern, flags, value, classMarker = false, restore, terminated = false;\n\n        buffer = null;\n        skipComment();\n\n        start = index;\n        ch = source[index];\n        assert(ch === '/', 'Regular expression literal must start with a slash');\n        str = source[index++];\n\n        while (index < length) {\n            ch = source[index++];\n            str += ch;\n            if (ch === '\\\\') {\n                ch = source[index++];\n                // ECMA-262 7.8.5\n                if (isLineTerminator(ch)) {\n                    throwError({}, Messages.UnterminatedRegExp);\n                }\n                str += ch;\n            } else if (classMarker) {\n                if (ch === ']') {\n                    classMarker = false;\n                }\n            } else {\n                if (ch === '/') {\n                    terminated = true;\n                    break;\n                } else if (ch === '[') {\n                    classMarker = true;\n                } else if (isLineTerminator(ch)) {\n                    throwError({}, Messages.UnterminatedRegExp);\n                }\n            }\n        }\n\n        if (!terminated) {\n            throwError({}, Messages.UnterminatedRegExp);\n        }\n\n        // Exclude leading and trailing slash.\n        pattern = str.substr(1, str.length - 2);\n\n        flags = '';\n        while (index < length) {\n            ch = source[index];\n            if (!isIdentifierPart(ch)) {\n                break;\n            }\n\n            ++index;\n            if (ch === '\\\\' && index < length) {\n                ch = source[index];\n                if (ch === 'u') {\n                    ++index;\n                    restore = index;\n                    ch = scanHexEscape('u');\n                    if (ch) {\n                        flags += ch;\n                        str += '\\\\u';\n                        for (; restore < index; ++restore) {\n                            str += source[restore];\n                        }\n                    } else {\n                        index = restore;\n                        flags += 'u';\n                        str += '\\\\u';\n                    }\n                } else {\n                    str += '\\\\';\n                }\n            } else {\n                flags += ch;\n                str += ch;\n            }\n        }\n\n        try {\n            value = new RegExp(pattern, flags);\n        } catch (e) {\n            throwError({}, Messages.InvalidRegExp);\n        }\n\n        return {\n            literal: str,\n            value: value,\n            range: [start, index]\n        };\n    }\n\n    function isIdentifierName(token) {\n        return token.type === Token.Identifier ||\n            token.type === Token.Keyword ||\n            token.type === Token.BooleanLiteral ||\n            token.type === Token.NullLiteral;\n    }\n\n    function advance() {\n        var ch, token;\n\n        skipComment();\n\n        if (index >= length) {\n            return {\n                type: Token.EOF,\n                lineNumber: lineNumber,\n                lineStart: lineStart,\n                range: [index, index]\n            };\n        }\n\n        token = scanPunctuator();\n        if (typeof token !== 'undefined') {\n            return token;\n        }\n\n        ch = source[index];\n\n        if (ch === '\\'' || ch === '\"') {\n            return scanStringLiteral();\n        }\n\n        if (ch === '.' || isDecimalDigit(ch)) {\n            return scanNumericLiteral();\n        }\n\n        token = scanIdentifier();\n        if (typeof token !== 'undefined') {\n            return token;\n        }\n\n        throwError({}, Messages.UnexpectedToken, 'ILLEGAL');\n    }\n\n    function lex() {\n        var token;\n\n        if (buffer) {\n            index = buffer.range[1];\n            lineNumber = buffer.lineNumber;\n            lineStart = buffer.lineStart;\n            token = buffer;\n            buffer = null;\n            return token;\n        }\n\n        buffer = null;\n        return advance();\n    }\n\n    function lookahead() {\n        var pos, line, start;\n\n        if (buffer !== null) {\n            return buffer;\n        }\n\n        pos = index;\n        line = lineNumber;\n        start = lineStart;\n        buffer = advance();\n        index = pos;\n        lineNumber = line;\n        lineStart = start;\n\n        return buffer;\n    }\n\n    // Return true if there is a line terminator before the next token.\n\n    function peekLineTerminator() {\n        var pos, line, start, found;\n\n        pos = index;\n        line = lineNumber;\n        start = lineStart;\n        skipComment();\n        found = lineNumber !== line;\n        index = pos;\n        lineNumber = line;\n        lineStart = start;\n\n        return found;\n    }\n\n    // Throw an exception\n\n    function throwError(token, messageFormat) {\n        var error,\n            args = Array.prototype.slice.call(arguments, 2),\n            msg = messageFormat.replace(\n                /%(\\d)/g,\n                function (whole, index) {\n                    return args[index] || '';\n                }\n            );\n\n        if (typeof token.lineNumber === 'number') {\n            error = new Error('Line ' + token.lineNumber + ': ' + msg);\n            error.index = token.range[0];\n            error.lineNumber = token.lineNumber;\n            error.column = token.range[0] - lineStart + 1;\n        } else {\n            error = new Error('Line ' + lineNumber + ': ' + msg);\n            error.index = index;\n            error.lineNumber = lineNumber;\n            error.column = index - lineStart + 1;\n        }\n\n        throw error;\n    }\n\n    function throwErrorTolerant() {\n        try {\n            throwError.apply(null, arguments);\n        } catch (e) {\n            if (extra.errors) {\n                extra.errors.push(e);\n            } else {\n                throw e;\n            }\n        }\n    }\n\n\n    // Throw an exception because of the token.\n\n    function throwUnexpected(token) {\n        if (token.type === Token.EOF) {\n            throwError(token, Messages.UnexpectedEOS);\n        }\n\n        if (token.type === Token.NumericLiteral) {\n            throwError(token, Messages.UnexpectedNumber);\n        }\n\n        if (token.type === Token.StringLiteral) {\n            throwError(token, Messages.UnexpectedString);\n        }\n\n        if (token.type === Token.Identifier) {\n            throwError(token, Messages.UnexpectedIdentifier);\n        }\n\n        if (token.type === Token.Keyword) {\n            if (isFutureReservedWord(token.value)) {\n                throwError(token, Messages.UnexpectedReserved);\n            } else if (strict && isStrictModeReservedWord(token.value)) {\n                throwErrorTolerant(token, Messages.StrictReservedWord);\n                return;\n            }\n            throwError(token, Messages.UnexpectedToken, token.value);\n        }\n\n        // BooleanLiteral, NullLiteral, or Punctuator.\n        throwError(token, Messages.UnexpectedToken, token.value);\n    }\n\n    // Expect the next token to match the specified punctuator.\n    // If not, an exception will be thrown.\n\n    function expect(value) {\n        var token = lex();\n        if (token.type !== Token.Punctuator || token.value !== value) {\n            throwUnexpected(token);\n        }\n    }\n\n    // Expect the next token to match the specified keyword.\n    // If not, an exception will be thrown.\n\n    function expectKeyword(keyword) {\n        var token = lex();\n        if (token.type !== Token.Keyword || token.value !== keyword) {\n            throwUnexpected(token);\n        }\n    }\n\n    // Return true if the next token matches the specified punctuator.\n\n    function match(value) {\n        var token = lookahead();\n        return token.type === Token.Punctuator && token.value === value;\n    }\n\n    // Return true if the next token matches the specified keyword\n\n    function matchKeyword(keyword) {\n        var token = lookahead();\n        return token.type === Token.Keyword && token.value === keyword;\n    }\n\n    // Return true if the next token is an assignment operator\n\n    function matchAssign() {\n        var token = lookahead(),\n            op = token.value;\n\n        if (token.type !== Token.Punctuator) {\n            return false;\n        }\n        return op === '=' ||\n            op === '*=' ||\n            op === '/=' ||\n            op === '%=' ||\n            op === '+=' ||\n            op === '-=' ||\n            op === '<<=' ||\n            op === '>>=' ||\n            op === '>>>=' ||\n            op === '&=' ||\n            op === '^=' ||\n            op === '|=';\n    }\n\n    function consumeSemicolon() {\n        var token, line;\n\n        // Catch the very common case first.\n        if (source[index] === ';') {\n            lex();\n            return;\n        }\n\n        line = lineNumber;\n        skipComment();\n        if (lineNumber !== line) {\n            return;\n        }\n\n        if (match(';')) {\n            lex();\n            return;\n        }\n\n        token = lookahead();\n        if (token.type !== Token.EOF && !match('}')) {\n            throwUnexpected(token);\n        }\n    }\n\n    // Return true if provided expression is LeftHandSideExpression\n\n    function isLeftHandSide(expr) {\n        return expr.type === Syntax.Identifier || expr.type === Syntax.MemberExpression;\n    }\n\n    // 11.1.4 Array Initialiser\n\n    function parseArrayInitialiser() {\n        var elements = [];\n\n        expect('[');\n\n        while (!match(']')) {\n            if (match(',')) {\n                lex();\n                elements.push(null);\n            } else {\n                elements.push(parseAssignmentExpression());\n\n                if (!match(']')) {\n                    expect(',');\n                }\n            }\n        }\n\n        expect(']');\n\n        return {\n            type: Syntax.ArrayExpression,\n            elements: elements\n        };\n    }\n\n    // 11.1.5 Object Initialiser\n\n    function parsePropertyFunction(param, first) {\n        var previousStrict, body;\n\n        previousStrict = strict;\n        body = parseFunctionSourceElements();\n        if (first && strict && isRestrictedWord(param[0].name)) {\n            throwErrorTolerant(first, Messages.StrictParamName);\n        }\n        strict = previousStrict;\n\n        return {\n            type: Syntax.FunctionExpression,\n            id: null,\n            params: param,\n            defaults: [],\n            body: body,\n            rest: null,\n            generator: false,\n            expression: false\n        };\n    }\n\n    function parseObjectPropertyKey() {\n        var token = lex();\n\n        // Note: This function is called only from parseObjectProperty(), where\n        // EOF and Punctuator tokens are already filtered out.\n\n        if (token.type === Token.StringLiteral || token.type === Token.NumericLiteral) {\n            if (strict && token.octal) {\n                throwErrorTolerant(token, Messages.StrictOctalLiteral);\n            }\n            return createLiteral(token);\n        }\n\n        return {\n            type: Syntax.Identifier,\n            name: token.value\n        };\n    }\n\n    function parseObjectProperty() {\n        var token, key, id, param;\n\n        token = lookahead();\n\n        if (token.type === Token.Identifier) {\n\n            id = parseObjectPropertyKey();\n\n            // Property Assignment: Getter and Setter.\n\n            if (token.value === 'get' && !match(':')) {\n                key = parseObjectPropertyKey();\n                expect('(');\n                expect(')');\n                return {\n                    type: Syntax.Property,\n                    key: key,\n                    value: parsePropertyFunction([]),\n                    kind: 'get'\n                };\n            } else if (token.value === 'set' && !match(':')) {\n                key = parseObjectPropertyKey();\n                expect('(');\n                token = lookahead();\n                if (token.type !== Token.Identifier) {\n                    expect(')');\n                    throwErrorTolerant(token, Messages.UnexpectedToken, token.value);\n                    return {\n                        type: Syntax.Property,\n                        key: key,\n                        value: parsePropertyFunction([]),\n                        kind: 'set'\n                    };\n                } else {\n                    param = [ parseVariableIdentifier() ];\n                    expect(')');\n                    return {\n                        type: Syntax.Property,\n                        key: key,\n                        value: parsePropertyFunction(param, token),\n                        kind: 'set'\n                    };\n                }\n            } else {\n                expect(':');\n                return {\n                    type: Syntax.Property,\n                    key: id,\n                    value: parseAssignmentExpression(),\n                    kind: 'init'\n                };\n            }\n        } else if (token.type === Token.EOF || token.type === Token.Punctuator) {\n            throwUnexpected(token);\n        } else {\n            key = parseObjectPropertyKey();\n            expect(':');\n            return {\n                type: Syntax.Property,\n                key: key,\n                value: parseAssignmentExpression(),\n                kind: 'init'\n            };\n        }\n    }\n\n    function parseObjectInitialiser() {\n        var properties = [], property, name, kind, map = {}, toString = String;\n\n        expect('{');\n\n        while (!match('}')) {\n            property = parseObjectProperty();\n\n            if (property.key.type === Syntax.Identifier) {\n                name = property.key.name;\n            } else {\n                name = toString(property.key.value);\n            }\n            kind = (property.kind === 'init') ? PropertyKind.Data : (property.kind === 'get') ? PropertyKind.Get : PropertyKind.Set;\n            if (Object.prototype.hasOwnProperty.call(map, name)) {\n                if (map[name] === PropertyKind.Data) {\n                    if (strict && kind === PropertyKind.Data) {\n                        throwErrorTolerant({}, Messages.StrictDuplicateProperty);\n                    } else if (kind !== PropertyKind.Data) {\n                        throwErrorTolerant({}, Messages.AccessorDataProperty);\n                    }\n                } else {\n                    if (kind === PropertyKind.Data) {\n                        throwErrorTolerant({}, Messages.AccessorDataProperty);\n                    } else if (map[name] & kind) {\n                        throwErrorTolerant({}, Messages.AccessorGetSet);\n                    }\n                }\n                map[name] |= kind;\n            } else {\n                map[name] = kind;\n            }\n\n            properties.push(property);\n\n            if (!match('}')) {\n                expect(',');\n            }\n        }\n\n        expect('}');\n\n        return {\n            type: Syntax.ObjectExpression,\n            properties: properties\n        };\n    }\n\n    // 11.1.6 The Grouping Operator\n\n    function parseGroupExpression() {\n        var expr;\n\n        expect('(');\n\n        expr = parseExpression();\n\n        expect(')');\n\n        return expr;\n    }\n\n\n    // 11.1 Primary Expressions\n\n    function parsePrimaryExpression() {\n        var token = lookahead(),\n            type = token.type;\n\n        if (type === Token.Identifier) {\n            return {\n                type: Syntax.Identifier,\n                name: lex().value\n            };\n        }\n\n        if (type === Token.StringLiteral || type === Token.NumericLiteral) {\n            if (strict && token.octal) {\n                throwErrorTolerant(token, Messages.StrictOctalLiteral);\n            }\n            return createLiteral(lex());\n        }\n\n        if (type === Token.Keyword) {\n            if (matchKeyword('this')) {\n                lex();\n                return {\n                    type: Syntax.ThisExpression\n                };\n            }\n\n            if (matchKeyword('function')) {\n                return parseFunctionExpression();\n            }\n        }\n\n        if (type === Token.BooleanLiteral) {\n            lex();\n            token.value = (token.value === 'true');\n            return createLiteral(token);\n        }\n\n        if (type === Token.NullLiteral) {\n            lex();\n            token.value = null;\n            return createLiteral(token);\n        }\n\n        if (match('[')) {\n            return parseArrayInitialiser();\n        }\n\n        if (match('{')) {\n            return parseObjectInitialiser();\n        }\n\n        if (match('(')) {\n            return parseGroupExpression();\n        }\n\n        if (match('/') || match('/=')) {\n            return createLiteral(scanRegExp());\n        }\n\n        return throwUnexpected(lex());\n    }\n\n    // 11.2 Left-Hand-Side Expressions\n\n    function parseArguments() {\n        var args = [];\n\n        expect('(');\n\n        if (!match(')')) {\n            while (index < length) {\n                args.push(parseAssignmentExpression());\n                if (match(')')) {\n                    break;\n                }\n                expect(',');\n            }\n        }\n\n        expect(')');\n\n        return args;\n    }\n\n    function parseNonComputedProperty() {\n        var token = lex();\n\n        if (!isIdentifierName(token)) {\n            throwUnexpected(token);\n        }\n\n        return {\n            type: Syntax.Identifier,\n            name: token.value\n        };\n    }\n\n    function parseNonComputedMember() {\n        expect('.');\n\n        return parseNonComputedProperty();\n    }\n\n    function parseComputedMember() {\n        var expr;\n\n        expect('[');\n\n        expr = parseExpression();\n\n        expect(']');\n\n        return expr;\n    }\n\n    function parseNewExpression() {\n        var expr;\n\n        expectKeyword('new');\n\n        expr = {\n            type: Syntax.NewExpression,\n            callee: parseLeftHandSideExpression(),\n            'arguments': []\n        };\n\n        if (match('(')) {\n            expr['arguments'] = parseArguments();\n        }\n\n        return expr;\n    }\n\n    function parseLeftHandSideExpressionAllowCall() {\n        var expr;\n\n        expr = matchKeyword('new') ? parseNewExpression() : parsePrimaryExpression();\n\n        while (match('.') || match('[') || match('(')) {\n            if (match('(')) {\n                expr = {\n                    type: Syntax.CallExpression,\n                    callee: expr,\n                    'arguments': parseArguments()\n                };\n            } else if (match('[')) {\n                expr = {\n                    type: Syntax.MemberExpression,\n                    computed: true,\n                    object: expr,\n                    property: parseComputedMember()\n                };\n            } else {\n                expr = {\n                    type: Syntax.MemberExpression,\n                    computed: false,\n                    object: expr,\n                    property: parseNonComputedMember()\n                };\n            }\n        }\n\n        return expr;\n    }\n\n\n    function parseLeftHandSideExpression() {\n        var expr;\n\n        expr = matchKeyword('new') ? parseNewExpression() : parsePrimaryExpression();\n\n        while (match('.') || match('[')) {\n            if (match('[')) {\n                expr = {\n                    type: Syntax.MemberExpression,\n                    computed: true,\n                    object: expr,\n                    property: parseComputedMember()\n                };\n            } else {\n                expr = {\n                    type: Syntax.MemberExpression,\n                    computed: false,\n                    object: expr,\n                    property: parseNonComputedMember()\n                };\n            }\n        }\n\n        return expr;\n    }\n\n    // 11.3 Postfix Expressions\n\n    function parsePostfixExpression() {\n        var expr = parseLeftHandSideExpressionAllowCall(), token;\n\n        token = lookahead();\n        if (token.type !== Token.Punctuator) {\n            return expr;\n        }\n\n        if ((match('++') || match('--')) && !peekLineTerminator()) {\n            // 11.3.1, 11.3.2\n            if (strict && expr.type === Syntax.Identifier && isRestrictedWord(expr.name)) {\n                throwErrorTolerant({}, Messages.StrictLHSPostfix);\n            }\n            if (!isLeftHandSide(expr)) {\n                throwErrorTolerant({}, Messages.InvalidLHSInAssignment);\n            }\n\n            expr = {\n                type: Syntax.UpdateExpression,\n                operator: lex().value,\n                argument: expr,\n                prefix: false\n            };\n        }\n\n        return expr;\n    }\n\n    // 11.4 Unary Operators\n\n    function parseUnaryExpression() {\n        var token, expr;\n\n        token = lookahead();\n        if (token.type !== Token.Punctuator && token.type !== Token.Keyword) {\n            return parsePostfixExpression();\n        }\n\n        if (match('++') || match('--')) {\n            token = lex();\n            expr = parseUnaryExpression();\n            // 11.4.4, 11.4.5\n            if (strict && expr.type === Syntax.Identifier && isRestrictedWord(expr.name)) {\n                throwErrorTolerant({}, Messages.StrictLHSPrefix);\n            }\n\n            if (!isLeftHandSide(expr)) {\n                throwErrorTolerant({}, Messages.InvalidLHSInAssignment);\n            }\n\n            expr = {\n                type: Syntax.UpdateExpression,\n                operator: token.value,\n                argument: expr,\n                prefix: true\n            };\n            return expr;\n        }\n\n        if (match('+') || match('-') || match('~') || match('!')) {\n            expr = {\n                type: Syntax.UnaryExpression,\n                operator: lex().value,\n                argument: parseUnaryExpression(),\n                prefix: true\n            };\n            return expr;\n        }\n\n        if (matchKeyword('delete') || matchKeyword('void') || matchKeyword('typeof')) {\n            expr = {\n                type: Syntax.UnaryExpression,\n                operator: lex().value,\n                argument: parseUnaryExpression(),\n                prefix: true\n            };\n            if (strict && expr.operator === 'delete' && expr.argument.type === Syntax.Identifier) {\n                throwErrorTolerant({}, Messages.StrictDelete);\n            }\n            return expr;\n        }\n\n        return parsePostfixExpression();\n    }\n\n    // 11.5 Multiplicative Operators\n\n    function parseMultiplicativeExpression() {\n        var expr = parseUnaryExpression();\n\n        while (match('*') || match('/') || match('%')) {\n            expr = {\n                type: Syntax.BinaryExpression,\n                operator: lex().value,\n                left: expr,\n                right: parseUnaryExpression()\n            };\n        }\n\n        return expr;\n    }\n\n    // 11.6 Additive Operators\n\n    function parseAdditiveExpression() {\n        var expr = parseMultiplicativeExpression();\n\n        while (match('+') || match('-')) {\n            expr = {\n                type: Syntax.BinaryExpression,\n                operator: lex().value,\n                left: expr,\n                right: parseMultiplicativeExpression()\n            };\n        }\n\n        return expr;\n    }\n\n    // 11.7 Bitwise Shift Operators\n\n    function parseShiftExpression() {\n        var expr = parseAdditiveExpression();\n\n        while (match('<<') || match('>>') || match('>>>')) {\n            expr = {\n                type: Syntax.BinaryExpression,\n                operator: lex().value,\n                left: expr,\n                right: parseAdditiveExpression()\n            };\n        }\n\n        return expr;\n    }\n    // 11.8 Relational Operators\n\n    function parseRelationalExpression() {\n        var expr, previousAllowIn;\n\n        previousAllowIn = state.allowIn;\n        state.allowIn = true;\n\n        expr = parseShiftExpression();\n\n        while (match('<') || match('>') || match('<=') || match('>=') || (previousAllowIn && matchKeyword('in')) || matchKeyword('instanceof')) {\n            expr = {\n                type: Syntax.BinaryExpression,\n                operator: lex().value,\n                left: expr,\n                right: parseShiftExpression()\n            };\n        }\n\n        state.allowIn = previousAllowIn;\n        return expr;\n    }\n\n    // 11.9 Equality Operators\n\n    function parseEqualityExpression() {\n        var expr = parseRelationalExpression();\n\n        while (match('==') || match('!=') || match('===') || match('!==')) {\n            expr = {\n                type: Syntax.BinaryExpression,\n                operator: lex().value,\n                left: expr,\n                right: parseRelationalExpression()\n            };\n        }\n\n        return expr;\n    }\n\n    // 11.10 Binary Bitwise Operators\n\n    function parseBitwiseANDExpression() {\n        var expr = parseEqualityExpression();\n\n        while (match('&')) {\n            lex();\n            expr = {\n                type: Syntax.BinaryExpression,\n                operator: '&',\n                left: expr,\n                right: parseEqualityExpression()\n            };\n        }\n\n        return expr;\n    }\n\n    function parseBitwiseXORExpression() {\n        var expr = parseBitwiseANDExpression();\n\n        while (match('^')) {\n            lex();\n            expr = {\n                type: Syntax.BinaryExpression,\n                operator: '^',\n                left: expr,\n                right: parseBitwiseANDExpression()\n            };\n        }\n\n        return expr;\n    }\n\n    function parseBitwiseORExpression() {\n        var expr = parseBitwiseXORExpression();\n\n        while (match('|')) {\n            lex();\n            expr = {\n                type: Syntax.BinaryExpression,\n                operator: '|',\n                left: expr,\n                right: parseBitwiseXORExpression()\n            };\n        }\n\n        return expr;\n    }\n\n    // 11.11 Binary Logical Operators\n\n    function parseLogicalANDExpression() {\n        var expr = parseBitwiseORExpression();\n\n        while (match('&&')) {\n            lex();\n            expr = {\n                type: Syntax.LogicalExpression,\n                operator: '&&',\n                left: expr,\n                right: parseBitwiseORExpression()\n            };\n        }\n\n        return expr;\n    }\n\n    function parseLogicalORExpression() {\n        var expr = parseLogicalANDExpression();\n\n        while (match('||')) {\n            lex();\n            expr = {\n                type: Syntax.LogicalExpression,\n                operator: '||',\n                left: expr,\n                right: parseLogicalANDExpression()\n            };\n        }\n\n        return expr;\n    }\n\n    // 11.12 Conditional Operator\n\n    function parseConditionalExpression() {\n        var expr, previousAllowIn, consequent;\n\n        expr = parseLogicalORExpression();\n\n        if (match('?')) {\n            lex();\n            previousAllowIn = state.allowIn;\n            state.allowIn = true;\n            consequent = parseAssignmentExpression();\n            state.allowIn = previousAllowIn;\n            expect(':');\n\n            expr = {\n                type: Syntax.ConditionalExpression,\n                test: expr,\n                consequent: consequent,\n                alternate: parseAssignmentExpression()\n            };\n        }\n\n        return expr;\n    }\n\n    // 11.13 Assignment Operators\n\n    function parseAssignmentExpression() {\n        var token, expr;\n\n        token = lookahead();\n        expr = parseConditionalExpression();\n\n        if (matchAssign()) {\n            // LeftHandSideExpression\n            if (!isLeftHandSide(expr)) {\n                throwErrorTolerant({}, Messages.InvalidLHSInAssignment);\n            }\n\n            // 11.13.1\n            if (strict && expr.type === Syntax.Identifier && isRestrictedWord(expr.name)) {\n                throwErrorTolerant(token, Messages.StrictLHSAssignment);\n            }\n\n            expr = {\n                type: Syntax.AssignmentExpression,\n                operator: lex().value,\n                left: expr,\n                right: parseAssignmentExpression()\n            };\n        }\n\n        return expr;\n    }\n\n    // 11.14 Comma Operator\n\n    function parseExpression() {\n        var expr = parseAssignmentExpression();\n\n        if (match(',')) {\n            expr = {\n                type: Syntax.SequenceExpression,\n                expressions: [ expr ]\n            };\n\n            while (index < length) {\n                if (!match(',')) {\n                    break;\n                }\n                lex();\n                expr.expressions.push(parseAssignmentExpression());\n            }\n\n        }\n        return expr;\n    }\n\n    // 12.1 Block\n\n    function parseStatementList() {\n        var list = [],\n            statement;\n\n        while (index < length) {\n            if (match('}')) {\n                break;\n            }\n            statement = parseSourceElement();\n            if (typeof statement === 'undefined') {\n                break;\n            }\n            list.push(statement);\n        }\n\n        return list;\n    }\n\n    function parseBlock() {\n        var block;\n\n        expect('{');\n\n        block = parseStatementList();\n\n        expect('}');\n\n        return {\n            type: Syntax.BlockStatement,\n            body: block\n        };\n    }\n\n    // 12.2 Variable Statement\n\n    function parseVariableIdentifier() {\n        var token = lex();\n\n        if (token.type !== Token.Identifier) {\n            throwUnexpected(token);\n        }\n\n        return {\n            type: Syntax.Identifier,\n            name: token.value\n        };\n    }\n\n    function parseVariableDeclaration(kind) {\n        var id = parseVariableIdentifier(),\n            init = null;\n\n        // 12.2.1\n        if (strict && isRestrictedWord(id.name)) {\n            throwErrorTolerant({}, Messages.StrictVarName);\n        }\n\n        if (kind === 'const') {\n            expect('=');\n            init = parseAssignmentExpression();\n        } else if (match('=')) {\n            lex();\n            init = parseAssignmentExpression();\n        }\n\n        return {\n            type: Syntax.VariableDeclarator,\n            id: id,\n            init: init\n        };\n    }\n\n    function parseVariableDeclarationList(kind) {\n        var list = [];\n\n        do {\n            list.push(parseVariableDeclaration(kind));\n            if (!match(',')) {\n                break;\n            }\n            lex();\n        } while (index < length);\n\n        return list;\n    }\n\n    function parseVariableStatement() {\n        var declarations;\n\n        expectKeyword('var');\n\n        declarations = parseVariableDeclarationList();\n\n        consumeSemicolon();\n\n        return {\n            type: Syntax.VariableDeclaration,\n            declarations: declarations,\n            kind: 'var'\n        };\n    }\n\n    // kind may be `const` or `let`\n    // Both are experimental and not in the specification yet.\n    // see http://wiki.ecmascript.org/doku.php?id=harmony:const\n    // and http://wiki.ecmascript.org/doku.php?id=harmony:let\n    function parseConstLetDeclaration(kind) {\n        var declarations;\n\n        expectKeyword(kind);\n\n        declarations = parseVariableDeclarationList(kind);\n\n        consumeSemicolon();\n\n        return {\n            type: Syntax.VariableDeclaration,\n            declarations: declarations,\n            kind: kind\n        };\n    }\n\n    // 12.3 Empty Statement\n\n    function parseEmptyStatement() {\n        expect(';');\n\n        return {\n            type: Syntax.EmptyStatement\n        };\n    }\n\n    // 12.4 Expression Statement\n\n    function parseExpressionStatement() {\n        var expr = parseExpression();\n\n        consumeSemicolon();\n\n        return {\n            type: Syntax.ExpressionStatement,\n            expression: expr\n        };\n    }\n\n    // 12.5 If statement\n\n    function parseIfStatement() {\n        var test, consequent, alternate;\n\n        expectKeyword('if');\n\n        expect('(');\n\n        test = parseExpression();\n\n        expect(')');\n\n        consequent = parseStatement();\n\n        if (matchKeyword('else')) {\n            lex();\n            alternate = parseStatement();\n        } else {\n            alternate = null;\n        }\n\n        return {\n            type: Syntax.IfStatement,\n            test: test,\n            consequent: consequent,\n            alternate: alternate\n        };\n    }\n\n    // 12.6 Iteration Statements\n\n    function parseDoWhileStatement() {\n        var body, test, oldInIteration;\n\n        expectKeyword('do');\n\n        oldInIteration = state.inIteration;\n        state.inIteration = true;\n\n        body = parseStatement();\n\n        state.inIteration = oldInIteration;\n\n        expectKeyword('while');\n\n        expect('(');\n\n        test = parseExpression();\n\n        expect(')');\n\n        if (match(';')) {\n            lex();\n        }\n\n        return {\n            type: Syntax.DoWhileStatement,\n            body: body,\n            test: test\n        };\n    }\n\n    function parseWhileStatement() {\n        var test, body, oldInIteration;\n\n        expectKeyword('while');\n\n        expect('(');\n\n        test = parseExpression();\n\n        expect(')');\n\n        oldInIteration = state.inIteration;\n        state.inIteration = true;\n\n        body = parseStatement();\n\n        state.inIteration = oldInIteration;\n\n        return {\n            type: Syntax.WhileStatement,\n            test: test,\n            body: body\n        };\n    }\n\n    function parseForVariableDeclaration() {\n        var token = lex();\n\n        return {\n            type: Syntax.VariableDeclaration,\n            declarations: parseVariableDeclarationList(),\n            kind: token.value\n        };\n    }\n\n    function parseForStatement() {\n        var init, test, update, left, right, body, oldInIteration;\n\n        init = test = update = null;\n\n        expectKeyword('for');\n\n        expect('(');\n\n        if (match(';')) {\n            lex();\n        } else {\n            if (matchKeyword('var') || matchKeyword('let')) {\n                state.allowIn = false;\n                init = parseForVariableDeclaration();\n                state.allowIn = true;\n\n                if (init.declarations.length === 1 && matchKeyword('in')) {\n                    lex();\n                    left = init;\n                    right = parseExpression();\n                    init = null;\n                }\n            } else {\n                state.allowIn = false;\n                init = parseExpression();\n                state.allowIn = true;\n\n                if (matchKeyword('in')) {\n                    // LeftHandSideExpression\n                    if (!isLeftHandSide(init)) {\n                        throwErrorTolerant({}, Messages.InvalidLHSInForIn);\n                    }\n\n                    lex();\n                    left = init;\n                    right = parseExpression();\n                    init = null;\n                }\n            }\n\n            if (typeof left === 'undefined') {\n                expect(';');\n            }\n        }\n\n        if (typeof left === 'undefined') {\n\n            if (!match(';')) {\n                test = parseExpression();\n            }\n            expect(';');\n\n            if (!match(')')) {\n                update = parseExpression();\n            }\n        }\n\n        expect(')');\n\n        oldInIteration = state.inIteration;\n        state.inIteration = true;\n\n        body = parseStatement();\n\n        state.inIteration = oldInIteration;\n\n        if (typeof left === 'undefined') {\n            return {\n                type: Syntax.ForStatement,\n                init: init,\n                test: test,\n                update: update,\n                body: body\n            };\n        }\n\n        return {\n            type: Syntax.ForInStatement,\n            left: left,\n            right: right,\n            body: body,\n            each: false\n        };\n    }\n\n    // 12.7 The continue statement\n\n    function parseContinueStatement() {\n        var token, label = null;\n\n        expectKeyword('continue');\n\n        // Optimize the most common form: 'continue;'.\n        if (source[index] === ';') {\n            lex();\n\n            if (!state.inIteration) {\n                throwError({}, Messages.IllegalContinue);\n            }\n\n            return {\n                type: Syntax.ContinueStatement,\n                label: null\n            };\n        }\n\n        if (peekLineTerminator()) {\n            if (!state.inIteration) {\n                throwError({}, Messages.IllegalContinue);\n            }\n\n            return {\n                type: Syntax.ContinueStatement,\n                label: null\n            };\n        }\n\n        token = lookahead();\n        if (token.type === Token.Identifier) {\n            label = parseVariableIdentifier();\n\n            if (!Object.prototype.hasOwnProperty.call(state.labelSet, label.name)) {\n                throwError({}, Messages.UnknownLabel, label.name);\n            }\n        }\n\n        consumeSemicolon();\n\n        if (label === null && !state.inIteration) {\n            throwError({}, Messages.IllegalContinue);\n        }\n\n        return {\n            type: Syntax.ContinueStatement,\n            label: label\n        };\n    }\n\n    // 12.8 The break statement\n\n    function parseBreakStatement() {\n        var token, label = null;\n\n        expectKeyword('break');\n\n        // Optimize the most common form: 'break;'.\n        if (source[index] === ';') {\n            lex();\n\n            if (!(state.inIteration || state.inSwitch)) {\n                throwError({}, Messages.IllegalBreak);\n            }\n\n            return {\n                type: Syntax.BreakStatement,\n                label: null\n            };\n        }\n\n        if (peekLineTerminator()) {\n            if (!(state.inIteration || state.inSwitch)) {\n                throwError({}, Messages.IllegalBreak);\n            }\n\n            return {\n                type: Syntax.BreakStatement,\n                label: null\n            };\n        }\n\n        token = lookahead();\n        if (token.type === Token.Identifier) {\n            label = parseVariableIdentifier();\n\n            if (!Object.prototype.hasOwnProperty.call(state.labelSet, label.name)) {\n                throwError({}, Messages.UnknownLabel, label.name);\n            }\n        }\n\n        consumeSemicolon();\n\n        if (label === null && !(state.inIteration || state.inSwitch)) {\n            throwError({}, Messages.IllegalBreak);\n        }\n\n        return {\n            type: Syntax.BreakStatement,\n            label: label\n        };\n    }\n\n    // 12.9 The return statement\n\n    function parseReturnStatement() {\n        var token, argument = null;\n\n        expectKeyword('return');\n\n        if (!state.inFunctionBody) {\n            throwErrorTolerant({}, Messages.IllegalReturn);\n        }\n\n        // 'return' followed by a space and an identifier is very common.\n        if (source[index] === ' ') {\n            if (isIdentifierStart(source[index + 1])) {\n                argument = parseExpression();\n                consumeSemicolon();\n                return {\n                    type: Syntax.ReturnStatement,\n                    argument: argument\n                };\n            }\n        }\n\n        if (peekLineTerminator()) {\n            return {\n                type: Syntax.ReturnStatement,\n                argument: null\n            };\n        }\n\n        if (!match(';')) {\n            token = lookahead();\n            if (!match('}') && token.type !== Token.EOF) {\n                argument = parseExpression();\n            }\n        }\n\n        consumeSemicolon();\n\n        return {\n            type: Syntax.ReturnStatement,\n            argument: argument\n        };\n    }\n\n    // 12.10 The with statement\n\n    function parseWithStatement() {\n        var object, body;\n\n        if (strict) {\n            throwErrorTolerant({}, Messages.StrictModeWith);\n        }\n\n        expectKeyword('with');\n\n        expect('(');\n\n        object = parseExpression();\n\n        expect(')');\n\n        body = parseStatement();\n\n        return {\n            type: Syntax.WithStatement,\n            object: object,\n            body: body\n        };\n    }\n\n    // 12.10 The swith statement\n\n    function parseSwitchCase() {\n        var test,\n            consequent = [],\n            statement;\n\n        if (matchKeyword('default')) {\n            lex();\n            test = null;\n        } else {\n            expectKeyword('case');\n            test = parseExpression();\n        }\n        expect(':');\n\n        while (index < length) {\n            if (match('}') || matchKeyword('default') || matchKeyword('case')) {\n                break;\n            }\n            statement = parseStatement();\n            if (typeof statement === 'undefined') {\n                break;\n            }\n            consequent.push(statement);\n        }\n\n        return {\n            type: Syntax.SwitchCase,\n            test: test,\n            consequent: consequent\n        };\n    }\n\n    function parseSwitchStatement() {\n        var discriminant, cases, clause, oldInSwitch, defaultFound;\n\n        expectKeyword('switch');\n\n        expect('(');\n\n        discriminant = parseExpression();\n\n        expect(')');\n\n        expect('{');\n\n        cases = [];\n\n        if (match('}')) {\n            lex();\n            return {\n                type: Syntax.SwitchStatement,\n                discriminant: discriminant,\n                cases: cases\n            };\n        }\n\n        oldInSwitch = state.inSwitch;\n        state.inSwitch = true;\n        defaultFound = false;\n\n        while (index < length) {\n            if (match('}')) {\n                break;\n            }\n            clause = parseSwitchCase();\n            if (clause.test === null) {\n                if (defaultFound) {\n                    throwError({}, Messages.MultipleDefaultsInSwitch);\n                }\n                defaultFound = true;\n            }\n            cases.push(clause);\n        }\n\n        state.inSwitch = oldInSwitch;\n\n        expect('}');\n\n        return {\n            type: Syntax.SwitchStatement,\n            discriminant: discriminant,\n            cases: cases\n        };\n    }\n\n    // 12.13 The throw statement\n\n    function parseThrowStatement() {\n        var argument;\n\n        expectKeyword('throw');\n\n        if (peekLineTerminator()) {\n            throwError({}, Messages.NewlineAfterThrow);\n        }\n\n        argument = parseExpression();\n\n        consumeSemicolon();\n\n        return {\n            type: Syntax.ThrowStatement,\n            argument: argument\n        };\n    }\n\n    // 12.14 The try statement\n\n    function parseCatchClause() {\n        var param;\n\n        expectKeyword('catch');\n\n        expect('(');\n        if (match(')')) {\n            throwUnexpected(lookahead());\n        }\n\n        param = parseVariableIdentifier();\n        // 12.14.1\n        if (strict && isRestrictedWord(param.name)) {\n            throwErrorTolerant({}, Messages.StrictCatchVariable);\n        }\n\n        expect(')');\n\n        return {\n            type: Syntax.CatchClause,\n            param: param,\n            body: parseBlock()\n        };\n    }\n\n    function parseTryStatement() {\n        var block, handlers = [], finalizer = null;\n\n        expectKeyword('try');\n\n        block = parseBlock();\n\n        if (matchKeyword('catch')) {\n            handlers.push(parseCatchClause());\n        }\n\n        if (matchKeyword('finally')) {\n            lex();\n            finalizer = parseBlock();\n        }\n\n        if (handlers.length === 0 && !finalizer) {\n            throwError({}, Messages.NoCatchOrFinally);\n        }\n\n        return {\n            type: Syntax.TryStatement,\n            block: block,\n            guardedHandlers: [],\n            handlers: handlers,\n            finalizer: finalizer\n        };\n    }\n\n    // 12.15 The debugger statement\n\n    function parseDebuggerStatement() {\n        expectKeyword('debugger');\n\n        consumeSemicolon();\n\n        return {\n            type: Syntax.DebuggerStatement\n        };\n    }\n\n    // 12 Statements\n\n    function parseStatement() {\n        var token = lookahead(),\n            expr,\n            labeledBody;\n\n        if (token.type === Token.EOF) {\n            throwUnexpected(token);\n        }\n\n        if (token.type === Token.Punctuator) {\n            switch (token.value) {\n            case ';':\n                return parseEmptyStatement();\n            case '{':\n                return parseBlock();\n            case '(':\n                return parseExpressionStatement();\n            default:\n                break;\n            }\n        }\n\n        if (token.type === Token.Keyword) {\n            switch (token.value) {\n            case 'break':\n                return parseBreakStatement();\n            case 'continue':\n                return parseContinueStatement();\n            case 'debugger':\n                return parseDebuggerStatement();\n            case 'do':\n                return parseDoWhileStatement();\n            case 'for':\n                return parseForStatement();\n            case 'function':\n                return parseFunctionDeclaration();\n            case 'if':\n                return parseIfStatement();\n            case 'return':\n                return parseReturnStatement();\n            case 'switch':\n                return parseSwitchStatement();\n            case 'throw':\n                return parseThrowStatement();\n            case 'try':\n                return parseTryStatement();\n            case 'var':\n                return parseVariableStatement();\n            case 'while':\n                return parseWhileStatement();\n            case 'with':\n                return parseWithStatement();\n            default:\n                break;\n            }\n        }\n\n        expr = parseExpression();\n\n        // 12.12 Labelled Statements\n        if ((expr.type === Syntax.Identifier) && match(':')) {\n            lex();\n\n            if (Object.prototype.hasOwnProperty.call(state.labelSet, expr.name)) {\n                throwError({}, Messages.Redeclaration, 'Label', expr.name);\n            }\n\n            state.labelSet[expr.name] = true;\n            labeledBody = parseStatement();\n            delete state.labelSet[expr.name];\n\n            return {\n                type: Syntax.LabeledStatement,\n                label: expr,\n                body: labeledBody\n            };\n        }\n\n        consumeSemicolon();\n\n        return {\n            type: Syntax.ExpressionStatement,\n            expression: expr\n        };\n    }\n\n    // 13 Function Definition\n\n    function parseFunctionSourceElements() {\n        var sourceElement, sourceElements = [], token, directive, firstRestricted,\n            oldLabelSet, oldInIteration, oldInSwitch, oldInFunctionBody;\n\n        expect('{');\n\n        while (index < length) {\n            token = lookahead();\n            if (token.type !== Token.StringLiteral) {\n                break;\n            }\n\n            sourceElement = parseSourceElement();\n            sourceElements.push(sourceElement);\n            if (sourceElement.expression.type !== Syntax.Literal) {\n                // this is not directive\n                break;\n            }\n            directive = sliceSource(token.range[0] + 1, token.range[1] - 1);\n            if (directive === 'use strict') {\n                strict = true;\n                if (firstRestricted) {\n                    throwErrorTolerant(firstRestricted, Messages.StrictOctalLiteral);\n                }\n            } else {\n                if (!firstRestricted && token.octal) {\n                    firstRestricted = token;\n                }\n            }\n        }\n\n        oldLabelSet = state.labelSet;\n        oldInIteration = state.inIteration;\n        oldInSwitch = state.inSwitch;\n        oldInFunctionBody = state.inFunctionBody;\n\n        state.labelSet = {};\n        state.inIteration = false;\n        state.inSwitch = false;\n        state.inFunctionBody = true;\n\n        while (index < length) {\n            if (match('}')) {\n                break;\n            }\n            sourceElement = parseSourceElement();\n            if (typeof sourceElement === 'undefined') {\n                break;\n            }\n            sourceElements.push(sourceElement);\n        }\n\n        expect('}');\n\n        state.labelSet = oldLabelSet;\n        state.inIteration = oldInIteration;\n        state.inSwitch = oldInSwitch;\n        state.inFunctionBody = oldInFunctionBody;\n\n        return {\n            type: Syntax.BlockStatement,\n            body: sourceElements\n        };\n    }\n\n    function parseFunctionDeclaration() {\n        var id, param, params = [], body, token, stricted, firstRestricted, message, previousStrict, paramSet;\n\n        expectKeyword('function');\n        token = lookahead();\n        id = parseVariableIdentifier();\n        if (strict) {\n            if (isRestrictedWord(token.value)) {\n                throwErrorTolerant(token, Messages.StrictFunctionName);\n            }\n        } else {\n            if (isRestrictedWord(token.value)) {\n                firstRestricted = token;\n                message = Messages.StrictFunctionName;\n            } else if (isStrictModeReservedWord(token.value)) {\n                firstRestricted = token;\n                message = Messages.StrictReservedWord;\n            }\n        }\n\n        expect('(');\n\n        if (!match(')')) {\n            paramSet = {};\n            while (index < length) {\n                token = lookahead();\n                param = parseVariableIdentifier();\n                if (strict) {\n                    if (isRestrictedWord(token.value)) {\n                        stricted = token;\n                        message = Messages.StrictParamName;\n                    }\n                    if (Object.prototype.hasOwnProperty.call(paramSet, token.value)) {\n                        stricted = token;\n                        message = Messages.StrictParamDupe;\n                    }\n                } else if (!firstRestricted) {\n                    if (isRestrictedWord(token.value)) {\n                        firstRestricted = token;\n                        message = Messages.StrictParamName;\n                    } else if (isStrictModeReservedWord(token.value)) {\n                        firstRestricted = token;\n                        message = Messages.StrictReservedWord;\n                    } else if (Object.prototype.hasOwnProperty.call(paramSet, token.value)) {\n                        firstRestricted = token;\n                        message = Messages.StrictParamDupe;\n                    }\n                }\n                params.push(param);\n                paramSet[param.name] = true;\n                if (match(')')) {\n                    break;\n                }\n                expect(',');\n            }\n        }\n\n        expect(')');\n\n        previousStrict = strict;\n        body = parseFunctionSourceElements();\n        if (strict && firstRestricted) {\n            throwError(firstRestricted, message);\n        }\n        if (strict && stricted) {\n            throwErrorTolerant(stricted, message);\n        }\n        strict = previousStrict;\n\n        return {\n            type: Syntax.FunctionDeclaration,\n            id: id,\n            params: params,\n            defaults: [],\n            body: body,\n            rest: null,\n            generator: false,\n            expression: false\n        };\n    }\n\n    function parseFunctionExpression() {\n        var token, id = null, stricted, firstRestricted, message, param, params = [], body, previousStrict, paramSet;\n\n        expectKeyword('function');\n\n        if (!match('(')) {\n            token = lookahead();\n            id = parseVariableIdentifier();\n            if (strict) {\n                if (isRestrictedWord(token.value)) {\n                    throwErrorTolerant(token, Messages.StrictFunctionName);\n                }\n            } else {\n                if (isRestrictedWord(token.value)) {\n                    firstRestricted = token;\n                    message = Messages.StrictFunctionName;\n                } else if (isStrictModeReservedWord(token.value)) {\n                    firstRestricted = token;\n                    message = Messages.StrictReservedWord;\n                }\n            }\n        }\n\n        expect('(');\n\n        if (!match(')')) {\n            paramSet = {};\n            while (index < length) {\n                token = lookahead();\n                param = parseVariableIdentifier();\n                if (strict) {\n                    if (isRestrictedWord(token.value)) {\n                        stricted = token;\n                        message = Messages.StrictParamName;\n                    }\n                    if (Object.prototype.hasOwnProperty.call(paramSet, token.value)) {\n                        stricted = token;\n                        message = Messages.StrictParamDupe;\n                    }\n                } else if (!firstRestricted) {\n                    if (isRestrictedWord(token.value)) {\n                        firstRestricted = token;\n                        message = Messages.StrictParamName;\n                    } else if (isStrictModeReservedWord(token.value)) {\n                        firstRestricted = token;\n                        message = Messages.StrictReservedWord;\n                    } else if (Object.prototype.hasOwnProperty.call(paramSet, token.value)) {\n                        firstRestricted = token;\n                        message = Messages.StrictParamDupe;\n                    }\n                }\n                params.push(param);\n                paramSet[param.name] = true;\n                if (match(')')) {\n                    break;\n                }\n                expect(',');\n            }\n        }\n\n        expect(')');\n\n        previousStrict = strict;\n        body = parseFunctionSourceElements();\n        if (strict && firstRestricted) {\n            throwError(firstRestricted, message);\n        }\n        if (strict && stricted) {\n            throwErrorTolerant(stricted, message);\n        }\n        strict = previousStrict;\n\n        return {\n            type: Syntax.FunctionExpression,\n            id: id,\n            params: params,\n            defaults: [],\n            body: body,\n            rest: null,\n            generator: false,\n            expression: false\n        };\n    }\n\n    // 14 Program\n\n    function parseSourceElement() {\n        var token = lookahead();\n\n        if (token.type === Token.Keyword) {\n            switch (token.value) {\n            case 'const':\n            case 'let':\n                return parseConstLetDeclaration(token.value);\n            case 'function':\n                return parseFunctionDeclaration();\n            default:\n                return parseStatement();\n            }\n        }\n\n        if (token.type !== Token.EOF) {\n            return parseStatement();\n        }\n    }\n\n    function parseSourceElements() {\n        var sourceElement, sourceElements = [], token, directive, firstRestricted;\n\n        while (index < length) {\n            token = lookahead();\n            if (token.type !== Token.StringLiteral) {\n                break;\n            }\n\n            sourceElement = parseSourceElement();\n            sourceElements.push(sourceElement);\n            if (sourceElement.expression.type !== Syntax.Literal) {\n                // this is not directive\n                break;\n            }\n            directive = sliceSource(token.range[0] + 1, token.range[1] - 1);\n            if (directive === 'use strict') {\n                strict = true;\n                if (firstRestricted) {\n                    throwErrorTolerant(firstRestricted, Messages.StrictOctalLiteral);\n                }\n            } else {\n                if (!firstRestricted && token.octal) {\n                    firstRestricted = token;\n                }\n            }\n        }\n\n        while (index < length) {\n            sourceElement = parseSourceElement();\n            if (typeof sourceElement === 'undefined') {\n                break;\n            }\n            sourceElements.push(sourceElement);\n        }\n        return sourceElements;\n    }\n\n    function parseProgram() {\n        var program;\n        strict = false;\n        program = {\n            type: Syntax.Program,\n            body: parseSourceElements()\n        };\n        return program;\n    }\n\n    // The following functions are needed only when the option to preserve\n    // the comments is active.\n\n    function addComment(type, value, start, end, loc) {\n        assert(typeof start === 'number', 'Comment must have valid position');\n\n        // Because the way the actual token is scanned, often the comments\n        // (if any) are skipped twice during the lexical analysis.\n        // Thus, we need to skip adding a comment if the comment array already\n        // handled it.\n        if (extra.comments.length > 0) {\n            if (extra.comments[extra.comments.length - 1].range[1] > start) {\n                return;\n            }\n        }\n\n        extra.comments.push({\n            type: type,\n            value: value,\n            range: [start, end],\n            loc: loc\n        });\n    }\n\n    function scanComment() {\n        var comment, ch, loc, start, blockComment, lineComment;\n\n        comment = '';\n        blockComment = false;\n        lineComment = false;\n\n        while (index < length) {\n            ch = source[index];\n\n            if (lineComment) {\n                ch = source[index++];\n                if (isLineTerminator(ch)) {\n                    loc.end = {\n                        line: lineNumber,\n                        column: index - lineStart - 1\n                    };\n                    lineComment = false;\n                    addComment('Line', comment, start, index - 1, loc);\n                    if (ch === '\\r' && source[index] === '\\n') {\n                        ++index;\n                    }\n                    ++lineNumber;\n                    lineStart = index;\n                    comment = '';\n                } else if (index >= length) {\n                    lineComment = false;\n                    comment += ch;\n                    loc.end = {\n                        line: lineNumber,\n                        column: length - lineStart\n                    };\n                    addComment('Line', comment, start, length, loc);\n                } else {\n                    comment += ch;\n                }\n            } else if (blockComment) {\n                if (isLineTerminator(ch)) {\n                    if (ch === '\\r' && source[index + 1] === '\\n') {\n                        ++index;\n                        comment += '\\r\\n';\n                    } else {\n                        comment += ch;\n                    }\n                    ++lineNumber;\n                    ++index;\n                    lineStart = index;\n                    if (index >= length) {\n                        throwError({}, Messages.UnexpectedToken, 'ILLEGAL');\n                    }\n                } else {\n                    ch = source[index++];\n                    if (index >= length) {\n                        throwError({}, Messages.UnexpectedToken, 'ILLEGAL');\n                    }\n                    comment += ch;\n                    if (ch === '*') {\n                        ch = source[index];\n                        if (ch === '/') {\n                            comment = comment.substr(0, comment.length - 1);\n                            blockComment = false;\n                            ++index;\n                            loc.end = {\n                                line: lineNumber,\n                                column: index - lineStart\n                            };\n                            addComment('Block', comment, start, index, loc);\n                            comment = '';\n                        }\n                    }\n                }\n            } else if (ch === '/') {\n                ch = source[index + 1];\n                if (ch === '/') {\n                    loc = {\n                        start: {\n                            line: lineNumber,\n                            column: index - lineStart\n                        }\n                    };\n                    start = index;\n                    index += 2;\n                    lineComment = true;\n                    if (index >= length) {\n                        loc.end = {\n                            line: lineNumber,\n                            column: index - lineStart\n                        };\n                        lineComment = false;\n                        addComment('Line', comment, start, index, loc);\n                    }\n                } else if (ch === '*') {\n                    start = index;\n                    index += 2;\n                    blockComment = true;\n                    loc = {\n                        start: {\n                            line: lineNumber,\n                            column: index - lineStart - 2\n                        }\n                    };\n                    if (index >= length) {\n                        throwError({}, Messages.UnexpectedToken, 'ILLEGAL');\n                    }\n                } else {\n                    break;\n                }\n            } else if (isWhiteSpace(ch)) {\n                ++index;\n            } else if (isLineTerminator(ch)) {\n                ++index;\n                if (ch ===  '\\r' && source[index] === '\\n') {\n                    ++index;\n                }\n                ++lineNumber;\n                lineStart = index;\n            } else {\n                break;\n            }\n        }\n    }\n\n    function filterCommentLocation() {\n        var i, entry, comment, comments = [];\n\n        for (i = 0; i < extra.comments.length; ++i) {\n            entry = extra.comments[i];\n            comment = {\n                type: entry.type,\n                value: entry.value\n            };\n            if (extra.range) {\n                comment.range = entry.range;\n            }\n            if (extra.loc) {\n                comment.loc = entry.loc;\n            }\n            comments.push(comment);\n        }\n\n        extra.comments = comments;\n    }\n\n    function collectToken() {\n        var start, loc, token, range, value;\n\n        skipComment();\n        start = index;\n        loc = {\n            start: {\n                line: lineNumber,\n                column: index - lineStart\n            }\n        };\n\n        token = extra.advance();\n        loc.end = {\n            line: lineNumber,\n            column: index - lineStart\n        };\n\n        if (token.type !== Token.EOF) {\n            range = [token.range[0], token.range[1]];\n            value = sliceSource(token.range[0], token.range[1]);\n            extra.tokens.push({\n                type: TokenName[token.type],\n                value: value,\n                range: range,\n                loc: loc\n            });\n        }\n\n        return token;\n    }\n\n    function collectRegex() {\n        var pos, loc, regex, token;\n\n        skipComment();\n\n        pos = index;\n        loc = {\n            start: {\n                line: lineNumber,\n                column: index - lineStart\n            }\n        };\n\n        regex = extra.scanRegExp();\n        loc.end = {\n            line: lineNumber,\n            column: index - lineStart\n        };\n\n        // Pop the previous token, which is likely '/' or '/='\n        if (extra.tokens.length > 0) {\n            token = extra.tokens[extra.tokens.length - 1];\n            if (token.range[0] === pos && token.type === 'Punctuator') {\n                if (token.value === '/' || token.value === '/=') {\n                    extra.tokens.pop();\n                }\n            }\n        }\n\n        extra.tokens.push({\n            type: 'RegularExpression',\n            value: regex.literal,\n            range: [pos, index],\n            loc: loc\n        });\n\n        return regex;\n    }\n\n    function filterTokenLocation() {\n        var i, entry, token, tokens = [];\n\n        for (i = 0; i < extra.tokens.length; ++i) {\n            entry = extra.tokens[i];\n            token = {\n                type: entry.type,\n                value: entry.value\n            };\n            if (extra.range) {\n                token.range = entry.range;\n            }\n            if (extra.loc) {\n                token.loc = entry.loc;\n            }\n            tokens.push(token);\n        }\n\n        extra.tokens = tokens;\n    }\n\n    function createLiteral(token) {\n        return {\n            type: Syntax.Literal,\n            value: token.value\n        };\n    }\n\n    function createRawLiteral(token) {\n        return {\n            type: Syntax.Literal,\n            value: token.value,\n            raw: sliceSource(token.range[0], token.range[1])\n        };\n    }\n\n    function createLocationMarker() {\n        var marker = {};\n\n        marker.range = [index, index];\n        marker.loc = {\n            start: {\n                line: lineNumber,\n                column: index - lineStart\n            },\n            end: {\n                line: lineNumber,\n                column: index - lineStart\n            }\n        };\n\n        marker.end = function () {\n            this.range[1] = index;\n            this.loc.end.line = lineNumber;\n            this.loc.end.column = index - lineStart;\n        };\n\n        marker.applyGroup = function (node) {\n            if (extra.range) {\n                node.groupRange = [this.range[0], this.range[1]];\n            }\n            if (extra.loc) {\n                node.groupLoc = {\n                    start: {\n                        line: this.loc.start.line,\n                        column: this.loc.start.column\n                    },\n                    end: {\n                        line: this.loc.end.line,\n                        column: this.loc.end.column\n                    }\n                };\n            }\n        };\n\n        marker.apply = function (node) {\n            if (extra.range) {\n                node.range = [this.range[0], this.range[1]];\n            }\n            if (extra.loc) {\n                node.loc = {\n                    start: {\n                        line: this.loc.start.line,\n                        column: this.loc.start.column\n                    },\n                    end: {\n                        line: this.loc.end.line,\n                        column: this.loc.end.column\n                    }\n                };\n            }\n        };\n\n        return marker;\n    }\n\n    function trackGroupExpression() {\n        var marker, expr;\n\n        skipComment();\n        marker = createLocationMarker();\n        expect('(');\n\n        expr = parseExpression();\n\n        expect(')');\n\n        marker.end();\n        marker.applyGroup(expr);\n\n        return expr;\n    }\n\n    function trackLeftHandSideExpression() {\n        var marker, expr;\n\n        skipComment();\n        marker = createLocationMarker();\n\n        expr = matchKeyword('new') ? parseNewExpression() : parsePrimaryExpression();\n\n        while (match('.') || match('[')) {\n            if (match('[')) {\n                expr = {\n                    type: Syntax.MemberExpression,\n                    computed: true,\n                    object: expr,\n                    property: parseComputedMember()\n                };\n                marker.end();\n                marker.apply(expr);\n            } else {\n                expr = {\n                    type: Syntax.MemberExpression,\n                    computed: false,\n                    object: expr,\n                    property: parseNonComputedMember()\n                };\n                marker.end();\n                marker.apply(expr);\n            }\n        }\n\n        return expr;\n    }\n\n    function trackLeftHandSideExpressionAllowCall() {\n        var marker, expr;\n\n        skipComment();\n        marker = createLocationMarker();\n\n        expr = matchKeyword('new') ? parseNewExpression() : parsePrimaryExpression();\n\n        while (match('.') || match('[') || match('(')) {\n            if (match('(')) {\n                expr = {\n                    type: Syntax.CallExpression,\n                    callee: expr,\n                    'arguments': parseArguments()\n                };\n                marker.end();\n                marker.apply(expr);\n            } else if (match('[')) {\n                expr = {\n                    type: Syntax.MemberExpression,\n                    computed: true,\n                    object: expr,\n                    property: parseComputedMember()\n                };\n                marker.end();\n                marker.apply(expr);\n            } else {\n                expr = {\n                    type: Syntax.MemberExpression,\n                    computed: false,\n                    object: expr,\n                    property: parseNonComputedMember()\n                };\n                marker.end();\n                marker.apply(expr);\n            }\n        }\n\n        return expr;\n    }\n\n    function filterGroup(node) {\n        var n, i, entry;\n\n        n = (Object.prototype.toString.apply(node) === '[object Array]') ? [] : {};\n        for (i in node) {\n            if (node.hasOwnProperty(i) && i !== 'groupRange' && i !== 'groupLoc') {\n                entry = node[i];\n                if (entry === null || typeof entry !== 'object' || entry instanceof RegExp) {\n                    n[i] = entry;\n                } else {\n                    n[i] = filterGroup(entry);\n                }\n            }\n        }\n        return n;\n    }\n\n    function wrapTrackingFunction(range, loc) {\n\n        return function (parseFunction) {\n\n            function isBinary(node) {\n                return node.type === Syntax.LogicalExpression ||\n                    node.type === Syntax.BinaryExpression;\n            }\n\n            function visit(node) {\n                var start, end;\n\n                if (isBinary(node.left)) {\n                    visit(node.left);\n                }\n                if (isBinary(node.right)) {\n                    visit(node.right);\n                }\n\n                if (range) {\n                    if (node.left.groupRange || node.right.groupRange) {\n                        start = node.left.groupRange ? node.left.groupRange[0] : node.left.range[0];\n                        end = node.right.groupRange ? node.right.groupRange[1] : node.right.range[1];\n                        node.range = [start, end];\n                    } else if (typeof node.range === 'undefined') {\n                        start = node.left.range[0];\n                        end = node.right.range[1];\n                        node.range = [start, end];\n                    }\n                }\n                if (loc) {\n                    if (node.left.groupLoc || node.right.groupLoc) {\n                        start = node.left.groupLoc ? node.left.groupLoc.start : node.left.loc.start;\n                        end = node.right.groupLoc ? node.right.groupLoc.end : node.right.loc.end;\n                        node.loc = {\n                            start: start,\n                            end: end\n                        };\n                    } else if (typeof node.loc === 'undefined') {\n                        node.loc = {\n                            start: node.left.loc.start,\n                            end: node.right.loc.end\n                        };\n                    }\n                }\n            }\n\n            return function () {\n                var marker, node;\n\n                skipComment();\n\n                marker = createLocationMarker();\n                node = parseFunction.apply(null, arguments);\n                marker.end();\n\n                if (range && typeof node.range === 'undefined') {\n                    marker.apply(node);\n                }\n\n                if (loc && typeof node.loc === 'undefined') {\n                    marker.apply(node);\n                }\n\n                if (isBinary(node)) {\n                    visit(node);\n                }\n\n                return node;\n            };\n        };\n    }\n\n    function patch() {\n\n        var wrapTracking;\n\n        if (extra.comments) {\n            extra.skipComment = skipComment;\n            skipComment = scanComment;\n        }\n\n        if (extra.raw) {\n            extra.createLiteral = createLiteral;\n            createLiteral = createRawLiteral;\n        }\n\n        if (extra.range || extra.loc) {\n\n            extra.parseGroupExpression = parseGroupExpression;\n            extra.parseLeftHandSideExpression = parseLeftHandSideExpression;\n            extra.parseLeftHandSideExpressionAllowCall = parseLeftHandSideExpressionAllowCall;\n            parseGroupExpression = trackGroupExpression;\n            parseLeftHandSideExpression = trackLeftHandSideExpression;\n            parseLeftHandSideExpressionAllowCall = trackLeftHandSideExpressionAllowCall;\n\n            wrapTracking = wrapTrackingFunction(extra.range, extra.loc);\n\n            extra.parseAdditiveExpression = parseAdditiveExpression;\n            extra.parseAssignmentExpression = parseAssignmentExpression;\n            extra.parseBitwiseANDExpression = parseBitwiseANDExpression;\n            extra.parseBitwiseORExpression = parseBitwiseORExpression;\n            extra.parseBitwiseXORExpression = parseBitwiseXORExpression;\n            extra.parseBlock = parseBlock;\n            extra.parseFunctionSourceElements = parseFunctionSourceElements;\n            extra.parseCatchClause = parseCatchClause;\n            extra.parseComputedMember = parseComputedMember;\n            extra.parseConditionalExpression = parseConditionalExpression;\n            extra.parseConstLetDeclaration = parseConstLetDeclaration;\n            extra.parseEqualityExpression = parseEqualityExpression;\n            extra.parseExpression = parseExpression;\n            extra.parseForVariableDeclaration = parseForVariableDeclaration;\n            extra.parseFunctionDeclaration = parseFunctionDeclaration;\n            extra.parseFunctionExpression = parseFunctionExpression;\n            extra.parseLogicalANDExpression = parseLogicalANDExpression;\n            extra.parseLogicalORExpression = parseLogicalORExpression;\n            extra.parseMultiplicativeExpression = parseMultiplicativeExpression;\n            extra.parseNewExpression = parseNewExpression;\n            extra.parseNonComputedProperty = parseNonComputedProperty;\n            extra.parseObjectProperty = parseObjectProperty;\n            extra.parseObjectPropertyKey = parseObjectPropertyKey;\n            extra.parsePostfixExpression = parsePostfixExpression;\n            extra.parsePrimaryExpression = parsePrimaryExpression;\n            extra.parseProgram = parseProgram;\n            extra.parsePropertyFunction = parsePropertyFunction;\n            extra.parseRelationalExpression = parseRelationalExpression;\n            extra.parseStatement = parseStatement;\n            extra.parseShiftExpression = parseShiftExpression;\n            extra.parseSwitchCase = parseSwitchCase;\n            extra.parseUnaryExpression = parseUnaryExpression;\n            extra.parseVariableDeclaration = parseVariableDeclaration;\n            extra.parseVariableIdentifier = parseVariableIdentifier;\n\n            parseAdditiveExpression = wrapTracking(extra.parseAdditiveExpression);\n            parseAssignmentExpression = wrapTracking(extra.parseAssignmentExpression);\n            parseBitwiseANDExpression = wrapTracking(extra.parseBitwiseANDExpression);\n            parseBitwiseORExpression = wrapTracking(extra.parseBitwiseORExpression);\n            parseBitwiseXORExpression = wrapTracking(extra.parseBitwiseXORExpression);\n            parseBlock = wrapTracking(extra.parseBlock);\n            parseFunctionSourceElements = wrapTracking(extra.parseFunctionSourceElements);\n            parseCatchClause = wrapTracking(extra.parseCatchClause);\n            parseComputedMember = wrapTracking(extra.parseComputedMember);\n            parseConditionalExpression = wrapTracking(extra.parseConditionalExpression);\n            parseConstLetDeclaration = wrapTracking(extra.parseConstLetDeclaration);\n            parseEqualityExpression = wrapTracking(extra.parseEqualityExpression);\n            parseExpression = wrapTracking(extra.parseExpression);\n            parseForVariableDeclaration = wrapTracking(extra.parseForVariableDeclaration);\n            parseFunctionDeclaration = wrapTracking(extra.parseFunctionDeclaration);\n            parseFunctionExpression = wrapTracking(extra.parseFunctionExpression);\n            parseLeftHandSideExpression = wrapTracking(parseLeftHandSideExpression);\n            parseLogicalANDExpression = wrapTracking(extra.parseLogicalANDExpression);\n            parseLogicalORExpression = wrapTracking(extra.parseLogicalORExpression);\n            parseMultiplicativeExpression = wrapTracking(extra.parseMultiplicativeExpression);\n            parseNewExpression = wrapTracking(extra.parseNewExpression);\n            parseNonComputedProperty = wrapTracking(extra.parseNonComputedProperty);\n            parseObjectProperty = wrapTracking(extra.parseObjectProperty);\n            parseObjectPropertyKey = wrapTracking(extra.parseObjectPropertyKey);\n            parsePostfixExpression = wrapTracking(extra.parsePostfixExpression);\n            parsePrimaryExpression = wrapTracking(extra.parsePrimaryExpression);\n            parseProgram = wrapTracking(extra.parseProgram);\n            parsePropertyFunction = wrapTracking(extra.parsePropertyFunction);\n            parseRelationalExpression = wrapTracking(extra.parseRelationalExpression);\n            parseStatement = wrapTracking(extra.parseStatement);\n            parseShiftExpression = wrapTracking(extra.parseShiftExpression);\n            parseSwitchCase = wrapTracking(extra.parseSwitchCase);\n            parseUnaryExpression = wrapTracking(extra.parseUnaryExpression);\n            parseVariableDeclaration = wrapTracking(extra.parseVariableDeclaration);\n            parseVariableIdentifier = wrapTracking(extra.parseVariableIdentifier);\n        }\n\n        if (typeof extra.tokens !== 'undefined') {\n            extra.advance = advance;\n            extra.scanRegExp = scanRegExp;\n\n            advance = collectToken;\n            scanRegExp = collectRegex;\n        }\n    }\n\n    function unpatch() {\n        if (typeof extra.skipComment === 'function') {\n            skipComment = extra.skipComment;\n        }\n\n        if (extra.raw) {\n            createLiteral = extra.createLiteral;\n        }\n\n        if (extra.range || extra.loc) {\n            parseAdditiveExpression = extra.parseAdditiveExpression;\n            parseAssignmentExpression = extra.parseAssignmentExpression;\n            parseBitwiseANDExpression = extra.parseBitwiseANDExpression;\n            parseBitwiseORExpression = extra.parseBitwiseORExpression;\n            parseBitwiseXORExpression = extra.parseBitwiseXORExpression;\n            parseBlock = extra.parseBlock;\n            parseFunctionSourceElements = extra.parseFunctionSourceElements;\n            parseCatchClause = extra.parseCatchClause;\n            parseComputedMember = extra.parseComputedMember;\n            parseConditionalExpression = extra.parseConditionalExpression;\n            parseConstLetDeclaration = extra.parseConstLetDeclaration;\n            parseEqualityExpression = extra.parseEqualityExpression;\n            parseExpression = extra.parseExpression;\n            parseForVariableDeclaration = extra.parseForVariableDeclaration;\n            parseFunctionDeclaration = extra.parseFunctionDeclaration;\n            parseFunctionExpression = extra.parseFunctionExpression;\n            parseGroupExpression = extra.parseGroupExpression;\n            parseLeftHandSideExpression = extra.parseLeftHandSideExpression;\n            parseLeftHandSideExpressionAllowCall = extra.parseLeftHandSideExpressionAllowCall;\n            parseLogicalANDExpression = extra.parseLogicalANDExpression;\n            parseLogicalORExpression = extra.parseLogicalORExpression;\n            parseMultiplicativeExpression = extra.parseMultiplicativeExpression;\n            parseNewExpression = extra.parseNewExpression;\n            parseNonComputedProperty = extra.parseNonComputedProperty;\n            parseObjectProperty = extra.parseObjectProperty;\n            parseObjectPropertyKey = extra.parseObjectPropertyKey;\n            parsePrimaryExpression = extra.parsePrimaryExpression;\n            parsePostfixExpression = extra.parsePostfixExpression;\n            parseProgram = extra.parseProgram;\n            parsePropertyFunction = extra.parsePropertyFunction;\n            parseRelationalExpression = extra.parseRelationalExpression;\n            parseStatement = extra.parseStatement;\n            parseShiftExpression = extra.parseShiftExpression;\n            parseSwitchCase = extra.parseSwitchCase;\n            parseUnaryExpression = extra.parseUnaryExpression;\n            parseVariableDeclaration = extra.parseVariableDeclaration;\n            parseVariableIdentifier = extra.parseVariableIdentifier;\n        }\n\n        if (typeof extra.scanRegExp === 'function') {\n            advance = extra.advance;\n            scanRegExp = extra.scanRegExp;\n        }\n    }\n\n    function stringToArray(str) {\n        var length = str.length,\n            result = [],\n            i;\n        for (i = 0; i < length; ++i) {\n            result[i] = str.charAt(i);\n        }\n        return result;\n    }\n\n    function parse(code, options) {\n        var program, toString;\n\n        toString = String;\n        if (typeof code !== 'string' && !(code instanceof String)) {\n            code = toString(code);\n        }\n\n        source = code;\n        index = 0;\n        lineNumber = (source.length > 0) ? 1 : 0;\n        lineStart = 0;\n        length = source.length;\n        buffer = null;\n        state = {\n            allowIn: true,\n            labelSet: {},\n            inFunctionBody: false,\n            inIteration: false,\n            inSwitch: false\n        };\n\n        extra = {};\n        if (typeof options !== 'undefined') {\n            extra.range = (typeof options.range === 'boolean') && options.range;\n            extra.loc = (typeof options.loc === 'boolean') && options.loc;\n            extra.raw = (typeof options.raw === 'boolean') && options.raw;\n            if (typeof options.tokens === 'boolean' && options.tokens) {\n                extra.tokens = [];\n            }\n            if (typeof options.comment === 'boolean' && options.comment) {\n                extra.comments = [];\n            }\n            if (typeof options.tolerant === 'boolean' && options.tolerant) {\n                extra.errors = [];\n            }\n        }\n\n        if (length > 0) {\n            if (typeof source[0] === 'undefined') {\n                // Try first to convert to a string. This is good as fast path\n                // for old IE which understands string indexing for string\n                // literals only and not for string object.\n                if (code instanceof String) {\n                    source = code.valueOf();\n                }\n\n                // Force accessing the characters via an array.\n                if (typeof source[0] === 'undefined') {\n                    source = stringToArray(code);\n                }\n            }\n        }\n\n        patch();\n        try {\n            program = parseProgram();\n            if (typeof extra.comments !== 'undefined') {\n                filterCommentLocation();\n                program.comments = extra.comments;\n            }\n            if (typeof extra.tokens !== 'undefined') {\n                filterTokenLocation();\n                program.tokens = extra.tokens;\n            }\n            if (typeof extra.errors !== 'undefined') {\n                program.errors = extra.errors;\n            }\n            if (extra.range || extra.loc) {\n                program.body = filterGroup(program.body);\n            }\n        } catch (e) {\n            throw e;\n        } finally {\n            unpatch();\n            extra = {};\n        }\n\n        return program;\n    }\n\n    // Sync with package.json.\n    exports.version = '1.0.4';\n\n    exports.parse = parse;\n\n    // Deep copy.\n    exports.Syntax = (function () {\n        var name, types = {};\n\n        if (typeof Object.create === 'function') {\n            types = Object.create(null);\n        }\n\n        for (name in Syntax) {\n            if (Syntax.hasOwnProperty(name)) {\n                types[name] = Syntax[name];\n            }\n        }\n\n        if (typeof Object.freeze === 'function') {\n            Object.freeze(types);\n        }\n\n        return types;\n    }());\n\n}));\n/* vim: set sw=4 ts=4 et tw=80 : */\n", "/*\n  Copyright (C) 2012 Yusuke Suzuki <utatane.tea@gmail.com>\n  Copyright (C) 2012 Ariya Hidayat <ariya.hidayat@gmail.com>\n\n  Redistribution and use in source and binary forms, with or without\n  modification, are permitted provided that the following conditions are met:\n\n    * Redistributions of source code must retain the above copyright\n      notice, this list of conditions and the following disclaimer.\n    * Redistributions in binary form must reproduce the above copyright\n      notice, this list of conditions and the following disclaimer in the\n      documentation and/or other materials provided with the distribution.\n\n  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n  ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY\n  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n*/\n\n/*jslint bitwise:true */\n/*global exports:true, define:true, window:true */\n(function (factory) {\n    'use strict';\n\n    // Universal Module Definition (UMD) to support AMD, CommonJS/Node.js,\n    // and plain browser loading,\n    if (typeof define === 'function' && define.amd) {\n        define(['exports'], factory);\n    } else if (typeof exports !== 'undefined') {\n        factory(exports);\n    } else {\n        factory((window.estraverse = {}));\n    }\n}(function (exports) {\n    'use strict';\n\n    var Syntax,\n        isArray,\n        VisitorOption,\n        VisitorKeys,\n        wrappers;\n\n    Syntax = {\n        AssignmentExpression: 'AssignmentExpression',\n        ArrayExpression: 'ArrayExpression',\n        BlockStatement: 'BlockStatement',\n        BinaryExpression: 'BinaryExpression',\n        BreakStatement: 'BreakStatement',\n        CallExpression: 'CallExpression',\n        CatchClause: 'CatchClause',\n        ConditionalExpression: 'ConditionalExpression',\n        ContinueStatement: 'ContinueStatement',\n        DebuggerStatement: 'DebuggerStatement',\n        DirectiveStatement: 'DirectiveStatement',\n        DoWhileStatement: 'DoWhileStatement',\n        EmptyStatement: 'EmptyStatement',\n        ExpressionStatement: 'ExpressionStatement',\n        ForStatement: 'ForStatement',\n        ForInStatement: 'ForInStatement',\n        FunctionDeclaration: 'FunctionDeclaration',\n        FunctionExpression: 'FunctionExpression',\n        Identifier: 'Identifier',\n        IfStatement: 'IfStatement',\n        Literal: 'Literal',\n        LabeledStatement: 'LabeledStatement',\n        LogicalExpression: 'LogicalExpression',\n        MemberExpression: 'MemberExpression',\n        NewExpression: 'NewExpression',\n        ObjectExpression: 'ObjectExpression',\n        Program: 'Program',\n        Property: 'Property',\n        ReturnStatement: 'ReturnStatement',\n        SequenceExpression: 'SequenceExpression',\n        SwitchStatement: 'SwitchStatement',\n        SwitchCase: 'SwitchCase',\n        ThisExpression: 'ThisExpression',\n        ThrowStatement: 'ThrowStatement',\n        TryStatement: 'TryStatement',\n        UnaryExpression: 'UnaryExpression',\n        UpdateExpression: 'UpdateExpression',\n        VariableDeclaration: 'VariableDeclaration',\n        VariableDeclarator: 'VariableDeclarator',\n        WhileStatement: 'WhileStatement',\n        WithStatement: 'WithStatement'\n    };\n\n    isArray = Array.isArray;\n    if (!isArray) {\n        isArray = function isArray(array) {\n            return Object.prototype.toString.call(array) === '[object Array]';\n        };\n    }\n\n    VisitorKeys = {\n        AssignmentExpression: ['left', 'right'],\n        ArrayExpression: ['elements'],\n        BlockStatement: ['body'],\n        BinaryExpression: ['left', 'right'],\n        BreakStatement: ['label'],\n        CallExpression: ['callee', 'arguments'],\n        CatchClause: ['param', 'body'],\n        ConditionalExpression: ['test', 'consequent', 'alternate'],\n        ContinueStatement: ['label'],\n        DebuggerStatement: [],\n        DirectiveStatement: [],\n        DoWhileStatement: ['body', 'test'],\n        EmptyStatement: [],\n        ExpressionStatement: ['expression'],\n        ForStatement: ['init', 'test', 'update', 'body'],\n        ForInStatement: ['left', 'right', 'body'],\n        FunctionDeclaration: ['id', 'params', 'body'],\n        FunctionExpression: ['id', 'params', 'body'],\n        Identifier: [],\n        IfStatement: ['test', 'consequent', 'alternate'],\n        Literal: [],\n        LabeledStatement: ['label', 'body'],\n        LogicalExpression: ['left', 'right'],\n        MemberExpression: ['object', 'property'],\n        NewExpression: ['callee', 'arguments'],\n        ObjectExpression: ['properties'],\n        Program: ['body'],\n        Property: ['key', 'value'],\n        ReturnStatement: ['argument'],\n        SequenceExpression: ['expressions'],\n        SwitchStatement: ['discriminant', 'cases'],\n        SwitchCase: ['test', 'consequent'],\n        ThisExpression: [],\n        ThrowStatement: ['argument'],\n        TryStatement: ['block', 'handlers', 'finalizer'],\n        UnaryExpression: ['argument'],\n        UpdateExpression: ['argument'],\n        VariableDeclaration: ['declarations'],\n        VariableDeclarator: ['id', 'init'],\n        WhileStatement: ['test', 'body'],\n        WithStatement: ['object', 'body']\n    };\n\n    VisitorOption = {\n        Break: 1,\n        Skip: 2\n    };\n\n    wrappers = {\n        PropertyWrapper: 'Property'\n    };\n\n    function traverse(top, visitor) {\n        var worklist, leavelist, node, nodeType, ret, current, current2, candidates, candidate, marker = {};\n\n        worklist = [ top ];\n        leavelist = [ null ];\n\n        while (worklist.length) {\n            node = worklist.pop();\n            nodeType = node.type;\n\n            if (node === marker) {\n                node = leavelist.pop();\n                if (visitor.leave) {\n                    ret = visitor.leave(node, leavelist[leavelist.length - 1]);\n                } else {\n                    ret = undefined;\n                }\n                if (ret === VisitorOption.Break) {\n                    return;\n                }\n            } else if (node) {\n                if (wrappers.hasOwnProperty(nodeType)) {\n                    node = node.node;\n                    nodeType = wrappers[nodeType];\n                }\n\n                if (visitor.enter) {\n                    ret = visitor.enter(node, leavelist[leavelist.length - 1]);\n                } else {\n                    ret = undefined;\n                }\n\n                if (ret === VisitorOption.Break) {\n                    return;\n                }\n\n                worklist.push(marker);\n                leavelist.push(node);\n\n                if (ret !== VisitorOption.Skip) {\n                    candidates = VisitorKeys[nodeType];\n                    current = candidates.length;\n                    while ((current -= 1) >= 0) {\n                        candidate = node[candidates[current]];\n                        if (candidate) {\n                            if (isArray(candidate)) {\n                                current2 = candidate.length;\n                                while ((current2 -= 1) >= 0) {\n                                    if (candidate[current2]) {\n                                        if(nodeType === Syntax.ObjectExpression && 'properties' === candidates[current] && null == candidates[current].type) {\n                                            worklist.push({type: 'PropertyWrapper', node: candidate[current2]});\n                                        } else {\n                                            worklist.push(candidate[current2]);\n                                        }\n                                    }\n                                }\n                            } else {\n                                worklist.push(candidate);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    function replace(top, visitor) {\n        var worklist, leavelist, node, nodeType, target, tuple, ret, current, current2, candidates, candidate, marker = {}, result;\n\n        result = {\n            top: top\n        };\n\n        tuple = [ top, result, 'top' ];\n        worklist = [ tuple ];\n        leavelist = [ tuple ];\n\n        function notify(v) {\n            ret = v;\n        }\n\n        while (worklist.length) {\n            tuple = worklist.pop();\n\n            if (tuple === marker) {\n                tuple = leavelist.pop();\n                ret = undefined;\n                if (visitor.leave) {\n                    node = tuple[0];\n                    target = visitor.leave(tuple[0], leavelist[leavelist.length - 1][0], notify);\n                    if (target !== undefined) {\n                        node = target;\n                    }\n                    tuple[1][tuple[2]] = node;\n                }\n                if (ret === VisitorOption.Break) {\n                    return result.top;\n                }\n            } else if (tuple[0]) {\n                ret = undefined;\n                node = tuple[0];\n\n                nodeType = node.type;\n                if (wrappers.hasOwnProperty(nodeType)) {\n                    tuple[0] = node = node.node;\n                    nodeType = wrappers[nodeType];\n                }\n\n                if (visitor.enter) {\n                    target = visitor.enter(tuple[0], leavelist[leavelist.length - 1][0], notify);\n                    if (target !== undefined) {\n                        node = target;\n                    }\n                    tuple[1][tuple[2]] = node;\n                    tuple[0] = node;\n                }\n\n                if (ret === VisitorOption.Break) {\n                    return result.top;\n                }\n\n                if (tuple[0]) {\n                    worklist.push(marker);\n                    leavelist.push(tuple);\n\n                    if (ret !== VisitorOption.Skip) {\n                        candidates = VisitorKeys[nodeType];\n                        current = candidates.length;\n                        while ((current -= 1) >= 0) {\n                            candidate = node[candidates[current]];\n                            if (candidate) {\n                                if (isArray(candidate)) {\n                                    current2 = candidate.length;\n                                    while ((current2 -= 1) >= 0) {\n                                        if (candidate[current2]) {\n                                            if(nodeType === Syntax.ObjectExpression && 'properties' === candidates[current] && null == candidates[current].type) {\n                                                worklist.push([{type: 'PropertyWrapper', node: candidate[current2]}, candidate, current2]);\n                                            } else {\n                                                worklist.push([candidate[current2], candidate, current2]);\n                                            }\n                                        }\n                                    }\n                                } else {\n                                    worklist.push([candidate, node, candidates[current]]);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        return result.top;\n    }\n\n    exports.version = '0.0.4';\n    exports.Syntax = Syntax;\n    exports.traverse = traverse;\n    exports.replace = replace;\n    exports.VisitorKeys = VisitorKeys;\n    exports.VisitorOption = VisitorOption;\n}));\n/* vim: set sw=4 ts=4 et tw=80 : */\n", "/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\n\nconst intToCharMap = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\".split(\"\");\n\n/**\n * Encode an integer in the range of 0 to 63 to a single base 64 digit.\n */\nexports.encode = function(number) {\n  if (0 <= number && number < intToCharMap.length) {\n    return intToCharMap[number];\n  }\n  throw new TypeError(\"Must be between 0 and 63: \" + number);\n};\n", "/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n *\n * Based on the Base 64 VLQ implementation in Closure Compiler:\n * https://code.google.com/p/closure-compiler/source/browse/trunk/src/com/google/debugging/sourcemap/Base64VLQ.java\n *\n * Copyright 2011 The Closure Compiler Authors. All rights reserved.\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n *  * Redistributions of source code must retain the above copyright\n *    notice, this list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above\n *    copyright notice, this list of conditions and the following\n *    disclaimer in the documentation and/or other materials provided\n *    with the distribution.\n *  * Neither the name of Google Inc. nor the names of its\n *    contributors may be used to endorse or promote products derived\n *    from this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nconst base64 = require(\"./base64\");\n\n// A single base 64 digit can contain 6 bits of data. For the base 64 variable\n// length quantities we use in the source map spec, the first bit is the sign,\n// the next four bits are the actual value, and the 6th bit is the\n// continuation bit. The continuation bit tells us whether there are more\n// digits in this value following this digit.\n//\n//   Continuation\n//   |    Sign\n//   |    |\n//   V    V\n//   101011\n\nconst VLQ_BASE_SHIFT = 5;\n\n// binary: 100000\nconst VLQ_BASE = 1 << VLQ_BASE_SHIFT;\n\n// binary: 011111\nconst VLQ_BASE_MASK = VLQ_BASE - 1;\n\n// binary: 100000\nconst VLQ_CONTINUATION_BIT = VLQ_BASE;\n\n/**\n * Converts from a two-complement value to a value where the sign bit is\n * placed in the least significant bit.  For example, as decimals:\n *   1 becomes 2 (10 binary), -1 becomes 3 (11 binary)\n *   2 becomes 4 (100 binary), -2 becomes 5 (101 binary)\n */\nfunction toVLQSigned(aValue) {\n  return aValue < 0\n    ? ((-aValue) << 1) + 1\n    : (aValue << 1) + 0;\n}\n\n/**\n * Converts to a two-complement value from a value where the sign bit is\n * placed in the least significant bit.  For example, as decimals:\n *   2 (10 binary) becomes 1, 3 (11 binary) becomes -1\n *   4 (100 binary) becomes 2, 5 (101 binary) becomes -2\n */\n// eslint-disable-next-line no-unused-vars\nfunction fromVLQSigned(aValue) {\n  const isNegative = (aValue & 1) === 1;\n  const shifted = aValue >> 1;\n  return isNegative\n    ? -shifted\n    : shifted;\n}\n\n/**\n * Returns the base 64 VLQ encoded value.\n */\nexports.encode = function base64VLQ_encode(aValue) {\n  let encoded = \"\";\n  let digit;\n\n  let vlq = toVLQSigned(aValue);\n\n  do {\n    digit = vlq & VLQ_BASE_MASK;\n    vlq >>>= VLQ_BASE_SHIFT;\n    if (vlq > 0) {\n      // There are still more digits in this value, so we must make sure the\n      // continuation bit is marked.\n      digit |= VLQ_CONTINUATION_BIT;\n    }\n    encoded += base64.encode(digit);\n  } while (vlq > 0);\n\n  return encoded;\n};\n", "/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\n\n/**\n * This is a helper function for getting values from parameter/options\n * objects.\n *\n * @param args The object we are extracting values from\n * @param name The name of the property we are getting.\n * @param defaultValue An optional value to return if the property is missing\n * from the object. If this is not specified and the property is missing, an\n * error will be thrown.\n */\nfunction getArg(aArgs, aName, aDefaultValue) {\n  if (aName in aArgs) {\n    return aArgs[aName];\n  } else if (arguments.length === 3) {\n    return aDefaultValue;\n  }\n    throw new Error('\"' + aName + '\" is a required argument.');\n\n}\nexports.getArg = getArg;\n\nconst urlRegexp = /^(?:([\\w+\\-.]+):)?\\/\\/(?:(\\w+:\\w+)@)?([\\w.-]*)(?::(\\d+))?(.*)$/;\nconst dataUrlRegexp = /^data:.+\\,.+$/;\n\nfunction urlParse(aUrl) {\n  const match = aUrl.match(urlRegexp);\n  if (!match) {\n    return null;\n  }\n  return {\n    scheme: match[1],\n    auth: match[2],\n    host: match[3],\n    port: match[4],\n    path: match[5]\n  };\n}\nexports.urlParse = urlParse;\n\nfunction urlGenerate(aParsedUrl) {\n  let url = \"\";\n  if (aParsedUrl.scheme) {\n    url += aParsedUrl.scheme + \":\";\n  }\n  url += \"//\";\n  if (aParsedUrl.auth) {\n    url += aParsedUrl.auth + \"@\";\n  }\n  if (aParsedUrl.host) {\n    url += aParsedUrl.host;\n  }\n  if (aParsedUrl.port) {\n    url += \":\" + aParsedUrl.port;\n  }\n  if (aParsedUrl.path) {\n    url += aParsedUrl.path;\n  }\n  return url;\n}\nexports.urlGenerate = urlGenerate;\n\nconst MAX_CACHED_INPUTS = 32;\n\n/**\n * Takes some function `f(input) -> result` and returns a memoized version of\n * `f`.\n *\n * We keep at most `MAX_CACHED_INPUTS` memoized results of `f` alive. The\n * memoization is a dumb-simple, linear least-recently-used cache.\n */\nfunction lruMemoize(f) {\n  const cache = [];\n\n  return function(input) {\n    for (let i = 0; i < cache.length; i++) {\n      if (cache[i].input === input) {\n        const temp = cache[0];\n        cache[0] = cache[i];\n        cache[i] = temp;\n        return cache[0].result;\n      }\n    }\n\n    const result = f(input);\n\n    cache.unshift({\n      input,\n      result,\n    });\n\n    if (cache.length > MAX_CACHED_INPUTS) {\n      cache.pop();\n    }\n\n    return result;\n  };\n}\n\n/**\n * Normalizes a path, or the path portion of a URL:\n *\n * - Replaces consecutive slashes with one slash.\n * - Removes unnecessary '.' parts.\n * - Removes unnecessary '<dir>/..' parts.\n *\n * Based on code in the Node.js 'path' core module.\n *\n * @param aPath The path or url to normalize.\n */\nconst normalize = lruMemoize(function normalize(aPath) {\n  let path = aPath;\n  const url = urlParse(aPath);\n  if (url) {\n    if (!url.path) {\n      return aPath;\n    }\n    path = url.path;\n  }\n  const isAbsolute = exports.isAbsolute(path);\n\n  // Split the path into parts between `/` characters. This is much faster than\n  // using `.split(/\\/+/g)`.\n  const parts = [];\n  let start = 0;\n  let i = 0;\n  while (true) {\n    start = i;\n    i = path.indexOf(\"/\", start);\n    if (i === -1) {\n      parts.push(path.slice(start));\n      break;\n    } else {\n      parts.push(path.slice(start, i));\n      while (i < path.length && path[i] === \"/\") {\n        i++;\n      }\n    }\n  }\n\n  let up = 0;\n  for (i = parts.length - 1; i >= 0; i--) {\n    const part = parts[i];\n    if (part === \".\") {\n      parts.splice(i, 1);\n    } else if (part === \"..\") {\n      up++;\n    } else if (up > 0) {\n      if (part === \"\") {\n        // The first part is blank if the path is absolute. Trying to go\n        // above the root is a no-op. Therefore we can remove all '..' parts\n        // directly after the root.\n        parts.splice(i + 1, up);\n        up = 0;\n      } else {\n        parts.splice(i, 2);\n        up--;\n      }\n    }\n  }\n  path = parts.join(\"/\");\n\n  if (path === \"\") {\n    path = isAbsolute ? \"/\" : \".\";\n  }\n\n  if (url) {\n    url.path = path;\n    return urlGenerate(url);\n  }\n  return path;\n});\nexports.normalize = normalize;\n\n/**\n * Joins two paths/URLs.\n *\n * @param aRoot The root path or URL.\n * @param aPath The path or URL to be joined with the root.\n *\n * - If aPath is a URL or a data URI, aPath is returned, unless aPath is a\n *   scheme-relative URL: Then the scheme of aRoot, if any, is prepended\n *   first.\n * - Otherwise aPath is a path. If aRoot is a URL, then its path portion\n *   is updated with the result and aRoot is returned. Otherwise the result\n *   is returned.\n *   - If aPath is absolute, the result is aPath.\n *   - Otherwise the two paths are joined with a slash.\n * - Joining for example 'http://' and 'www.example.com' is also supported.\n */\nfunction join(aRoot, aPath) {\n  if (aRoot === \"\") {\n    aRoot = \".\";\n  }\n  if (aPath === \"\") {\n    aPath = \".\";\n  }\n  const aPathUrl = urlParse(aPath);\n  const aRootUrl = urlParse(aRoot);\n  if (aRootUrl) {\n    aRoot = aRootUrl.path || \"/\";\n  }\n\n  // `join(foo, '//www.example.org')`\n  if (aPathUrl && !aPathUrl.scheme) {\n    if (aRootUrl) {\n      aPathUrl.scheme = aRootUrl.scheme;\n    }\n    return urlGenerate(aPathUrl);\n  }\n\n  if (aPathUrl || aPath.match(dataUrlRegexp)) {\n    return aPath;\n  }\n\n  // `join('http://', 'www.example.com')`\n  if (aRootUrl && !aRootUrl.host && !aRootUrl.path) {\n    aRootUrl.host = aPath;\n    return urlGenerate(aRootUrl);\n  }\n\n  const joined = aPath.charAt(0) === \"/\"\n    ? aPath\n    : normalize(aRoot.replace(/\\/+$/, \"\") + \"/\" + aPath);\n\n  if (aRootUrl) {\n    aRootUrl.path = joined;\n    return urlGenerate(aRootUrl);\n  }\n  return joined;\n}\nexports.join = join;\n\nexports.isAbsolute = function(aPath) {\n  return aPath.charAt(0) === \"/\" || urlRegexp.test(aPath);\n};\n\n/**\n * Make a path relative to a URL or another path.\n *\n * @param aRoot The root path or URL.\n * @param aPath The path or URL to be made relative to aRoot.\n */\nfunction relative(aRoot, aPath) {\n  if (aRoot === \"\") {\n    aRoot = \".\";\n  }\n\n  aRoot = aRoot.replace(/\\/$/, \"\");\n\n  // It is possible for the path to be above the root. In this case, simply\n  // checking whether the root is a prefix of the path won't work. Instead, we\n  // need to remove components from the root one by one, until either we find\n  // a prefix that fits, or we run out of components to remove.\n  let level = 0;\n  while (aPath.indexOf(aRoot + \"/\") !== 0) {\n    const index = aRoot.lastIndexOf(\"/\");\n    if (index < 0) {\n      return aPath;\n    }\n\n    // If the only part of the root that is left is the scheme (i.e. http://,\n    // file:///, etc.), one or more slashes (/), or simply nothing at all, we\n    // have exhausted all components, so the path is not relative to the root.\n    aRoot = aRoot.slice(0, index);\n    if (aRoot.match(/^([^\\/]+:\\/)?\\/*$/)) {\n      return aPath;\n    }\n\n    ++level;\n  }\n\n  // Make sure we add a \"../\" for each component we removed from the root.\n  return Array(level + 1).join(\"../\") + aPath.substr(aRoot.length + 1);\n}\nexports.relative = relative;\n\nconst supportsNullProto = (function() {\n  const obj = Object.create(null);\n  return !(\"__proto__\" in obj);\n}());\n\nfunction identity(s) {\n  return s;\n}\n\n/**\n * Because behavior goes wacky when you set `__proto__` on objects, we\n * have to prefix all the strings in our set with an arbitrary character.\n *\n * See https://github.com/mozilla/source-map/pull/31 and\n * https://github.com/mozilla/source-map/issues/30\n *\n * @param String aStr\n */\nfunction toSetString(aStr) {\n  if (isProtoString(aStr)) {\n    return \"$\" + aStr;\n  }\n\n  return aStr;\n}\nexports.toSetString = supportsNullProto ? identity : toSetString;\n\nfunction fromSetString(aStr) {\n  if (isProtoString(aStr)) {\n    return aStr.slice(1);\n  }\n\n  return aStr;\n}\nexports.fromSetString = supportsNullProto ? identity : fromSetString;\n\nfunction isProtoString(s) {\n  if (!s) {\n    return false;\n  }\n\n  const length = s.length;\n\n  if (length < 9 /* \"__proto__\".length */) {\n    return false;\n  }\n\n  /* eslint-disable no-multi-spaces */\n  if (s.charCodeAt(length - 1) !== 95  /* '_' */ ||\n      s.charCodeAt(length - 2) !== 95  /* '_' */ ||\n      s.charCodeAt(length - 3) !== 111 /* 'o' */ ||\n      s.charCodeAt(length - 4) !== 116 /* 't' */ ||\n      s.charCodeAt(length - 5) !== 111 /* 'o' */ ||\n      s.charCodeAt(length - 6) !== 114 /* 'r' */ ||\n      s.charCodeAt(length - 7) !== 112 /* 'p' */ ||\n      s.charCodeAt(length - 8) !== 95  /* '_' */ ||\n      s.charCodeAt(length - 9) !== 95  /* '_' */) {\n    return false;\n  }\n  /* eslint-enable no-multi-spaces */\n\n  for (let i = length - 10; i >= 0; i--) {\n    if (s.charCodeAt(i) !== 36 /* '$' */) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\n/**\n * Comparator between two mappings where the original positions are compared.\n *\n * Optionally pass in `true` as `onlyCompareGenerated` to consider two\n * mappings with the same original source/line/column, but different generated\n * line and column the same. Useful when searching for a mapping with a\n * stubbed out mapping.\n */\nfunction compareByOriginalPositions(mappingA, mappingB, onlyCompareOriginal) {\n  let cmp = strcmp(mappingA.source, mappingB.source);\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  cmp = mappingA.originalLine - mappingB.originalLine;\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  cmp = mappingA.originalColumn - mappingB.originalColumn;\n  if (cmp !== 0 || onlyCompareOriginal) {\n    return cmp;\n  }\n\n  cmp = mappingA.generatedColumn - mappingB.generatedColumn;\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  cmp = mappingA.generatedLine - mappingB.generatedLine;\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  return strcmp(mappingA.name, mappingB.name);\n}\nexports.compareByOriginalPositions = compareByOriginalPositions;\n\n/**\n * Comparator between two mappings with deflated source and name indices where\n * the generated positions are compared.\n *\n * Optionally pass in `true` as `onlyCompareGenerated` to consider two\n * mappings with the same generated line and column, but different\n * source/name/original line and column the same. Useful when searching for a\n * mapping with a stubbed out mapping.\n */\nfunction compareByGeneratedPositionsDeflated(mappingA, mappingB, onlyCompareGenerated) {\n  let cmp = mappingA.generatedLine - mappingB.generatedLine;\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  cmp = mappingA.generatedColumn - mappingB.generatedColumn;\n  if (cmp !== 0 || onlyCompareGenerated) {\n    return cmp;\n  }\n\n  cmp = strcmp(mappingA.source, mappingB.source);\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  cmp = mappingA.originalLine - mappingB.originalLine;\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  cmp = mappingA.originalColumn - mappingB.originalColumn;\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  return strcmp(mappingA.name, mappingB.name);\n}\nexports.compareByGeneratedPositionsDeflated = compareByGeneratedPositionsDeflated;\n\nfunction strcmp(aStr1, aStr2) {\n  if (aStr1 === aStr2) {\n    return 0;\n  }\n\n  if (aStr1 === null) {\n    return 1; // aStr2 !== null\n  }\n\n  if (aStr2 === null) {\n    return -1; // aStr1 !== null\n  }\n\n  if (aStr1 > aStr2) {\n    return 1;\n  }\n\n  return -1;\n}\n\n/**\n * Comparator between two mappings with inflated source and name strings where\n * the generated positions are compared.\n */\nfunction compareByGeneratedPositionsInflated(mappingA, mappingB) {\n  let cmp = mappingA.generatedLine - mappingB.generatedLine;\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  cmp = mappingA.generatedColumn - mappingB.generatedColumn;\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  cmp = strcmp(mappingA.source, mappingB.source);\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  cmp = mappingA.originalLine - mappingB.originalLine;\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  cmp = mappingA.originalColumn - mappingB.originalColumn;\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  return strcmp(mappingA.name, mappingB.name);\n}\nexports.compareByGeneratedPositionsInflated = compareByGeneratedPositionsInflated;\n\n/**\n * Strip any JSON XSSI avoidance prefix from the string (as documented\n * in the source maps specification), and then parse the string as\n * JSON.\n */\nfunction parseSourceMapInput(str) {\n  return JSON.parse(str.replace(/^\\)]}'[^\\n]*\\n/, \"\"));\n}\nexports.parseSourceMapInput = parseSourceMapInput;\n\n/**\n * Compute the URL of a source given the the source root, the source's\n * URL, and the source map's URL.\n */\nfunction computeSourceURL(sourceRoot, sourceURL, sourceMapURL) {\n  sourceURL = sourceURL || \"\";\n\n  if (sourceRoot) {\n    // This follows what Chrome does.\n    if (sourceRoot[sourceRoot.length - 1] !== \"/\" && sourceURL[0] !== \"/\") {\n      sourceRoot += \"/\";\n    }\n    // The spec says:\n    //   Line 4: An optional source root, useful for relocating source\n    //   files on a server or removing repeated values in the\n    //   “sources” entry.  This value is prepended to the individual\n    //   entries in the “source” field.\n    sourceURL = sourceRoot + sourceURL;\n  }\n\n  // Historically, SourceMapConsumer did not take the sourceMapURL as\n  // a parameter.  This mode is still somewhat supported, which is why\n  // this code block is conditional.  However, it's preferable to pass\n  // the source map URL to SourceMapConsumer, so that this function\n  // can implement the source URL resolution algorithm as outlined in\n  // the spec.  This block is basically the equivalent of:\n  //    new URL(sourceURL, sourceMapURL).toString()\n  // ... except it avoids using URL, which wasn't available in the\n  // older releases of node still supported by this library.\n  //\n  // The spec says:\n  //   If the sources are not absolute URLs after prepending of the\n  //   “sourceRoot”, the sources are resolved relative to the\n  //   SourceMap (like resolving script src in a html document).\n  if (sourceMapURL) {\n    const parsed = urlParse(sourceMapURL);\n    if (!parsed) {\n      throw new Error(\"sourceMapURL could not be parsed\");\n    }\n    if (parsed.path) {\n      // Strip the last path component, but keep the \"/\".\n      const index = parsed.path.lastIndexOf(\"/\");\n      if (index >= 0) {\n        parsed.path = parsed.path.substring(0, index + 1);\n      }\n    }\n    sourceURL = join(urlGenerate(parsed), sourceURL);\n  }\n\n  return normalize(sourceURL);\n}\nexports.computeSourceURL = computeSourceURL;\n", "/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\n\n/**\n * A data structure which is a combination of an array and a set. Adding a new\n * member is O(1), testing for membership is O(1), and finding the index of an\n * element is O(1). Removing elements from the set is not supported. Only\n * strings are supported for membership.\n */\nclass ArraySet {\n  constructor() {\n    this._array = [];\n    this._set = new Map();\n  }\n\n  /**\n   * Static method for creating ArraySet instances from an existing array.\n   */\n  static fromArray(aArray, aAllowDuplicates) {\n    const set = new ArraySet();\n    for (let i = 0, len = aArray.length; i < len; i++) {\n      set.add(aArray[i], aAllowDuplicates);\n    }\n    return set;\n  }\n\n  /**\n   * Return how many unique items are in this ArraySet. If duplicates have been\n   * added, than those do not count towards the size.\n   *\n   * @returns Number\n   */\n  size() {\n    return this._set.size;\n  }\n\n  /**\n   * Add the given string to this set.\n   *\n   * @param String aStr\n   */\n  add(aStr, aAllowDuplicates) {\n    const isDuplicate = this.has(aStr);\n    const idx = this._array.length;\n    if (!isDuplicate || aAllowDuplicates) {\n      this._array.push(aStr);\n    }\n    if (!isDuplicate) {\n      this._set.set(aStr, idx);\n    }\n  }\n\n  /**\n   * Is the given string a member of this set?\n   *\n   * @param String aStr\n   */\n  has(aStr) {\n      return this._set.has(aStr);\n  }\n\n  /**\n   * What is the index of the given string in the array?\n   *\n   * @param String aStr\n   */\n  indexOf(aStr) {\n    const idx = this._set.get(aStr);\n    if (idx >= 0) {\n        return idx;\n    }\n    throw new Error('\"' + aStr + '\" is not in the set.');\n  }\n\n  /**\n   * What is the element at the given index?\n   *\n   * @param Number aIdx\n   */\n  at(aIdx) {\n    if (aIdx >= 0 && aIdx < this._array.length) {\n      return this._array[aIdx];\n    }\n    throw new Error(\"No element indexed by \" + aIdx);\n  }\n\n  /**\n   * Returns the array representation of this set (which has the proper indices\n   * indicated by indexOf). Note that this is a copy of the internal array used\n   * for storing the members so that no one can mess with internal state.\n   */\n  toArray() {\n    return this._array.slice();\n  }\n}\nexports.ArraySet = ArraySet;\n", "/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2014 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\n\nconst util = require(\"./util\");\n\n/**\n * Determine whether mappingB is after mappingA with respect to generated\n * position.\n */\nfunction generatedPositionAfter(mappingA, mappingB) {\n  // Optimized for most common case\n  const lineA = mappingA.generatedLine;\n  const lineB = mappingB.generatedLine;\n  const columnA = mappingA.generatedColumn;\n  const columnB = mappingB.generatedColumn;\n  return lineB > lineA || lineB == lineA && columnB >= columnA ||\n         util.compareByGeneratedPositionsInflated(mappingA, mappingB) <= 0;\n}\n\n/**\n * A data structure to provide a sorted view of accumulated mappings in a\n * performance conscious manner. It trades a negligible overhead in general\n * case for a large speedup in case of mappings being added in order.\n */\nclass MappingList {\n  constructor() {\n    this._array = [];\n    this._sorted = true;\n    // Serves as infimum\n    this._last = {generatedLine: -1, generatedColumn: 0};\n  }\n\n  /**\n   * Iterate through internal items. This method takes the same arguments that\n   * `Array.prototype.forEach` takes.\n   *\n   * NOTE: The order of the mappings is NOT guaranteed.\n   */\n  unsortedForEach(aCallback, aThisArg) {\n    this._array.forEach(aCallback, aThisArg);\n  }\n\n  /**\n   * Add the given source mapping.\n   *\n   * @param Object aMapping\n   */\n  add(aMapping) {\n    if (generatedPositionAfter(this._last, aMapping)) {\n      this._last = aMapping;\n      this._array.push(aMapping);\n    } else {\n      this._sorted = false;\n      this._array.push(aMapping);\n    }\n  }\n\n  /**\n   * Returns the flat, sorted array of mappings. The mappings are sorted by\n   * generated position.\n   *\n   * WARNING: This method returns internal data without copying, for\n   * performance. The return value must NOT be mutated, and should be treated as\n   * an immutable borrow. If you want to take ownership, you must make your own\n   * copy.\n   */\n  toArray() {\n    if (!this._sorted) {\n      this._array.sort(util.compareByGeneratedPositionsInflated);\n      this._sorted = true;\n    }\n    return this._array;\n  }\n}\n\nexports.MappingList = MappingList;\n", "/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\n\nconst base64VLQ = require(\"./base64-vlq\");\nconst util = require(\"./util\");\nconst ArraySet = require(\"./array-set\").ArraySet;\nconst MappingList = require(\"./mapping-list\").MappingList;\n\n/**\n * An instance of the SourceMapGenerator represents a source map which is\n * being built incrementally. You may pass an object with the following\n * properties:\n *\n *   - file: The filename of the generated source.\n *   - sourceRoot: A root for all relative URLs in this source map.\n */\nclass SourceMapGenerator {\n  constructor(aArgs) {\n    if (!aArgs) {\n      aArgs = {};\n    }\n    this._file = util.getArg(aArgs, \"file\", null);\n    this._sourceRoot = util.getArg(aArgs, \"sourceRoot\", null);\n    this._skipValidation = util.getArg(aArgs, \"skipValidation\", false);\n    this._sources = new ArraySet();\n    this._names = new ArraySet();\n    this._mappings = new MappingList();\n    this._sourcesContents = null;\n  }\n\n  /**\n   * Creates a new SourceMapGenerator based on a SourceMapConsumer\n   *\n   * @param aSourceMapConsumer The SourceMap.\n   */\n  static fromSourceMap(aSourceMapConsumer) {\n    const sourceRoot = aSourceMapConsumer.sourceRoot;\n    const generator = new SourceMapGenerator({\n      file: aSourceMapConsumer.file,\n      sourceRoot\n    });\n    aSourceMapConsumer.eachMapping(function(mapping) {\n      const newMapping = {\n        generated: {\n          line: mapping.generatedLine,\n          column: mapping.generatedColumn\n        }\n      };\n\n      if (mapping.source != null) {\n        newMapping.source = mapping.source;\n        if (sourceRoot != null) {\n          newMapping.source = util.relative(sourceRoot, newMapping.source);\n        }\n\n        newMapping.original = {\n          line: mapping.originalLine,\n          column: mapping.originalColumn\n        };\n\n        if (mapping.name != null) {\n          newMapping.name = mapping.name;\n        }\n      }\n\n      generator.addMapping(newMapping);\n    });\n    aSourceMapConsumer.sources.forEach(function(sourceFile) {\n      let sourceRelative = sourceFile;\n      if (sourceRoot !== null) {\n        sourceRelative = util.relative(sourceRoot, sourceFile);\n      }\n\n      if (!generator._sources.has(sourceRelative)) {\n        generator._sources.add(sourceRelative);\n      }\n\n      const content = aSourceMapConsumer.sourceContentFor(sourceFile);\n      if (content != null) {\n        generator.setSourceContent(sourceFile, content);\n      }\n    });\n    return generator;\n  }\n\n  /**\n   * Add a single mapping from original source line and column to the generated\n   * source's line and column for this source map being created. The mapping\n   * object should have the following properties:\n   *\n   *   - generated: An object with the generated line and column positions.\n   *   - original: An object with the original line and column positions.\n   *   - source: The original source file (relative to the sourceRoot).\n   *   - name: An optional original token name for this mapping.\n   */\n  addMapping(aArgs) {\n    const generated = util.getArg(aArgs, \"generated\");\n    const original = util.getArg(aArgs, \"original\", null);\n    let source = util.getArg(aArgs, \"source\", null);\n    let name = util.getArg(aArgs, \"name\", null);\n\n    if (!this._skipValidation) {\n      this._validateMapping(generated, original, source, name);\n    }\n\n    if (source != null) {\n      source = String(source);\n      if (!this._sources.has(source)) {\n        this._sources.add(source);\n      }\n    }\n\n    if (name != null) {\n      name = String(name);\n      if (!this._names.has(name)) {\n        this._names.add(name);\n      }\n    }\n\n    this._mappings.add({\n      generatedLine: generated.line,\n      generatedColumn: generated.column,\n      originalLine: original != null && original.line,\n      originalColumn: original != null && original.column,\n      source,\n      name\n    });\n  }\n\n  /**\n   * Set the source content for a source file.\n   */\n  setSourceContent(aSourceFile, aSourceContent) {\n    let source = aSourceFile;\n    if (this._sourceRoot != null) {\n      source = util.relative(this._sourceRoot, source);\n    }\n\n    if (aSourceContent != null) {\n      // Add the source content to the _sourcesContents map.\n      // Create a new _sourcesContents map if the property is null.\n      if (!this._sourcesContents) {\n        this._sourcesContents = Object.create(null);\n      }\n      this._sourcesContents[util.toSetString(source)] = aSourceContent;\n    } else if (this._sourcesContents) {\n      // Remove the source file from the _sourcesContents map.\n      // If the _sourcesContents map is empty, set the property to null.\n      delete this._sourcesContents[util.toSetString(source)];\n      if (Object.keys(this._sourcesContents).length === 0) {\n        this._sourcesContents = null;\n      }\n    }\n  }\n\n  /**\n   * Applies the mappings of a sub-source-map for a specific source file to the\n   * source map being generated. Each mapping to the supplied source file is\n   * rewritten using the supplied source map. Note: The resolution for the\n   * resulting mappings is the minimium of this map and the supplied map.\n   *\n   * @param aSourceMapConsumer The source map to be applied.\n   * @param aSourceFile Optional. The filename of the source file.\n   *        If omitted, SourceMapConsumer's file property will be used.\n   * @param aSourceMapPath Optional. The dirname of the path to the source map\n   *        to be applied. If relative, it is relative to the SourceMapConsumer.\n   *        This parameter is needed when the two source maps aren't in the same\n   *        directory, and the source map to be applied contains relative source\n   *        paths. If so, those relative source paths need to be rewritten\n   *        relative to the SourceMapGenerator.\n   */\n  applySourceMap(aSourceMapConsumer, aSourceFile, aSourceMapPath) {\n    let sourceFile = aSourceFile;\n    // If aSourceFile is omitted, we will use the file property of the SourceMap\n    if (aSourceFile == null) {\n      if (aSourceMapConsumer.file == null) {\n        throw new Error(\n          \"SourceMapGenerator.prototype.applySourceMap requires either an explicit source file, \" +\n          'or the source map\\'s \"file\" property. Both were omitted.'\n        );\n      }\n      sourceFile = aSourceMapConsumer.file;\n    }\n    const sourceRoot = this._sourceRoot;\n    // Make \"sourceFile\" relative if an absolute Url is passed.\n    if (sourceRoot != null) {\n      sourceFile = util.relative(sourceRoot, sourceFile);\n    }\n    // Applying the SourceMap can add and remove items from the sources and\n    // the names array.\n    const newSources = this._mappings.toArray().length > 0\n      ? new ArraySet()\n      : this._sources;\n    const newNames = new ArraySet();\n\n    // Find mappings for the \"sourceFile\"\n    this._mappings.unsortedForEach(function(mapping) {\n      if (mapping.source === sourceFile && mapping.originalLine != null) {\n        // Check if it can be mapped by the source map, then update the mapping.\n        const original = aSourceMapConsumer.originalPositionFor({\n          line: mapping.originalLine,\n          column: mapping.originalColumn\n        });\n        if (original.source != null) {\n          // Copy mapping\n          mapping.source = original.source;\n          if (aSourceMapPath != null) {\n            mapping.source = util.join(aSourceMapPath, mapping.source);\n          }\n          if (sourceRoot != null) {\n            mapping.source = util.relative(sourceRoot, mapping.source);\n          }\n          mapping.originalLine = original.line;\n          mapping.originalColumn = original.column;\n          if (original.name != null) {\n            mapping.name = original.name;\n          }\n        }\n      }\n\n      const source = mapping.source;\n      if (source != null && !newSources.has(source)) {\n        newSources.add(source);\n      }\n\n      const name = mapping.name;\n      if (name != null && !newNames.has(name)) {\n        newNames.add(name);\n      }\n\n    }, this);\n    this._sources = newSources;\n    this._names = newNames;\n\n    // Copy sourcesContents of applied map.\n    aSourceMapConsumer.sources.forEach(function(srcFile) {\n      const content = aSourceMapConsumer.sourceContentFor(srcFile);\n      if (content != null) {\n        if (aSourceMapPath != null) {\n          srcFile = util.join(aSourceMapPath, srcFile);\n        }\n        if (sourceRoot != null) {\n          srcFile = util.relative(sourceRoot, srcFile);\n        }\n        this.setSourceContent(srcFile, content);\n      }\n    }, this);\n  }\n\n  /**\n   * A mapping can have one of the three levels of data:\n   *\n   *   1. Just the generated position.\n   *   2. The Generated position, original position, and original source.\n   *   3. Generated and original position, original source, as well as a name\n   *      token.\n   *\n   * To maintain consistency, we validate that any new mapping being added falls\n   * in to one of these categories.\n   */\n  _validateMapping(aGenerated, aOriginal, aSource, aName) {\n    // When aOriginal is truthy but has empty values for .line and .column,\n    // it is most likely a programmer error. In this case we throw a very\n    // specific error message to try to guide them the right way.\n    // For example: https://github.com/Polymer/polymer-bundler/pull/519\n    if (aOriginal && typeof aOriginal.line !== \"number\" && typeof aOriginal.column !== \"number\") {\n        throw new Error(\n            \"original.line and original.column are not numbers -- you probably meant to omit \" +\n            \"the original mapping entirely and only map the generated position. If so, pass \" +\n            \"null for the original mapping instead of an object with empty or null values.\"\n        );\n    }\n\n    if (aGenerated && \"line\" in aGenerated && \"column\" in aGenerated\n        && aGenerated.line > 0 && aGenerated.column >= 0\n        && !aOriginal && !aSource && !aName) {\n      // Case 1.\n\n    } else if (aGenerated && \"line\" in aGenerated && \"column\" in aGenerated\n             && aOriginal && \"line\" in aOriginal && \"column\" in aOriginal\n             && aGenerated.line > 0 && aGenerated.column >= 0\n             && aOriginal.line > 0 && aOriginal.column >= 0\n             && aSource) {\n      // Cases 2 and 3.\n\n    } else {\n      throw new Error(\"Invalid mapping: \" + JSON.stringify({\n        generated: aGenerated,\n        source: aSource,\n        original: aOriginal,\n        name: aName\n      }));\n    }\n  }\n\n  /**\n   * Serialize the accumulated mappings in to the stream of base 64 VLQs\n   * specified by the source map format.\n   */\n  _serializeMappings() {\n    let previousGeneratedColumn = 0;\n    let previousGeneratedLine = 1;\n    let previousOriginalColumn = 0;\n    let previousOriginalLine = 0;\n    let previousName = 0;\n    let previousSource = 0;\n    let result = \"\";\n    let next;\n    let mapping;\n    let nameIdx;\n    let sourceIdx;\n\n    const mappings = this._mappings.toArray();\n    for (let i = 0, len = mappings.length; i < len; i++) {\n      mapping = mappings[i];\n      next = \"\";\n\n      if (mapping.generatedLine !== previousGeneratedLine) {\n        previousGeneratedColumn = 0;\n        while (mapping.generatedLine !== previousGeneratedLine) {\n          next += \";\";\n          previousGeneratedLine++;\n        }\n      } else if (i > 0) {\n        if (!util.compareByGeneratedPositionsInflated(mapping, mappings[i - 1])) {\n          continue;\n        }\n        next += \",\";\n      }\n\n      next += base64VLQ.encode(mapping.generatedColumn\n                                 - previousGeneratedColumn);\n      previousGeneratedColumn = mapping.generatedColumn;\n\n      if (mapping.source != null) {\n        sourceIdx = this._sources.indexOf(mapping.source);\n        next += base64VLQ.encode(sourceIdx - previousSource);\n        previousSource = sourceIdx;\n\n        // lines are stored 0-based in SourceMap spec version 3\n        next += base64VLQ.encode(mapping.originalLine - 1\n                                   - previousOriginalLine);\n        previousOriginalLine = mapping.originalLine - 1;\n\n        next += base64VLQ.encode(mapping.originalColumn\n                                   - previousOriginalColumn);\n        previousOriginalColumn = mapping.originalColumn;\n\n        if (mapping.name != null) {\n          nameIdx = this._names.indexOf(mapping.name);\n          next += base64VLQ.encode(nameIdx - previousName);\n          previousName = nameIdx;\n        }\n      }\n\n      result += next;\n    }\n\n    return result;\n  }\n\n  _generateSourcesContent(aSources, aSourceRoot) {\n    return aSources.map(function(source) {\n      if (!this._sourcesContents) {\n        return null;\n      }\n      if (aSourceRoot != null) {\n        source = util.relative(aSourceRoot, source);\n      }\n      const key = util.toSetString(source);\n      return Object.prototype.hasOwnProperty.call(this._sourcesContents, key)\n        ? this._sourcesContents[key]\n        : null;\n    }, this);\n  }\n\n  /**\n   * Externalize the source map.\n   */\n  toJSON() {\n    const map = {\n      version: this._version,\n      sources: this._sources.toArray(),\n      names: this._names.toArray(),\n      mappings: this._serializeMappings()\n    };\n    if (this._file != null) {\n      map.file = this._file;\n    }\n    if (this._sourceRoot != null) {\n      map.sourceRoot = this._sourceRoot;\n    }\n    if (this._sourcesContents) {\n      map.sourcesContent = this._generateSourcesContent(map.sources, map.sourceRoot);\n    }\n\n    return map;\n  }\n\n  /**\n   * Render the source map being generated to a string.\n   */\n  toString() {\n    return JSON.stringify(this.toJSON());\n  }\n}\n\nSourceMapGenerator.prototype._version = 3;\nexports.SourceMapGenerator = SourceMapGenerator;\n", "/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\n\nexports.GREATEST_LOWER_BOUND = 1;\nexports.LEAST_UPPER_BOUND = 2;\n\n/**\n * Recursive implementation of binary search.\n *\n * @param aLow Indices here and lower do not contain the needle.\n * @param aHigh Indices here and higher do not contain the needle.\n * @param aNeedle The element being searched for.\n * @param aHaystack The non-empty array being searched.\n * @param aCompare Function which takes two elements and returns -1, 0, or 1.\n * @param aBias Either 'binarySearch.GREATEST_LOWER_BOUND' or\n *     'binarySearch.LEAST_UPPER_BOUND'. Specifies whether to return the\n *     closest element that is smaller than or greater than the one we are\n *     searching for, respectively, if the exact element cannot be found.\n */\nfunction recursiveSearch(aLow, aHigh, aNeedle, aHaystack, aCompare, aBias) {\n  // This function terminates when one of the following is true:\n  //\n  //   1. We find the exact element we are looking for.\n  //\n  //   2. We did not find the exact element, but we can return the index of\n  //      the next-closest element.\n  //\n  //   3. We did not find the exact element, and there is no next-closest\n  //      element than the one we are searching for, so we return -1.\n  const mid = Math.floor((aHigh - aLow) / 2) + aLow;\n  const cmp = aCompare(aNeedle, aHaystack[mid], true);\n  if (cmp === 0) {\n    // Found the element we are looking for.\n    return mid;\n  } else if (cmp > 0) {\n    // Our needle is greater than aHaystack[mid].\n    if (aHigh - mid > 1) {\n      // The element is in the upper half.\n      return recursiveSearch(mid, aHigh, aNeedle, aHaystack, aCompare, aBias);\n    }\n\n    // The exact needle element was not found in this haystack. Determine if\n    // we are in termination case (3) or (2) and return the appropriate thing.\n    if (aBias == exports.LEAST_UPPER_BOUND) {\n      return aHigh < aHaystack.length ? aHigh : -1;\n    }\n    return mid;\n  }\n\n  // Our needle is less than aHaystack[mid].\n  if (mid - aLow > 1) {\n    // The element is in the lower half.\n    return recursiveSearch(aLow, mid, aNeedle, aHaystack, aCompare, aBias);\n  }\n\n  // we are in termination case (3) or (2) and return the appropriate thing.\n  if (aBias == exports.LEAST_UPPER_BOUND) {\n    return mid;\n  }\n  return aLow < 0 ? -1 : aLow;\n}\n\n/**\n * This is an implementation of binary search which will always try and return\n * the index of the closest element if there is no exact hit. This is because\n * mappings between original and generated line/col pairs are single points,\n * and there is an implicit region between each of them, so a miss just means\n * that you aren't on the very start of a region.\n *\n * @param aNeedle The element you are looking for.\n * @param aHaystack The array that is being searched.\n * @param aCompare A function which takes the needle and an element in the\n *     array and returns -1, 0, or 1 depending on whether the needle is less\n *     than, equal to, or greater than the element, respectively.\n * @param aBias Either 'binarySearch.GREATEST_LOWER_BOUND' or\n *     'binarySearch.LEAST_UPPER_BOUND'. Specifies whether to return the\n *     closest element that is smaller than or greater than the one we are\n *     searching for, respectively, if the exact element cannot be found.\n *     Defaults to 'binarySearch.GREATEST_LOWER_BOUND'.\n */\nexports.search = function search(aNeedle, aHaystack, aCompare, aBias) {\n  if (aHaystack.length === 0) {\n    return -1;\n  }\n\n  let index = recursiveSearch(-1, aHaystack.length, aNeedle, aHaystack,\n                              aCompare, aBias || exports.GREATEST_LOWER_BOUND);\n  if (index < 0) {\n    return -1;\n  }\n\n  // We have found either the exact element, or the next-closest element than\n  // the one we are searching for. However, there may be more than one such\n  // element. Make sure we always return the smallest of these.\n  while (index - 1 >= 0) {\n    if (aCompare(aHaystack[index], aHaystack[index - 1], true) !== 0) {\n      break;\n    }\n    --index;\n  }\n\n  return index;\n};\n", "/* Determine browser vs node environment by testing the default top level context. Solution courtesy of: https://stackoverflow.com/questions/17575790/environment-detection-node-js-or-browser */\nconst isBrowserEnvironment = (function() {\n    // eslint-disable-next-line no-undef\n    return (typeof window !== \"undefined\") && (this === window);\n}).call();\n\nif (isBrowserEnvironment) {\n  // Web version of reading a wasm file into an array buffer.\n\n  let mappingsWasm = null;\n\n  module.exports = function readWasm() {\n    if (typeof mappingsWasm === \"string\") {\n      return fetch(mappingsWasm)\n        .then(response => response.arrayBuffer());\n    }\n    if (mappingsWasm instanceof ArrayBuffer) {\n      return Promise.resolve(mappingsWasm);\n    }\n    throw new Error(\"You must provide the string URL or ArrayBuffer contents \" +\n                    \"of lib/mappings.wasm by calling \" +\n                    \"SourceMapConsumer.initialize({ 'lib/mappings.wasm': ... }) \" +\n                    \"before using SourceMapConsumer\");\n  };\n\n  module.exports.initialize = input => mappingsWasm = input;\n} else {\n  // Node version of reading a wasm file into an array buffer.\n  const fs = require(\"fs\");\n  const path = require(\"path\");\n\n  module.exports = function readWasm() {\n    return new Promise((resolve, reject) => {\n      const wasmPath = path.join(__dirname, \"mappings.wasm\");\n      fs.readFile(wasmPath, null, (error, data) => {\n        if (error) {\n          reject(error);\n          return;\n        }\n\n        resolve(data.buffer);\n      });\n    });\n  };\n\n  module.exports.initialize = _ => {\n    console.debug(\"SourceMapConsumer.initialize is a no-op when running in node.js\");\n  };\n}\n", "const readWasm = require(\"../lib/read-wasm\");\n\n/**\n * Provide the JIT with a nice shape / hidden class.\n */\nfunction Mapping() {\n  this.generatedLine = 0;\n  this.generatedColumn = 0;\n  this.lastGeneratedColumn = null;\n  this.source = null;\n  this.originalLine = null;\n  this.originalColumn = null;\n  this.name = null;\n}\n\nlet cachedWasm = null;\n\nmodule.exports = function wasm() {\n  if (cachedWasm) {\n    return cachedWasm;\n  }\n\n  const callbackStack = [];\n\n  cachedWasm = readWasm().then(buffer => {\n      return WebAssembly.instantiate(buffer, {\n        env: {\n          mapping_callback(\n            generatedLine,\n            generatedColumn,\n\n            hasLastGeneratedColumn,\n            lastGeneratedColumn,\n\n            hasOriginal,\n            source,\n            originalLine,\n            originalColumn,\n\n            hasName,\n            name\n          ) {\n            const mapping = new Mapping();\n            // JS uses 1-based line numbers, wasm uses 0-based.\n            mapping.generatedLine = generatedLine + 1;\n            mapping.generatedColumn = generatedColumn;\n\n            if (hasLastGeneratedColumn) {\n              // JS uses inclusive last generated column, wasm uses exclusive.\n              mapping.lastGeneratedColumn = lastGeneratedColumn - 1;\n            }\n\n            if (hasOriginal) {\n              mapping.source = source;\n              // JS uses 1-based line numbers, wasm uses 0-based.\n              mapping.originalLine = originalLine + 1;\n              mapping.originalColumn = originalColumn;\n\n              if (hasName) {\n                mapping.name = name;\n              }\n            }\n\n            callbackStack[callbackStack.length - 1](mapping);\n          },\n\n          start_all_generated_locations_for() { console.time(\"all_generated_locations_for\"); },\n          end_all_generated_locations_for() { console.timeEnd(\"all_generated_locations_for\"); },\n\n          start_compute_column_spans() { console.time(\"compute_column_spans\"); },\n          end_compute_column_spans() { console.timeEnd(\"compute_column_spans\"); },\n\n          start_generated_location_for() { console.time(\"generated_location_for\"); },\n          end_generated_location_for() { console.timeEnd(\"generated_location_for\"); },\n\n          start_original_location_for() { console.time(\"original_location_for\"); },\n          end_original_location_for() { console.timeEnd(\"original_location_for\"); },\n\n          start_parse_mappings() { console.time(\"parse_mappings\"); },\n          end_parse_mappings() { console.timeEnd(\"parse_mappings\"); },\n\n          start_sort_by_generated_location() { console.time(\"sort_by_generated_location\"); },\n          end_sort_by_generated_location() { console.timeEnd(\"sort_by_generated_location\"); },\n\n          start_sort_by_original_location() { console.time(\"sort_by_original_location\"); },\n          end_sort_by_original_location() { console.timeEnd(\"sort_by_original_location\"); },\n        }\n      });\n  }).then(Wasm => {\n    return {\n      exports: Wasm.instance.exports,\n      withMappingCallback: (mappingCallback, f) => {\n        callbackStack.push(mappingCallback);\n        try {\n          f();\n        } finally {\n          callbackStack.pop();\n        }\n      }\n    };\n  }).then(null, e => {\n    cachedWasm = null;\n    throw e;\n  });\n\n  return cachedWasm;\n};\n", "/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\n\nconst util = require(\"./util\");\nconst binarySearch = require(\"./binary-search\");\nconst ArraySet = require(\"./array-set\").ArraySet;\nconst base64VLQ = require(\"./base64-vlq\"); // eslint-disable-line no-unused-vars\nconst readWasm = require(\"../lib/read-wasm\");\nconst wasm = require(\"./wasm\");\n\nconst INTERNAL = Symbol(\"smcInternal\");\n\nclass SourceMapConsumer {\n  constructor(aSourceMap, aSourceMapURL) {\n    // If the constructor was called by super(), just return Promise<this>.\n    // Yes, this is a hack to retain the pre-existing API of the base-class\n    // constructor also being an async factory function.\n    if (aSourceMap == INTERNAL) {\n      return Promise.resolve(this);\n    }\n\n    return _factory(aSourceMap, aSourceMapURL);\n  }\n\n  static initialize(opts) {\n    readWasm.initialize(opts[\"lib/mappings.wasm\"]);\n  }\n\n  static fromSourceMap(aSourceMap, aSourceMapURL) {\n    return _factoryBSM(aSourceMap, aSourceMapURL);\n  }\n\n  /**\n   * Construct a new `SourceMapConsumer` from `rawSourceMap` and `sourceMapUrl`\n   * (see the `SourceMapConsumer` constructor for details. Then, invoke the `async\n   * function f(SourceMapConsumer) -> T` with the newly constructed consumer, wait\n   * for `f` to complete, call `destroy` on the consumer, and return `f`'s return\n   * value.\n   *\n   * You must not use the consumer after `f` completes!\n   *\n   * By using `with`, you do not have to remember to manually call `destroy` on\n   * the consumer, since it will be called automatically once `f` completes.\n   *\n   * ```js\n   * const xSquared = await SourceMapConsumer.with(\n   *   myRawSourceMap,\n   *   null,\n   *   async function (consumer) {\n   *     // Use `consumer` inside here and don't worry about remembering\n   *     // to call `destroy`.\n   *\n   *     const x = await whatever(consumer);\n   *     return x * x;\n   *   }\n   * );\n   *\n   * // You may not use that `consumer` anymore out here; it has\n   * // been destroyed. But you can use `xSquared`.\n   * console.log(xSquared);\n   * ```\n   */\n  static async with(rawSourceMap, sourceMapUrl, f) {\n    const consumer = await new SourceMapConsumer(rawSourceMap, sourceMapUrl);\n    try {\n      return await f(consumer);\n    } finally {\n      consumer.destroy();\n    }\n  }\n\n  /**\n   * Parse the mappings in a string in to a data structure which we can easily\n   * query (the ordered arrays in the `this.__generatedMappings` and\n   * `this.__originalMappings` properties).\n   */\n  _parseMappings(aStr, aSourceRoot) {\n    throw new Error(\"Subclasses must implement _parseMappings\");\n  }\n\n  /**\n   * Iterate over each mapping between an original source/line/column and a\n   * generated line/column in this source map.\n   *\n   * @param Function aCallback\n   *        The function that is called with each mapping.\n   * @param Object aContext\n   *        Optional. If specified, this object will be the value of `this` every\n   *        time that `aCallback` is called.\n   * @param aOrder\n   *        Either `SourceMapConsumer.GENERATED_ORDER` or\n   *        `SourceMapConsumer.ORIGINAL_ORDER`. Specifies whether you want to\n   *        iterate over the mappings sorted by the generated file's line/column\n   *        order or the original's source/line/column order, respectively. Defaults to\n   *        `SourceMapConsumer.GENERATED_ORDER`.\n   */\n  eachMapping(aCallback, aContext, aOrder) {\n    throw new Error(\"Subclasses must implement eachMapping\");\n  }\n\n  /**\n   * Returns all generated line and column information for the original source,\n   * line, and column provided. If no column is provided, returns all mappings\n   * corresponding to a either the line we are searching for or the next\n   * closest line that has any mappings. Otherwise, returns all mappings\n   * corresponding to the given line and either the column we are searching for\n   * or the next closest column that has any offsets.\n   *\n   * The only argument is an object with the following properties:\n   *\n   *   - source: The filename of the original source.\n   *   - line: The line number in the original source.  The line number is 1-based.\n   *   - column: Optional. the column number in the original source.\n   *    The column number is 0-based.\n   *\n   * and an array of objects is returned, each with the following properties:\n   *\n   *   - line: The line number in the generated source, or null.  The\n   *    line number is 1-based.\n   *   - column: The column number in the generated source, or null.\n   *    The column number is 0-based.\n   */\n  allGeneratedPositionsFor(aArgs) {\n    throw new Error(\"Subclasses must implement allGeneratedPositionsFor\");\n  }\n\n  destroy() {\n    throw new Error(\"Subclasses must implement destroy\");\n  }\n}\n\n/**\n * The version of the source mapping spec that we are consuming.\n */\nSourceMapConsumer.prototype._version = 3;\nSourceMapConsumer.GENERATED_ORDER = 1;\nSourceMapConsumer.ORIGINAL_ORDER = 2;\n\nSourceMapConsumer.GREATEST_LOWER_BOUND = 1;\nSourceMapConsumer.LEAST_UPPER_BOUND = 2;\n\nexports.SourceMapConsumer = SourceMapConsumer;\n\n/**\n * A BasicSourceMapConsumer instance represents a parsed source map which we can\n * query for information about the original file positions by giving it a file\n * position in the generated source.\n *\n * The first parameter is the raw source map (either as a JSON string, or\n * already parsed to an object). According to the spec, source maps have the\n * following attributes:\n *\n *   - version: Which version of the source map spec this map is following.\n *   - sources: An array of URLs to the original source files.\n *   - names: An array of identifiers which can be referenced by individual mappings.\n *   - sourceRoot: Optional. The URL root from which all sources are relative.\n *   - sourcesContent: Optional. An array of contents of the original source files.\n *   - mappings: A string of base64 VLQs which contain the actual mappings.\n *   - file: Optional. The generated file this source map is associated with.\n *\n * Here is an example source map, taken from the source map spec[0]:\n *\n *     {\n *       version : 3,\n *       file: \"out.js\",\n *       sourceRoot : \"\",\n *       sources: [\"foo.js\", \"bar.js\"],\n *       names: [\"src\", \"maps\", \"are\", \"fun\"],\n *       mappings: \"AA,AB;;ABCDE;\"\n *     }\n *\n * The second parameter, if given, is a string whose value is the URL\n * at which the source map was found.  This URL is used to compute the\n * sources array.\n *\n * [0]: https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit?pli=1#\n */\nclass BasicSourceMapConsumer extends SourceMapConsumer {\n  constructor(aSourceMap, aSourceMapURL) {\n    return super(INTERNAL).then(that => {\n      let sourceMap = aSourceMap;\n      if (typeof aSourceMap === \"string\") {\n        sourceMap = util.parseSourceMapInput(aSourceMap);\n      }\n\n      const version = util.getArg(sourceMap, \"version\");\n      let sources = util.getArg(sourceMap, \"sources\");\n      // Sass 3.3 leaves out the 'names' array, so we deviate from the spec (which\n      // requires the array) to play nice here.\n      const names = util.getArg(sourceMap, \"names\", []);\n      let sourceRoot = util.getArg(sourceMap, \"sourceRoot\", null);\n      const sourcesContent = util.getArg(sourceMap, \"sourcesContent\", null);\n      const mappings = util.getArg(sourceMap, \"mappings\");\n      const file = util.getArg(sourceMap, \"file\", null);\n\n      // Once again, Sass deviates from the spec and supplies the version as a\n      // string rather than a number, so we use loose equality checking here.\n      if (version != that._version) {\n        throw new Error(\"Unsupported version: \" + version);\n      }\n\n      if (sourceRoot) {\n        sourceRoot = util.normalize(sourceRoot);\n      }\n\n      sources = sources\n        .map(String)\n        // Some source maps produce relative source paths like \"./foo.js\" instead of\n        // \"foo.js\".  Normalize these first so that future comparisons will succeed.\n        // See bugzil.la/1090768.\n        .map(util.normalize)\n        // Always ensure that absolute sources are internally stored relative to\n        // the source root, if the source root is absolute. Not doing this would\n        // be particularly problematic when the source root is a prefix of the\n        // source (valid, but why??). See github issue #199 and bugzil.la/1188982.\n        .map(function(source) {\n          return sourceRoot && util.isAbsolute(sourceRoot) && util.isAbsolute(source)\n            ? util.relative(sourceRoot, source)\n            : source;\n        });\n\n      // Pass `true` below to allow duplicate names and sources. While source maps\n      // are intended to be compressed and deduplicated, the TypeScript compiler\n      // sometimes generates source maps with duplicates in them. See Github issue\n      // #72 and bugzil.la/889492.\n      that._names = ArraySet.fromArray(names.map(String), true);\n      that._sources = ArraySet.fromArray(sources, true);\n\n      that._absoluteSources = that._sources.toArray().map(function(s) {\n        return util.computeSourceURL(sourceRoot, s, aSourceMapURL);\n      });\n\n      that.sourceRoot = sourceRoot;\n      that.sourcesContent = sourcesContent;\n      that._mappings = mappings;\n      that._sourceMapURL = aSourceMapURL;\n      that.file = file;\n\n      that._computedColumnSpans = false;\n      that._mappingsPtr = 0;\n      that._wasm = null;\n\n      return wasm().then(w => {\n        that._wasm = w;\n        return that;\n      });\n    });\n  }\n\n  /**\n   * Utility function to find the index of a source.  Returns -1 if not\n   * found.\n   */\n  _findSourceIndex(aSource) {\n    let relativeSource = aSource;\n    if (this.sourceRoot != null) {\n      relativeSource = util.relative(this.sourceRoot, relativeSource);\n    }\n\n    if (this._sources.has(relativeSource)) {\n      return this._sources.indexOf(relativeSource);\n    }\n\n    // Maybe aSource is an absolute URL as returned by |sources|.  In\n    // this case we can't simply undo the transform.\n    for (let i = 0; i < this._absoluteSources.length; ++i) {\n      if (this._absoluteSources[i] == aSource) {\n        return i;\n      }\n    }\n\n    return -1;\n  }\n\n  /**\n   * Create a BasicSourceMapConsumer from a SourceMapGenerator.\n   *\n   * @param SourceMapGenerator aSourceMap\n   *        The source map that will be consumed.\n   * @param String aSourceMapURL\n   *        The URL at which the source map can be found (optional)\n   * @returns BasicSourceMapConsumer\n   */\n  static fromSourceMap(aSourceMap, aSourceMapURL) {\n    return new BasicSourceMapConsumer(aSourceMap.toString());\n  }\n\n  get sources() {\n    return this._absoluteSources.slice();\n  }\n\n  _getMappingsPtr() {\n    if (this._mappingsPtr === 0) {\n      this._parseMappings(this._mappings, this.sourceRoot);\n    }\n\n    return this._mappingsPtr;\n  }\n\n  /**\n   * Parse the mappings in a string in to a data structure which we can easily\n   * query (the ordered arrays in the `this.__generatedMappings` and\n   * `this.__originalMappings` properties).\n   */\n  _parseMappings(aStr, aSourceRoot) {\n    const size = aStr.length;\n\n    const mappingsBufPtr = this._wasm.exports.allocate_mappings(size);\n    const mappingsBuf = new Uint8Array(this._wasm.exports.memory.buffer, mappingsBufPtr, size);\n    for (let i = 0; i < size; i++) {\n      mappingsBuf[i] = aStr.charCodeAt(i);\n    }\n\n    const mappingsPtr = this._wasm.exports.parse_mappings(mappingsBufPtr);\n\n    if (!mappingsPtr) {\n      const error = this._wasm.exports.get_last_error();\n      let msg = `Error parsing mappings (code ${error}): `;\n\n      // XXX: keep these error codes in sync with `fitzgen/source-map-mappings`.\n      switch (error) {\n        case 1:\n          msg += \"the mappings contained a negative line, column, source index, or name index\";\n          break;\n        case 2:\n          msg += \"the mappings contained a number larger than 2**32\";\n          break;\n        case 3:\n          msg += \"reached EOF while in the middle of parsing a VLQ\";\n          break;\n        case 4:\n          msg += \"invalid base 64 character while parsing a VLQ\";\n          break;\n        default:\n          msg += \"unknown error code\";\n          break;\n      }\n\n      throw new Error(msg);\n    }\n\n    this._mappingsPtr = mappingsPtr;\n  }\n\n  eachMapping(aCallback, aContext, aOrder) {\n    const context = aContext || null;\n    const order = aOrder || SourceMapConsumer.GENERATED_ORDER;\n    const sourceRoot = this.sourceRoot;\n\n    this._wasm.withMappingCallback(\n      mapping => {\n        if (mapping.source !== null) {\n          mapping.source = this._sources.at(mapping.source);\n          mapping.source = util.computeSourceURL(sourceRoot, mapping.source, this._sourceMapURL);\n\n          if (mapping.name !== null) {\n            mapping.name = this._names.at(mapping.name);\n          }\n        }\n\n        aCallback.call(context, mapping);\n      },\n      () => {\n        switch (order) {\n        case SourceMapConsumer.GENERATED_ORDER:\n          this._wasm.exports.by_generated_location(this._getMappingsPtr());\n          break;\n        case SourceMapConsumer.ORIGINAL_ORDER:\n          this._wasm.exports.by_original_location(this._getMappingsPtr());\n          break;\n        default:\n          throw new Error(\"Unknown order of iteration.\");\n        }\n      }\n    );\n  }\n\n  allGeneratedPositionsFor(aArgs) {\n    let source = util.getArg(aArgs, \"source\");\n    const originalLine = util.getArg(aArgs, \"line\");\n    const originalColumn = aArgs.column || 0;\n\n    source = this._findSourceIndex(source);\n    if (source < 0) {\n      return [];\n    }\n\n    if (originalLine < 1) {\n      throw new Error(\"Line numbers must be >= 1\");\n    }\n\n    if (originalColumn < 0) {\n      throw new Error(\"Column numbers must be >= 0\");\n    }\n\n    const mappings = [];\n\n    this._wasm.withMappingCallback(\n      m => {\n        let lastColumn = m.lastGeneratedColumn;\n        if (this._computedColumnSpans && lastColumn === null) {\n          lastColumn = Infinity;\n        }\n        mappings.push({\n          line: m.generatedLine,\n          column: m.generatedColumn,\n          lastColumn,\n        });\n      }, () => {\n        this._wasm.exports.all_generated_locations_for(\n          this._getMappingsPtr(),\n          source,\n          originalLine - 1,\n          \"column\" in aArgs,\n          originalColumn\n        );\n      }\n    );\n\n    return mappings;\n  }\n\n  destroy() {\n    if (this._mappingsPtr !== 0) {\n      this._wasm.exports.free_mappings(this._mappingsPtr);\n      this._mappingsPtr = 0;\n    }\n  }\n\n  /**\n   * Compute the last column for each generated mapping. The last column is\n   * inclusive.\n   */\n  computeColumnSpans() {\n    if (this._computedColumnSpans) {\n      return;\n    }\n\n    this._wasm.exports.compute_column_spans(this._getMappingsPtr());\n    this._computedColumnSpans = true;\n  }\n\n  /**\n   * Returns the original source, line, and column information for the generated\n   * source's line and column positions provided. The only argument is an object\n   * with the following properties:\n   *\n   *   - line: The line number in the generated source.  The line number\n   *     is 1-based.\n   *   - column: The column number in the generated source.  The column\n   *     number is 0-based.\n   *   - bias: Either 'SourceMapConsumer.GREATEST_LOWER_BOUND' or\n   *     'SourceMapConsumer.LEAST_UPPER_BOUND'. Specifies whether to return the\n   *     closest element that is smaller than or greater than the one we are\n   *     searching for, respectively, if the exact element cannot be found.\n   *     Defaults to 'SourceMapConsumer.GREATEST_LOWER_BOUND'.\n   *\n   * and an object is returned with the following properties:\n   *\n   *   - source: The original source file, or null.\n   *   - line: The line number in the original source, or null.  The\n   *     line number is 1-based.\n   *   - column: The column number in the original source, or null.  The\n   *     column number is 0-based.\n   *   - name: The original identifier, or null.\n   */\n  originalPositionFor(aArgs) {\n    const needle = {\n      generatedLine: util.getArg(aArgs, \"line\"),\n      generatedColumn: util.getArg(aArgs, \"column\")\n    };\n\n    if (needle.generatedLine < 1) {\n      throw new Error(\"Line numbers must be >= 1\");\n    }\n\n    if (needle.generatedColumn < 0) {\n      throw new Error(\"Column numbers must be >= 0\");\n    }\n\n    let bias = util.getArg(aArgs, \"bias\", SourceMapConsumer.GREATEST_LOWER_BOUND);\n    if (bias == null) {\n      bias = SourceMapConsumer.GREATEST_LOWER_BOUND;\n    }\n\n    let mapping;\n    this._wasm.withMappingCallback(m => mapping = m, () => {\n      this._wasm.exports.original_location_for(\n        this._getMappingsPtr(),\n        needle.generatedLine - 1,\n        needle.generatedColumn,\n        bias\n      );\n    });\n\n    if (mapping) {\n      if (mapping.generatedLine === needle.generatedLine) {\n        let source = util.getArg(mapping, \"source\", null);\n        if (source !== null) {\n          source = this._sources.at(source);\n          source = util.computeSourceURL(this.sourceRoot, source, this._sourceMapURL);\n        }\n\n        let name = util.getArg(mapping, \"name\", null);\n        if (name !== null) {\n          name = this._names.at(name);\n        }\n\n        return {\n          source,\n          line: util.getArg(mapping, \"originalLine\", null),\n          column: util.getArg(mapping, \"originalColumn\", null),\n          name\n        };\n      }\n    }\n\n    return {\n      source: null,\n      line: null,\n      column: null,\n      name: null\n    };\n  }\n\n  /**\n   * Return true if we have the source content for every source in the source\n   * map, false otherwise.\n   */\n  hasContentsOfAllSources() {\n    if (!this.sourcesContent) {\n      return false;\n    }\n    return this.sourcesContent.length >= this._sources.size() &&\n      !this.sourcesContent.some(function(sc) { return sc == null; });\n  }\n\n  /**\n   * Returns the original source content. The only argument is the url of the\n   * original source file. Returns null if no original source content is\n   * available.\n   */\n  sourceContentFor(aSource, nullOnMissing) {\n    if (!this.sourcesContent) {\n      return null;\n    }\n\n    const index = this._findSourceIndex(aSource);\n    if (index >= 0) {\n      return this.sourcesContent[index];\n    }\n\n    let relativeSource = aSource;\n    if (this.sourceRoot != null) {\n      relativeSource = util.relative(this.sourceRoot, relativeSource);\n    }\n\n    let url;\n    if (this.sourceRoot != null\n        && (url = util.urlParse(this.sourceRoot))) {\n      // XXX: file:// URIs and absolute paths lead to unexpected behavior for\n      // many users. We can help them out when they expect file:// URIs to\n      // behave like it would if they were running a local HTTP server. See\n      // https://bugzilla.mozilla.org/show_bug.cgi?id=885597.\n      const fileUriAbsPath = relativeSource.replace(/^file:\\/\\//, \"\");\n      if (url.scheme == \"file\"\n          && this._sources.has(fileUriAbsPath)) {\n        return this.sourcesContent[this._sources.indexOf(fileUriAbsPath)];\n      }\n\n      if ((!url.path || url.path == \"/\")\n          && this._sources.has(\"/\" + relativeSource)) {\n        return this.sourcesContent[this._sources.indexOf(\"/\" + relativeSource)];\n      }\n    }\n\n    // This function is used recursively from\n    // IndexedSourceMapConsumer.prototype.sourceContentFor. In that case, we\n    // don't want to throw if we can't find the source - we just want to\n    // return null, so we provide a flag to exit gracefully.\n    if (nullOnMissing) {\n      return null;\n    }\n\n    throw new Error('\"' + relativeSource + '\" is not in the SourceMap.');\n  }\n\n  /**\n   * Returns the generated line and column information for the original source,\n   * line, and column positions provided. The only argument is an object with\n   * the following properties:\n   *\n   *   - source: The filename of the original source.\n   *   - line: The line number in the original source.  The line number\n   *     is 1-based.\n   *   - column: The column number in the original source.  The column\n   *     number is 0-based.\n   *   - bias: Either 'SourceMapConsumer.GREATEST_LOWER_BOUND' or\n   *     'SourceMapConsumer.LEAST_UPPER_BOUND'. Specifies whether to return the\n   *     closest element that is smaller than or greater than the one we are\n   *     searching for, respectively, if the exact element cannot be found.\n   *     Defaults to 'SourceMapConsumer.GREATEST_LOWER_BOUND'.\n   *\n   * and an object is returned with the following properties:\n   *\n   *   - line: The line number in the generated source, or null.  The\n   *     line number is 1-based.\n   *   - column: The column number in the generated source, or null.\n   *     The column number is 0-based.\n   */\n  generatedPositionFor(aArgs) {\n    let source = util.getArg(aArgs, \"source\");\n    source = this._findSourceIndex(source);\n    if (source < 0) {\n      return {\n        line: null,\n        column: null,\n        lastColumn: null\n      };\n    }\n\n    const needle = {\n      source,\n      originalLine: util.getArg(aArgs, \"line\"),\n      originalColumn: util.getArg(aArgs, \"column\")\n    };\n\n    if (needle.originalLine < 1) {\n      throw new Error(\"Line numbers must be >= 1\");\n    }\n\n    if (needle.originalColumn < 0) {\n      throw new Error(\"Column numbers must be >= 0\");\n    }\n\n    let bias = util.getArg(aArgs, \"bias\", SourceMapConsumer.GREATEST_LOWER_BOUND);\n    if (bias == null) {\n      bias = SourceMapConsumer.GREATEST_LOWER_BOUND;\n    }\n\n    let mapping;\n    this._wasm.withMappingCallback(m => mapping = m, () => {\n      this._wasm.exports.generated_location_for(\n        this._getMappingsPtr(),\n        needle.source,\n        needle.originalLine - 1,\n        needle.originalColumn,\n        bias\n      );\n    });\n\n    if (mapping) {\n      if (mapping.source === needle.source) {\n        let lastColumn = mapping.lastGeneratedColumn;\n        if (this._computedColumnSpans && lastColumn === null) {\n          lastColumn = Infinity;\n        }\n        return {\n          line: util.getArg(mapping, \"generatedLine\", null),\n          column: util.getArg(mapping, \"generatedColumn\", null),\n          lastColumn,\n        };\n      }\n    }\n\n    return {\n      line: null,\n      column: null,\n      lastColumn: null\n    };\n  }\n}\n\nBasicSourceMapConsumer.prototype.consumer = SourceMapConsumer;\nexports.BasicSourceMapConsumer = BasicSourceMapConsumer;\n\n/**\n * An IndexedSourceMapConsumer instance represents a parsed source map which\n * we can query for information. It differs from BasicSourceMapConsumer in\n * that it takes \"indexed\" source maps (i.e. ones with a \"sections\" field) as\n * input.\n *\n * The first parameter is a raw source map (either as a JSON string, or already\n * parsed to an object). According to the spec for indexed source maps, they\n * have the following attributes:\n *\n *   - version: Which version of the source map spec this map is following.\n *   - file: Optional. The generated file this source map is associated with.\n *   - sections: A list of section definitions.\n *\n * Each value under the \"sections\" field has two fields:\n *   - offset: The offset into the original specified at which this section\n *       begins to apply, defined as an object with a \"line\" and \"column\"\n *       field.\n *   - map: A source map definition. This source map could also be indexed,\n *       but doesn't have to be.\n *\n * Instead of the \"map\" field, it's also possible to have a \"url\" field\n * specifying a URL to retrieve a source map from, but that's currently\n * unsupported.\n *\n * Here's an example source map, taken from the source map spec[0], but\n * modified to omit a section which uses the \"url\" field.\n *\n *  {\n *    version : 3,\n *    file: \"app.js\",\n *    sections: [{\n *      offset: {line:100, column:10},\n *      map: {\n *        version : 3,\n *        file: \"section.js\",\n *        sources: [\"foo.js\", \"bar.js\"],\n *        names: [\"src\", \"maps\", \"are\", \"fun\"],\n *        mappings: \"AAAA,E;;ABCDE;\"\n *      }\n *    }],\n *  }\n *\n * The second parameter, if given, is a string whose value is the URL\n * at which the source map was found.  This URL is used to compute the\n * sources array.\n *\n * [0]: https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit#heading=h.535es3xeprgt\n */\nclass IndexedSourceMapConsumer extends SourceMapConsumer {\n  constructor(aSourceMap, aSourceMapURL) {\n    return super(INTERNAL).then(that => {\n      let sourceMap = aSourceMap;\n      if (typeof aSourceMap === \"string\") {\n        sourceMap = util.parseSourceMapInput(aSourceMap);\n      }\n\n      const version = util.getArg(sourceMap, \"version\");\n      const sections = util.getArg(sourceMap, \"sections\");\n\n      if (version != that._version) {\n        throw new Error(\"Unsupported version: \" + version);\n      }\n\n      that._sources = new ArraySet();\n      that._names = new ArraySet();\n      that.__generatedMappings = null;\n      that.__originalMappings = null;\n      that.__generatedMappingsUnsorted = null;\n      that.__originalMappingsUnsorted = null;\n\n      let lastOffset = {\n        line: -1,\n        column: 0\n      };\n      return Promise.all(sections.map(s => {\n        if (s.url) {\n          // The url field will require support for asynchronicity.\n          // See https://github.com/mozilla/source-map/issues/16\n          throw new Error(\"Support for url field in sections not implemented.\");\n        }\n        const offset = util.getArg(s, \"offset\");\n        const offsetLine = util.getArg(offset, \"line\");\n        const offsetColumn = util.getArg(offset, \"column\");\n\n        if (offsetLine < lastOffset.line ||\n            (offsetLine === lastOffset.line && offsetColumn < lastOffset.column)) {\n          throw new Error(\"Section offsets must be ordered and non-overlapping.\");\n        }\n        lastOffset = offset;\n\n        const cons = new SourceMapConsumer(util.getArg(s, \"map\"), aSourceMapURL);\n        return cons.then(consumer => {\n          return {\n            generatedOffset: {\n              // The offset fields are 0-based, but we use 1-based indices when\n              // encoding/decoding from VLQ.\n              generatedLine: offsetLine + 1,\n              generatedColumn: offsetColumn + 1\n            },\n            consumer\n          };\n        });\n      })).then(s => {\n        that._sections = s;\n        return that;\n      });\n    });\n  }\n\n  // `__generatedMappings` and `__originalMappings` are arrays that hold the\n  // parsed mapping coordinates from the source map's \"mappings\" attribute. They\n  // are lazily instantiated, accessed via the `_generatedMappings` and\n  // `_originalMappings` getters respectively, and we only parse the mappings\n  // and create these arrays once queried for a source location. We jump through\n  // these hoops because there can be many thousands of mappings, and parsing\n  // them is expensive, so we only want to do it if we must.\n  //\n  // Each object in the arrays is of the form:\n  //\n  //     {\n  //       generatedLine: The line number in the generated code,\n  //       generatedColumn: The column number in the generated code,\n  //       source: The path to the original source file that generated this\n  //               chunk of code,\n  //       originalLine: The line number in the original source that\n  //                     corresponds to this chunk of generated code,\n  //       originalColumn: The column number in the original source that\n  //                       corresponds to this chunk of generated code,\n  //       name: The name of the original symbol which generated this chunk of\n  //             code.\n  //     }\n  //\n  // All properties except for `generatedLine` and `generatedColumn` can be\n  // `null`.\n  //\n  // `_generatedMappings` is ordered by the generated positions.\n  //\n  // `_originalMappings` is ordered by the original positions.\n  get _generatedMappings() {\n    if (!this.__generatedMappings) {\n      this._sortGeneratedMappings();\n    }\n\n    return this.__generatedMappings;\n  }\n\n  get _originalMappings() {\n    if (!this.__originalMappings) {\n      this._sortOriginalMappings();\n    }\n\n    return this.__originalMappings;\n  }\n\n  get _generatedMappingsUnsorted() {\n    if (!this.__generatedMappingsUnsorted) {\n      this._parseMappings(this._mappings, this.sourceRoot);\n    }\n\n    return this.__generatedMappingsUnsorted;\n  }\n\n  get _originalMappingsUnsorted() {\n    if (!this.__originalMappingsUnsorted) {\n      this._parseMappings(this._mappings, this.sourceRoot);\n    }\n\n    return this.__originalMappingsUnsorted;\n  }\n\n  _sortGeneratedMappings() {\n    const mappings = this._generatedMappingsUnsorted;\n    mappings.sort(util.compareByGeneratedPositionsDeflated);\n    this.__generatedMappings = mappings;\n  }\n\n  _sortOriginalMappings() {\n    const mappings = this._originalMappingsUnsorted;\n    mappings.sort(util.compareByOriginalPositions);\n    this.__originalMappings = mappings;\n  }\n\n  /**\n   * The list of original sources.\n   */\n  get sources() {\n    const sources = [];\n    for (let i = 0; i < this._sections.length; i++) {\n      for (let j = 0; j < this._sections[i].consumer.sources.length; j++) {\n        sources.push(this._sections[i].consumer.sources[j]);\n      }\n    }\n    return sources;\n  }\n\n  /**\n   * Returns the original source, line, and column information for the generated\n   * source's line and column positions provided. The only argument is an object\n   * with the following properties:\n   *\n   *   - line: The line number in the generated source.  The line number\n   *     is 1-based.\n   *   - column: The column number in the generated source.  The column\n   *     number is 0-based.\n   *\n   * and an object is returned with the following properties:\n   *\n   *   - source: The original source file, or null.\n   *   - line: The line number in the original source, or null.  The\n   *     line number is 1-based.\n   *   - column: The column number in the original source, or null.  The\n   *     column number is 0-based.\n   *   - name: The original identifier, or null.\n   */\n  originalPositionFor(aArgs) {\n    const needle = {\n      generatedLine: util.getArg(aArgs, \"line\"),\n      generatedColumn: util.getArg(aArgs, \"column\")\n    };\n\n    // Find the section containing the generated position we're trying to map\n    // to an original position.\n    const sectionIndex = binarySearch.search(needle, this._sections,\n      function(aNeedle, section) {\n        const cmp = aNeedle.generatedLine - section.generatedOffset.generatedLine;\n        if (cmp) {\n          return cmp;\n        }\n\n        return (aNeedle.generatedColumn -\n                section.generatedOffset.generatedColumn);\n      });\n    const section = this._sections[sectionIndex];\n\n    if (!section) {\n      return {\n        source: null,\n        line: null,\n        column: null,\n        name: null\n      };\n    }\n\n    return section.consumer.originalPositionFor({\n      line: needle.generatedLine -\n        (section.generatedOffset.generatedLine - 1),\n      column: needle.generatedColumn -\n        (section.generatedOffset.generatedLine === needle.generatedLine\n         ? section.generatedOffset.generatedColumn - 1\n         : 0),\n      bias: aArgs.bias\n    });\n  }\n\n  /**\n   * Return true if we have the source content for every source in the source\n   * map, false otherwise.\n   */\n  hasContentsOfAllSources() {\n    return this._sections.every(function(s) {\n      return s.consumer.hasContentsOfAllSources();\n    });\n  }\n\n  /**\n   * Returns the original source content. The only argument is the url of the\n   * original source file. Returns null if no original source content is\n   * available.\n   */\n  sourceContentFor(aSource, nullOnMissing) {\n    for (let i = 0; i < this._sections.length; i++) {\n      const section = this._sections[i];\n\n      const content = section.consumer.sourceContentFor(aSource, true);\n      if (content) {\n        return content;\n      }\n    }\n    if (nullOnMissing) {\n      return null;\n    }\n    throw new Error('\"' + aSource + '\" is not in the SourceMap.');\n  }\n\n  /**\n   * Returns the generated line and column information for the original source,\n   * line, and column positions provided. The only argument is an object with\n   * the following properties:\n   *\n   *   - source: The filename of the original source.\n   *   - line: The line number in the original source.  The line number\n   *     is 1-based.\n   *   - column: The column number in the original source.  The column\n   *     number is 0-based.\n   *\n   * and an object is returned with the following properties:\n   *\n   *   - line: The line number in the generated source, or null.  The\n   *     line number is 1-based.\n   *   - column: The column number in the generated source, or null.\n   *     The column number is 0-based.\n   */\n  generatedPositionFor(aArgs) {\n    for (let i = 0; i < this._sections.length; i++) {\n      const section = this._sections[i];\n\n      // Only consider this section if the requested source is in the list of\n      // sources of the consumer.\n      if (section.consumer._findSourceIndex(util.getArg(aArgs, \"source\")) === -1) {\n        continue;\n      }\n      const generatedPosition = section.consumer.generatedPositionFor(aArgs);\n      if (generatedPosition) {\n        const ret = {\n          line: generatedPosition.line +\n            (section.generatedOffset.generatedLine - 1),\n          column: generatedPosition.column +\n            (section.generatedOffset.generatedLine === generatedPosition.line\n             ? section.generatedOffset.generatedColumn - 1\n             : 0)\n        };\n        return ret;\n      }\n    }\n\n    return {\n      line: null,\n      column: null\n    };\n  }\n\n  /**\n   * Parse the mappings in a string in to a data structure which we can easily\n   * query (the ordered arrays in the `this.__generatedMappings` and\n   * `this.__originalMappings` properties).\n   */\n  _parseMappings(aStr, aSourceRoot) {\n    const generatedMappings = this.__generatedMappingsUnsorted = [];\n    const originalMappings = this.__originalMappingsUnsorted = [];\n    for (let i = 0; i < this._sections.length; i++) {\n      const section = this._sections[i];\n\n      const sectionMappings = [];\n      section.consumer.eachMapping(m => sectionMappings.push(m));\n\n      for (let j = 0; j < sectionMappings.length; j++) {\n        const mapping = sectionMappings[j];\n\n        // TODO: test if null is correct here.  The original code used\n        // `source`, which would actually have gotten used as null because\n        // var's get hoisted.\n        // See: https://github.com/mozilla/source-map/issues/333\n        let source = util.computeSourceURL(section.consumer.sourceRoot, null, this._sourceMapURL);\n        this._sources.add(source);\n        source = this._sources.indexOf(source);\n\n        let name = null;\n        if (mapping.name) {\n          this._names.add(mapping.name);\n          name = this._names.indexOf(mapping.name);\n        }\n\n        // The mappings coming from the consumer for the section have\n        // generated positions relative to the start of the section, so we\n        // need to offset them to be relative to the start of the concatenated\n        // generated file.\n        const adjustedMapping = {\n          source,\n          generatedLine: mapping.generatedLine +\n            (section.generatedOffset.generatedLine - 1),\n          generatedColumn: mapping.generatedColumn +\n            (section.generatedOffset.generatedLine === mapping.generatedLine\n            ? section.generatedOffset.generatedColumn - 1\n            : 0),\n          originalLine: mapping.originalLine,\n          originalColumn: mapping.originalColumn,\n          name\n        };\n\n        generatedMappings.push(adjustedMapping);\n        if (typeof adjustedMapping.originalLine === \"number\") {\n          originalMappings.push(adjustedMapping);\n        }\n      }\n    }\n  }\n\n  eachMapping(aCallback, aContext, aOrder) {\n    const context = aContext || null;\n    const order = aOrder || SourceMapConsumer.GENERATED_ORDER;\n\n    let mappings;\n    switch (order) {\n    case SourceMapConsumer.GENERATED_ORDER:\n      mappings = this._generatedMappings;\n      break;\n    case SourceMapConsumer.ORIGINAL_ORDER:\n      mappings = this._originalMappings;\n      break;\n    default:\n      throw new Error(\"Unknown order of iteration.\");\n    }\n\n    const sourceRoot = this.sourceRoot;\n    mappings.map(function(mapping) {\n      let source = null;\n      if (mapping.source !== null) {\n        source = this._sources.at(mapping.source);\n        source = util.computeSourceURL(sourceRoot, source, this._sourceMapURL);\n      }\n      return {\n        source,\n        generatedLine: mapping.generatedLine,\n        generatedColumn: mapping.generatedColumn,\n        originalLine: mapping.originalLine,\n        originalColumn: mapping.originalColumn,\n        name: mapping.name === null ? null : this._names.at(mapping.name)\n      };\n    }, this).forEach(aCallback, context);\n  }\n\n  /**\n   * Find the mapping that best matches the hypothetical \"needle\" mapping that\n   * we are searching for in the given \"haystack\" of mappings.\n   */\n  _findMapping(aNeedle, aMappings, aLineName,\n              aColumnName, aComparator, aBias) {\n    // To return the position we are searching for, we must first find the\n    // mapping for the given position and then return the opposite position it\n    // points to. Because the mappings are sorted, we can use binary search to\n    // find the best mapping.\n\n    if (aNeedle[aLineName] <= 0) {\n      throw new TypeError(\"Line must be greater than or equal to 1, got \"\n                          + aNeedle[aLineName]);\n    }\n    if (aNeedle[aColumnName] < 0) {\n      throw new TypeError(\"Column must be greater than or equal to 0, got \"\n                          + aNeedle[aColumnName]);\n    }\n\n    return binarySearch.search(aNeedle, aMappings, aComparator, aBias);\n  }\n\n  allGeneratedPositionsFor(aArgs) {\n    const line = util.getArg(aArgs, \"line\");\n\n    // When there is no exact match, BasicSourceMapConsumer.prototype._findMapping\n    // returns the index of the closest mapping less than the needle. By\n    // setting needle.originalColumn to 0, we thus find the last mapping for\n    // the given line, provided such a mapping exists.\n    const needle = {\n      source: util.getArg(aArgs, \"source\"),\n      originalLine: line,\n      originalColumn: util.getArg(aArgs, \"column\", 0)\n    };\n\n    needle.source = this._findSourceIndex(needle.source);\n    if (needle.source < 0) {\n      return [];\n    }\n\n    if (needle.originalLine < 1) {\n      throw new Error(\"Line numbers must be >= 1\");\n    }\n\n    if (needle.originalColumn < 0) {\n      throw new Error(\"Column numbers must be >= 0\");\n    }\n\n    const mappings = [];\n\n    let index = this._findMapping(needle,\n                                  this._originalMappings,\n                                  \"originalLine\",\n                                  \"originalColumn\",\n                                  util.compareByOriginalPositions,\n                                  binarySearch.LEAST_UPPER_BOUND);\n    if (index >= 0) {\n      let mapping = this._originalMappings[index];\n\n      if (aArgs.column === undefined) {\n        const originalLine = mapping.originalLine;\n\n        // Iterate until either we run out of mappings, or we run into\n        // a mapping for a different line than the one we found. Since\n        // mappings are sorted, this is guaranteed to find all mappings for\n        // the line we found.\n        while (mapping && mapping.originalLine === originalLine) {\n          let lastColumn = mapping.lastGeneratedColumn;\n          if (this._computedColumnSpans && lastColumn === null) {\n            lastColumn = Infinity;\n          }\n          mappings.push({\n            line: util.getArg(mapping, \"generatedLine\", null),\n            column: util.getArg(mapping, \"generatedColumn\", null),\n            lastColumn,\n          });\n\n          mapping = this._originalMappings[++index];\n        }\n      } else {\n        const originalColumn = mapping.originalColumn;\n\n        // Iterate until either we run out of mappings, or we run into\n        // a mapping for a different line than the one we were searching for.\n        // Since mappings are sorted, this is guaranteed to find all mappings for\n        // the line we are searching for.\n        while (mapping &&\n               mapping.originalLine === line &&\n               mapping.originalColumn == originalColumn) {\n          let lastColumn = mapping.lastGeneratedColumn;\n          if (this._computedColumnSpans && lastColumn === null) {\n            lastColumn = Infinity;\n          }\n          mappings.push({\n            line: util.getArg(mapping, \"generatedLine\", null),\n            column: util.getArg(mapping, \"generatedColumn\", null),\n            lastColumn,\n          });\n\n          mapping = this._originalMappings[++index];\n        }\n      }\n    }\n\n    return mappings;\n  }\n\n  destroy() {\n    for (let i = 0; i < this._sections.length; i++) {\n      this._sections[i].consumer.destroy();\n    }\n  }\n}\nexports.IndexedSourceMapConsumer = IndexedSourceMapConsumer;\n\n/*\n * Cheat to get around inter-twingled classes.  `factory()` can be at the end\n * where it has access to non-hoisted classes, but it gets hoisted itself.\n */\nfunction _factory(aSourceMap, aSourceMapURL) {\n  let sourceMap = aSourceMap;\n  if (typeof aSourceMap === \"string\") {\n    sourceMap = util.parseSourceMapInput(aSourceMap);\n  }\n\n  const consumer = sourceMap.sections != null\n      ? new IndexedSourceMapConsumer(sourceMap, aSourceMapURL)\n      : new BasicSourceMapConsumer(sourceMap, aSourceMapURL);\n  return Promise.resolve(consumer);\n}\n\nfunction _factoryBSM(aSourceMap, aSourceMapURL) {\n  return BasicSourceMapConsumer.fromSourceMap(aSourceMap, aSourceMapURL);\n}\n", "/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\n\nconst SourceMapGenerator = require(\"./source-map-generator\").SourceMapGenerator;\nconst util = require(\"./util\");\n\n// Matches a Windows-style `\\r\\n` newline or a `\\n` newline used by all other\n// operating systems these days (capturing the result).\nconst REGEX_NEWLINE = /(\\r?\\n)/;\n\n// Newline character code for charCodeAt() comparisons\nconst NEWLINE_CODE = 10;\n\n// Private symbol for identifying `SourceNode`s when multiple versions of\n// the source-map library are loaded. This MUST NOT CHANGE across\n// versions!\nconst isSourceNode = \"$$$isSourceNode$$$\";\n\n/**\n * SourceNodes provide a way to abstract over interpolating/concatenating\n * snippets of generated JavaScript source code while maintaining the line and\n * column information associated with the original source code.\n *\n * @param aLine The original line number.\n * @param aColumn The original column number.\n * @param aSource The original source's filename.\n * @param aChunks Optional. An array of strings which are snippets of\n *        generated JS, or other SourceNodes.\n * @param aName The original identifier.\n */\nclass SourceNode {\n  constructor(aLine, aColumn, aSource, aChunks, aName) {\n    this.children = [];\n    this.sourceContents = {};\n    this.line = aLine == null ? null : aLine;\n    this.column = aColumn == null ? null : aColumn;\n    this.source = aSource == null ? null : aSource;\n    this.name = aName == null ? null : aName;\n    this[isSourceNode] = true;\n    if (aChunks != null) this.add(aChunks);\n  }\n\n  /**\n   * Creates a SourceNode from generated code and a SourceMapConsumer.\n   *\n   * @param aGeneratedCode The generated code\n   * @param aSourceMapConsumer The SourceMap for the generated code\n   * @param aRelativePath Optional. The path that relative sources in the\n   *        SourceMapConsumer should be relative to.\n   */\n  static fromStringWithSourceMap(aGeneratedCode, aSourceMapConsumer, aRelativePath) {\n    // The SourceNode we want to fill with the generated code\n    // and the SourceMap\n    const node = new SourceNode();\n\n    // All even indices of this array are one line of the generated code,\n    // while all odd indices are the newlines between two adjacent lines\n    // (since `REGEX_NEWLINE` captures its match).\n    // Processed fragments are accessed by calling `shiftNextLine`.\n    const remainingLines = aGeneratedCode.split(REGEX_NEWLINE);\n    let remainingLinesIndex = 0;\n    const shiftNextLine = function() {\n      const lineContents = getNextLine();\n      // The last line of a file might not have a newline.\n      const newLine = getNextLine() || \"\";\n      return lineContents + newLine;\n\n      function getNextLine() {\n        return remainingLinesIndex < remainingLines.length ?\n            remainingLines[remainingLinesIndex++] : undefined;\n      }\n    };\n\n    // We need to remember the position of \"remainingLines\"\n    let lastGeneratedLine = 1, lastGeneratedColumn = 0;\n\n    // The generate SourceNodes we need a code range.\n    // To extract it current and last mapping is used.\n    // Here we store the last mapping.\n    let lastMapping = null;\n    let nextLine;\n\n    aSourceMapConsumer.eachMapping(function(mapping) {\n      if (lastMapping !== null) {\n        // We add the code from \"lastMapping\" to \"mapping\":\n        // First check if there is a new line in between.\n        if (lastGeneratedLine < mapping.generatedLine) {\n          // Associate first line with \"lastMapping\"\n          addMappingWithCode(lastMapping, shiftNextLine());\n          lastGeneratedLine++;\n          lastGeneratedColumn = 0;\n          // The remaining code is added without mapping\n        } else {\n          // There is no new line in between.\n          // Associate the code between \"lastGeneratedColumn\" and\n          // \"mapping.generatedColumn\" with \"lastMapping\"\n          nextLine = remainingLines[remainingLinesIndex] || \"\";\n          const code = nextLine.substr(0, mapping.generatedColumn -\n                                        lastGeneratedColumn);\n          remainingLines[remainingLinesIndex] = nextLine.substr(mapping.generatedColumn -\n                                              lastGeneratedColumn);\n          lastGeneratedColumn = mapping.generatedColumn;\n          addMappingWithCode(lastMapping, code);\n          // No more remaining code, continue\n          lastMapping = mapping;\n          return;\n        }\n      }\n      // We add the generated code until the first mapping\n      // to the SourceNode without any mapping.\n      // Each line is added as separate string.\n      while (lastGeneratedLine < mapping.generatedLine) {\n        node.add(shiftNextLine());\n        lastGeneratedLine++;\n      }\n      if (lastGeneratedColumn < mapping.generatedColumn) {\n        nextLine = remainingLines[remainingLinesIndex] || \"\";\n        node.add(nextLine.substr(0, mapping.generatedColumn));\n        remainingLines[remainingLinesIndex] = nextLine.substr(mapping.generatedColumn);\n        lastGeneratedColumn = mapping.generatedColumn;\n      }\n      lastMapping = mapping;\n    }, this);\n    // We have processed all mappings.\n    if (remainingLinesIndex < remainingLines.length) {\n      if (lastMapping) {\n        // Associate the remaining code in the current line with \"lastMapping\"\n        addMappingWithCode(lastMapping, shiftNextLine());\n      }\n      // and add the remaining lines without any mapping\n      node.add(remainingLines.splice(remainingLinesIndex).join(\"\"));\n    }\n\n    // Copy sourcesContent into SourceNode\n    aSourceMapConsumer.sources.forEach(function(sourceFile) {\n      const content = aSourceMapConsumer.sourceContentFor(sourceFile);\n      if (content != null) {\n        if (aRelativePath != null) {\n          sourceFile = util.join(aRelativePath, sourceFile);\n        }\n        node.setSourceContent(sourceFile, content);\n      }\n    });\n\n    return node;\n\n    function addMappingWithCode(mapping, code) {\n      if (mapping === null || mapping.source === undefined) {\n        node.add(code);\n      } else {\n        const source = aRelativePath\n          ? util.join(aRelativePath, mapping.source)\n          : mapping.source;\n        node.add(new SourceNode(mapping.originalLine,\n                                mapping.originalColumn,\n                                source,\n                                code,\n                                mapping.name));\n      }\n    }\n  }\n\n  /**\n   * Add a chunk of generated JS to this source node.\n   *\n   * @param aChunk A string snippet of generated JS code, another instance of\n   *        SourceNode, or an array where each member is one of those things.\n   */\n  add(aChunk) {\n    if (Array.isArray(aChunk)) {\n      aChunk.forEach(function(chunk) {\n        this.add(chunk);\n      }, this);\n    } else if (aChunk[isSourceNode] || typeof aChunk === \"string\") {\n      if (aChunk) {\n        this.children.push(aChunk);\n      }\n    } else {\n      throw new TypeError(\n        \"Expected a SourceNode, string, or an array of SourceNodes and strings. Got \" + aChunk\n      );\n    }\n    return this;\n  }\n\n  /**\n   * Add a chunk of generated JS to the beginning of this source node.\n   *\n   * @param aChunk A string snippet of generated JS code, another instance of\n   *        SourceNode, or an array where each member is one of those things.\n   */\n  prepend(aChunk) {\n    if (Array.isArray(aChunk)) {\n      for (let i = aChunk.length - 1; i >= 0; i--) {\n        this.prepend(aChunk[i]);\n      }\n    } else if (aChunk[isSourceNode] || typeof aChunk === \"string\") {\n      this.children.unshift(aChunk);\n    } else {\n      throw new TypeError(\n        \"Expected a SourceNode, string, or an array of SourceNodes and strings. Got \" + aChunk\n      );\n    }\n    return this;\n  }\n\n  /**\n   * Walk over the tree of JS snippets in this node and its children. The\n   * walking function is called once for each snippet of JS and is passed that\n   * snippet and the its original associated source's line/column location.\n   *\n   * @param aFn The traversal function.\n   */\n  walk(aFn) {\n    let chunk;\n    for (let i = 0, len = this.children.length; i < len; i++) {\n      chunk = this.children[i];\n      if (chunk[isSourceNode]) {\n        chunk.walk(aFn);\n      } else if (chunk !== \"\") {\n        aFn(chunk, { source: this.source,\n                      line: this.line,\n                      column: this.column,\n                      name: this.name });\n      }\n    }\n  }\n\n  /**\n   * Like `String.prototype.join` except for SourceNodes. Inserts `aStr` between\n   * each of `this.children`.\n   *\n   * @param aSep The separator.\n   */\n  join(aSep) {\n    let newChildren;\n    let i;\n    const len = this.children.length;\n    if (len > 0) {\n      newChildren = [];\n      for (i = 0; i < len - 1; i++) {\n        newChildren.push(this.children[i]);\n        newChildren.push(aSep);\n      }\n      newChildren.push(this.children[i]);\n      this.children = newChildren;\n    }\n    return this;\n  }\n\n  /**\n   * Call String.prototype.replace on the very right-most source snippet. Useful\n   * for trimming whitespace from the end of a source node, etc.\n   *\n   * @param aPattern The pattern to replace.\n   * @param aReplacement The thing to replace the pattern with.\n   */\n  replaceRight(aPattern, aReplacement) {\n    const lastChild = this.children[this.children.length - 1];\n    if (lastChild[isSourceNode]) {\n      lastChild.replaceRight(aPattern, aReplacement);\n    } else if (typeof lastChild === \"string\") {\n      this.children[this.children.length - 1] = lastChild.replace(aPattern, aReplacement);\n    } else {\n      this.children.push(\"\".replace(aPattern, aReplacement));\n    }\n    return this;\n  }\n\n  /**\n   * Set the source content for a source file. This will be added to the SourceMapGenerator\n   * in the sourcesContent field.\n   *\n   * @param aSourceFile The filename of the source file\n   * @param aSourceContent The content of the source file\n   */\n  setSourceContent(aSourceFile, aSourceContent) {\n    this.sourceContents[util.toSetString(aSourceFile)] = aSourceContent;\n  }\n\n  /**\n   * Walk over the tree of SourceNodes. The walking function is called for each\n   * source file content and is passed the filename and source content.\n   *\n   * @param aFn The traversal function.\n   */\n  walkSourceContents(aFn) {\n    for (let i = 0, len = this.children.length; i < len; i++) {\n      if (this.children[i][isSourceNode]) {\n        this.children[i].walkSourceContents(aFn);\n      }\n    }\n\n    const sources = Object.keys(this.sourceContents);\n    for (let i = 0, len = sources.length; i < len; i++) {\n      aFn(util.fromSetString(sources[i]), this.sourceContents[sources[i]]);\n    }\n  }\n\n  /**\n   * Return the string representation of this source node. Walks over the tree\n   * and concatenates all the various snippets together to one string.\n   */\n  toString() {\n    let str = \"\";\n    this.walk(function(chunk) {\n      str += chunk;\n    });\n    return str;\n  }\n\n  /**\n   * Returns the string representation of this source node along with a source\n   * map.\n   */\n  toStringWithSourceMap(aArgs) {\n    const generated = {\n      code: \"\",\n      line: 1,\n      column: 0\n    };\n    const map = new SourceMapGenerator(aArgs);\n    let sourceMappingActive = false;\n    let lastOriginalSource = null;\n    let lastOriginalLine = null;\n    let lastOriginalColumn = null;\n    let lastOriginalName = null;\n    this.walk(function(chunk, original) {\n      generated.code += chunk;\n      if (original.source !== null\n          && original.line !== null\n          && original.column !== null) {\n        if (lastOriginalSource !== original.source\n          || lastOriginalLine !== original.line\n          || lastOriginalColumn !== original.column\n          || lastOriginalName !== original.name) {\n          map.addMapping({\n            source: original.source,\n            original: {\n              line: original.line,\n              column: original.column\n            },\n            generated: {\n              line: generated.line,\n              column: generated.column\n            },\n            name: original.name\n          });\n        }\n        lastOriginalSource = original.source;\n        lastOriginalLine = original.line;\n        lastOriginalColumn = original.column;\n        lastOriginalName = original.name;\n        sourceMappingActive = true;\n      } else if (sourceMappingActive) {\n        map.addMapping({\n          generated: {\n            line: generated.line,\n            column: generated.column\n          }\n        });\n        lastOriginalSource = null;\n        sourceMappingActive = false;\n      }\n      for (let idx = 0, length = chunk.length; idx < length; idx++) {\n        if (chunk.charCodeAt(idx) === NEWLINE_CODE) {\n          generated.line++;\n          generated.column = 0;\n          // Mappings end at eol\n          if (idx + 1 === length) {\n            lastOriginalSource = null;\n            sourceMappingActive = false;\n          } else if (sourceMappingActive) {\n            map.addMapping({\n              source: original.source,\n              original: {\n                line: original.line,\n                column: original.column\n              },\n              generated: {\n                line: generated.line,\n                column: generated.column\n              },\n              name: original.name\n            });\n          }\n        } else {\n          generated.column++;\n        }\n      }\n    });\n    this.walkSourceContents(function(sourceFile, sourceContent) {\n      map.setSourceContent(sourceFile, sourceContent);\n    });\n\n    return { code: generated.code, map };\n  }\n}\n\nexports.SourceNode = SourceNode;\n", "/*\n * Copyright 2009-2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE.txt or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\nexports.SourceMapGenerator = require(\"./lib/source-map-generator\").SourceMapGenerator;\nexports.SourceMapConsumer = require(\"./lib/source-map-consumer\").SourceMapConsumer;\nexports.SourceNode = require(\"./lib/source-node\").SourceNode;\n", "{\n    \"name\": \"escodegen\",\n    \"description\": \"ECMAScript code generator\",\n    \"homepage\": \"http://github.com/Constellation/escodegen.html\",\n    \"main\": \"escodegen.js\",\n    \"bin\": {\n        \"esgenerate\": \"./bin/esgenerate.js\",\n        \"escodegen\": \"./bin/escodegen.js\"\n    },\n    \"version\": \"0.0.21\",\n    \"engines\": {\n        \"node\": \">=0.4.0\"\n    },\n    \"maintainers\": [\n        {\n            \"name\": \"Yusuke Suzuki\",\n            \"email\": \"utatane.tea@gmail.com\",\n            \"web\": \"http://github.com/Constellation\"\n        }\n    ],\n    \"repository\": {\n        \"type\": \"git\",\n        \"url\": \"http://github.com/Constellation/escodegen.git\"\n    },\n    \"dependencies\": {\n        \"esprima\": \"~1.0.2\",\n        \"estraverse\": \"~0.0.4\"\n    },\n    \"optionalDependencies\": {\n        \"source-map\": \">= 0.1.2\"\n    },\n    \"devDependencies\": {\n        \"esprima-moz\": \"*\",\n        \"browserify\": \"*\",\n        \"q\": \"*\",\n        \"bower\": \"*\",\n        \"semver\": \"*\"\n    },\n    \"licenses\": [\n        {\n            \"type\": \"BSD\",\n            \"url\": \"http://github.com/Constellation/escodegen/raw/master/LICENSE.BSD\"\n        }\n    ],\n    \"scripts\": {\n        \"test\": \"node test/run.js\",\n        \"release\": \"node tools/release.js\",\n        \"build\": \"(echo '// Generated by browserify'; ./node_modules/.bin/browserify -i source-map tools/entry-point.js) > escodegen.browser.js\"\n    }\n}", "/*\n  Copyright (C) 2012 Michael Ficarra <escodegen.copyright@michael.ficarra.me>\n  Copyright (C) 2012 Robert Gust-Bardon <donate@robert.gust-bardon.org>\n  Copyright (C) 2012 John Freeman <jfreeman08@gmail.com>\n  Copyright (C) 2011-2012 Ariya Hidayat <ariya.hidayat@gmail.com>\n  Copyright (C) 2012 Mathias Bynens <mathias@qiwi.be>\n  Copyright (C) 2012 Joost-Wim Boekesteijn <joost-wim@boekesteijn.nl>\n  Copyright (C) 2012 Kris Kowal <kris.kowal@cixar.com>\n  Copyright (C) 2012 Yusuke Suzuki <utatane.tea@gmail.com>\n  Copyright (C) 2012 Arpad Borsos <arpad.borsos@googlemail.com>\n\n  Redistribution and use in source and binary forms, with or without\n  modification, are permitted provided that the following conditions are met:\n\n    * Redistributions of source code must retain the above copyright\n      notice, this list of conditions and the following disclaimer.\n    * Redistributions in binary form must reproduce the above copyright\n      notice, this list of conditions and the following disclaimer in the\n      documentation and/or other materials provided with the distribution.\n\n  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n  ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY\n  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n*/\n\n/*jslint bitwise:true */\n/*global escodegen:true, exports:true, generateStatement:true, generateExpression:true, generateFunctionBody:true, process:true, require:true, define:true, global:true*/\n(function () {\n    'use strict';\n\n    var Syntax,\n        Precedence,\n        BinaryPrecedence,\n        Regex,\n        VisitorKeys,\n        VisitorOption,\n        SourceNode,\n        isArray,\n        base,\n        indent,\n        json,\n        renumber,\n        hexadecimal,\n        quotes,\n        escapeless,\n        newline,\n        space,\n        parentheses,\n        semicolons,\n        safeConcatenation,\n        directive,\n        extra,\n        parse,\n        sourceMap,\n        traverse;\n\n    traverse = require('estraverse').traverse;\n\n    Syntax = {\n        AssignmentExpression: 'AssignmentExpression',\n        ArrayExpression: 'ArrayExpression',\n        ArrayPattern: 'ArrayPattern',\n        BlockStatement: 'BlockStatement',\n        BinaryExpression: 'BinaryExpression',\n        BreakStatement: 'BreakStatement',\n        CallExpression: 'CallExpression',\n        CatchClause: 'CatchClause',\n        ComprehensionBlock: 'ComprehensionBlock',\n        ComprehensionExpression: 'ComprehensionExpression',\n        ConditionalExpression: 'ConditionalExpression',\n        ContinueStatement: 'ContinueStatement',\n        DirectiveStatement: 'DirectiveStatement',\n        DoWhileStatement: 'DoWhileStatement',\n        DebuggerStatement: 'DebuggerStatement',\n        EmptyStatement: 'EmptyStatement',\n        ExpressionStatement: 'ExpressionStatement',\n        ForStatement: 'ForStatement',\n        ForInStatement: 'ForInStatement',\n        FunctionDeclaration: 'FunctionDeclaration',\n        FunctionExpression: 'FunctionExpression',\n        Identifier: 'Identifier',\n        IfStatement: 'IfStatement',\n        Literal: 'Literal',\n        LabeledStatement: 'LabeledStatement',\n        LogicalExpression: 'LogicalExpression',\n        MemberExpression: 'MemberExpression',\n        NewExpression: 'NewExpression',\n        ObjectExpression: 'ObjectExpression',\n        ObjectPattern: 'ObjectPattern',\n        Program: 'Program',\n        Property: 'Property',\n        ReturnStatement: 'ReturnStatement',\n        SequenceExpression: 'SequenceExpression',\n        SwitchStatement: 'SwitchStatement',\n        SwitchCase: 'SwitchCase',\n        ThisExpression: 'ThisExpression',\n        ThrowStatement: 'ThrowStatement',\n        TryStatement: 'TryStatement',\n        UnaryExpression: 'UnaryExpression',\n        UpdateExpression: 'UpdateExpression',\n        VariableDeclaration: 'VariableDeclaration',\n        VariableDeclarator: 'VariableDeclarator',\n        WhileStatement: 'WhileStatement',\n        WithStatement: 'WithStatement',\n        YieldExpression: 'YieldExpression'\n\n    };\n\n    Precedence = {\n        Sequence: 0,\n        Assignment: 1,\n        Conditional: 2,\n        LogicalOR: 3,\n        LogicalAND: 4,\n        BitwiseOR: 5,\n        BitwiseXOR: 6,\n        BitwiseAND: 7,\n        Equality: 8,\n        Relational: 9,\n        BitwiseSHIFT: 10,\n        Additive: 11,\n        Multiplicative: 12,\n        Unary: 13,\n        Postfix: 14,\n        Call: 15,\n        New: 16,\n        Member: 17,\n        Primary: 18\n    };\n\n    BinaryPrecedence = {\n        '||': Precedence.LogicalOR,\n        '&&': Precedence.LogicalAND,\n        '|': Precedence.BitwiseOR,\n        '^': Precedence.BitwiseXOR,\n        '&': Precedence.BitwiseAND,\n        '==': Precedence.Equality,\n        '!=': Precedence.Equality,\n        '===': Precedence.Equality,\n        '!==': Precedence.Equality,\n        'is': Precedence.Equality,\n        'isnt': Precedence.Equality,\n        '<': Precedence.Relational,\n        '>': Precedence.Relational,\n        '<=': Precedence.Relational,\n        '>=': Precedence.Relational,\n        'in': Precedence.Relational,\n        'instanceof': Precedence.Relational,\n        '<<': Precedence.BitwiseSHIFT,\n        '>>': Precedence.BitwiseSHIFT,\n        '>>>': Precedence.BitwiseSHIFT,\n        '+': Precedence.Additive,\n        '-': Precedence.Additive,\n        '*': Precedence.Multiplicative,\n        '%': Precedence.Multiplicative,\n        '/': Precedence.Multiplicative\n    };\n\n    Regex = {\n        NonAsciiIdentifierPart: new RegExp('[\\xaa\\xb5\\xba\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02c1\\u02c6-\\u02d1\\u02e0-\\u02e4\\u02ec\\u02ee\\u0300-\\u0374\\u0376\\u0377\\u037a-\\u037d\\u0386\\u0388-\\u038a\\u038c\\u038e-\\u03a1\\u03a3-\\u03f5\\u03f7-\\u0481\\u0483-\\u0487\\u048a-\\u0527\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u0591-\\u05bd\\u05bf\\u05c1\\u05c2\\u05c4\\u05c5\\u05c7\\u05d0-\\u05ea\\u05f0-\\u05f2\\u0610-\\u061a\\u0620-\\u0669\\u066e-\\u06d3\\u06d5-\\u06dc\\u06df-\\u06e8\\u06ea-\\u06fc\\u06ff\\u0710-\\u074a\\u074d-\\u07b1\\u07c0-\\u07f5\\u07fa\\u0800-\\u082d\\u0840-\\u085b\\u08a0\\u08a2-\\u08ac\\u08e4-\\u08fe\\u0900-\\u0963\\u0966-\\u096f\\u0971-\\u0977\\u0979-\\u097f\\u0981-\\u0983\\u0985-\\u098c\\u098f\\u0990\\u0993-\\u09a8\\u09aa-\\u09b0\\u09b2\\u09b6-\\u09b9\\u09bc-\\u09c4\\u09c7\\u09c8\\u09cb-\\u09ce\\u09d7\\u09dc\\u09dd\\u09df-\\u09e3\\u09e6-\\u09f1\\u0a01-\\u0a03\\u0a05-\\u0a0a\\u0a0f\\u0a10\\u0a13-\\u0a28\\u0a2a-\\u0a30\\u0a32\\u0a33\\u0a35\\u0a36\\u0a38\\u0a39\\u0a3c\\u0a3e-\\u0a42\\u0a47\\u0a48\\u0a4b-\\u0a4d\\u0a51\\u0a59-\\u0a5c\\u0a5e\\u0a66-\\u0a75\\u0a81-\\u0a83\\u0a85-\\u0a8d\\u0a8f-\\u0a91\\u0a93-\\u0aa8\\u0aaa-\\u0ab0\\u0ab2\\u0ab3\\u0ab5-\\u0ab9\\u0abc-\\u0ac5\\u0ac7-\\u0ac9\\u0acb-\\u0acd\\u0ad0\\u0ae0-\\u0ae3\\u0ae6-\\u0aef\\u0b01-\\u0b03\\u0b05-\\u0b0c\\u0b0f\\u0b10\\u0b13-\\u0b28\\u0b2a-\\u0b30\\u0b32\\u0b33\\u0b35-\\u0b39\\u0b3c-\\u0b44\\u0b47\\u0b48\\u0b4b-\\u0b4d\\u0b56\\u0b57\\u0b5c\\u0b5d\\u0b5f-\\u0b63\\u0b66-\\u0b6f\\u0b71\\u0b82\\u0b83\\u0b85-\\u0b8a\\u0b8e-\\u0b90\\u0b92-\\u0b95\\u0b99\\u0b9a\\u0b9c\\u0b9e\\u0b9f\\u0ba3\\u0ba4\\u0ba8-\\u0baa\\u0bae-\\u0bb9\\u0bbe-\\u0bc2\\u0bc6-\\u0bc8\\u0bca-\\u0bcd\\u0bd0\\u0bd7\\u0be6-\\u0bef\\u0c01-\\u0c03\\u0c05-\\u0c0c\\u0c0e-\\u0c10\\u0c12-\\u0c28\\u0c2a-\\u0c33\\u0c35-\\u0c39\\u0c3d-\\u0c44\\u0c46-\\u0c48\\u0c4a-\\u0c4d\\u0c55\\u0c56\\u0c58\\u0c59\\u0c60-\\u0c63\\u0c66-\\u0c6f\\u0c82\\u0c83\\u0c85-\\u0c8c\\u0c8e-\\u0c90\\u0c92-\\u0ca8\\u0caa-\\u0cb3\\u0cb5-\\u0cb9\\u0cbc-\\u0cc4\\u0cc6-\\u0cc8\\u0cca-\\u0ccd\\u0cd5\\u0cd6\\u0cde\\u0ce0-\\u0ce3\\u0ce6-\\u0cef\\u0cf1\\u0cf2\\u0d02\\u0d03\\u0d05-\\u0d0c\\u0d0e-\\u0d10\\u0d12-\\u0d3a\\u0d3d-\\u0d44\\u0d46-\\u0d48\\u0d4a-\\u0d4e\\u0d57\\u0d60-\\u0d63\\u0d66-\\u0d6f\\u0d7a-\\u0d7f\\u0d82\\u0d83\\u0d85-\\u0d96\\u0d9a-\\u0db1\\u0db3-\\u0dbb\\u0dbd\\u0dc0-\\u0dc6\\u0dca\\u0dcf-\\u0dd4\\u0dd6\\u0dd8-\\u0ddf\\u0df2\\u0df3\\u0e01-\\u0e3a\\u0e40-\\u0e4e\\u0e50-\\u0e59\\u0e81\\u0e82\\u0e84\\u0e87\\u0e88\\u0e8a\\u0e8d\\u0e94-\\u0e97\\u0e99-\\u0e9f\\u0ea1-\\u0ea3\\u0ea5\\u0ea7\\u0eaa\\u0eab\\u0ead-\\u0eb9\\u0ebb-\\u0ebd\\u0ec0-\\u0ec4\\u0ec6\\u0ec8-\\u0ecd\\u0ed0-\\u0ed9\\u0edc-\\u0edf\\u0f00\\u0f18\\u0f19\\u0f20-\\u0f29\\u0f35\\u0f37\\u0f39\\u0f3e-\\u0f47\\u0f49-\\u0f6c\\u0f71-\\u0f84\\u0f86-\\u0f97\\u0f99-\\u0fbc\\u0fc6\\u1000-\\u1049\\u1050-\\u109d\\u10a0-\\u10c5\\u10c7\\u10cd\\u10d0-\\u10fa\\u10fc-\\u1248\\u124a-\\u124d\\u1250-\\u1256\\u1258\\u125a-\\u125d\\u1260-\\u1288\\u128a-\\u128d\\u1290-\\u12b0\\u12b2-\\u12b5\\u12b8-\\u12be\\u12c0\\u12c2-\\u12c5\\u12c8-\\u12d6\\u12d8-\\u1310\\u1312-\\u1315\\u1318-\\u135a\\u135d-\\u135f\\u1380-\\u138f\\u13a0-\\u13f4\\u1401-\\u166c\\u166f-\\u167f\\u1681-\\u169a\\u16a0-\\u16ea\\u16ee-\\u16f0\\u1700-\\u170c\\u170e-\\u1714\\u1720-\\u1734\\u1740-\\u1753\\u1760-\\u176c\\u176e-\\u1770\\u1772\\u1773\\u1780-\\u17d3\\u17d7\\u17dc\\u17dd\\u17e0-\\u17e9\\u180b-\\u180d\\u1810-\\u1819\\u1820-\\u1877\\u1880-\\u18aa\\u18b0-\\u18f5\\u1900-\\u191c\\u1920-\\u192b\\u1930-\\u193b\\u1946-\\u196d\\u1970-\\u1974\\u1980-\\u19ab\\u19b0-\\u19c9\\u19d0-\\u19d9\\u1a00-\\u1a1b\\u1a20-\\u1a5e\\u1a60-\\u1a7c\\u1a7f-\\u1a89\\u1a90-\\u1a99\\u1aa7\\u1b00-\\u1b4b\\u1b50-\\u1b59\\u1b6b-\\u1b73\\u1b80-\\u1bf3\\u1c00-\\u1c37\\u1c40-\\u1c49\\u1c4d-\\u1c7d\\u1cd0-\\u1cd2\\u1cd4-\\u1cf6\\u1d00-\\u1de6\\u1dfc-\\u1f15\\u1f18-\\u1f1d\\u1f20-\\u1f45\\u1f48-\\u1f4d\\u1f50-\\u1f57\\u1f59\\u1f5b\\u1f5d\\u1f5f-\\u1f7d\\u1f80-\\u1fb4\\u1fb6-\\u1fbc\\u1fbe\\u1fc2-\\u1fc4\\u1fc6-\\u1fcc\\u1fd0-\\u1fd3\\u1fd6-\\u1fdb\\u1fe0-\\u1fec\\u1ff2-\\u1ff4\\u1ff6-\\u1ffc\\u200c\\u200d\\u203f\\u2040\\u2054\\u2071\\u207f\\u2090-\\u209c\\u20d0-\\u20dc\\u20e1\\u20e5-\\u20f0\\u2102\\u2107\\u210a-\\u2113\\u2115\\u2119-\\u211d\\u2124\\u2126\\u2128\\u212a-\\u212d\\u212f-\\u2139\\u213c-\\u213f\\u2145-\\u2149\\u214e\\u2160-\\u2188\\u2c00-\\u2c2e\\u2c30-\\u2c5e\\u2c60-\\u2ce4\\u2ceb-\\u2cf3\\u2d00-\\u2d25\\u2d27\\u2d2d\\u2d30-\\u2d67\\u2d6f\\u2d7f-\\u2d96\\u2da0-\\u2da6\\u2da8-\\u2dae\\u2db0-\\u2db6\\u2db8-\\u2dbe\\u2dc0-\\u2dc6\\u2dc8-\\u2dce\\u2dd0-\\u2dd6\\u2dd8-\\u2dde\\u2de0-\\u2dff\\u2e2f\\u3005-\\u3007\\u3021-\\u302f\\u3031-\\u3035\\u3038-\\u303c\\u3041-\\u3096\\u3099\\u309a\\u309d-\\u309f\\u30a1-\\u30fa\\u30fc-\\u30ff\\u3105-\\u312d\\u3131-\\u318e\\u31a0-\\u31ba\\u31f0-\\u31ff\\u3400-\\u4db5\\u4e00-\\u9fcc\\ua000-\\ua48c\\ua4d0-\\ua4fd\\ua500-\\ua60c\\ua610-\\ua62b\\ua640-\\ua66f\\ua674-\\ua67d\\ua67f-\\ua697\\ua69f-\\ua6f1\\ua717-\\ua71f\\ua722-\\ua788\\ua78b-\\ua78e\\ua790-\\ua793\\ua7a0-\\ua7aa\\ua7f8-\\ua827\\ua840-\\ua873\\ua880-\\ua8c4\\ua8d0-\\ua8d9\\ua8e0-\\ua8f7\\ua8fb\\ua900-\\ua92d\\ua930-\\ua953\\ua960-\\ua97c\\ua980-\\ua9c0\\ua9cf-\\ua9d9\\uaa00-\\uaa36\\uaa40-\\uaa4d\\uaa50-\\uaa59\\uaa60-\\uaa76\\uaa7a\\uaa7b\\uaa80-\\uaac2\\uaadb-\\uaadd\\uaae0-\\uaaef\\uaaf2-\\uaaf6\\uab01-\\uab06\\uab09-\\uab0e\\uab11-\\uab16\\uab20-\\uab26\\uab28-\\uab2e\\uabc0-\\uabea\\uabec\\uabed\\uabf0-\\uabf9\\uac00-\\ud7a3\\ud7b0-\\ud7c6\\ud7cb-\\ud7fb\\uf900-\\ufa6d\\ufa70-\\ufad9\\ufb00-\\ufb06\\ufb13-\\ufb17\\ufb1d-\\ufb28\\ufb2a-\\ufb36\\ufb38-\\ufb3c\\ufb3e\\ufb40\\ufb41\\ufb43\\ufb44\\ufb46-\\ufbb1\\ufbd3-\\ufd3d\\ufd50-\\ufd8f\\ufd92-\\ufdc7\\ufdf0-\\ufdfb\\ufe00-\\ufe0f\\ufe20-\\ufe26\\ufe33\\ufe34\\ufe4d-\\ufe4f\\ufe70-\\ufe74\\ufe76-\\ufefc\\uff10-\\uff19\\uff21-\\uff3a\\uff3f\\uff41-\\uff5a\\uff66-\\uffbe\\uffc2-\\uffc7\\uffca-\\uffcf\\uffd2-\\uffd7\\uffda-\\uffdc]')\n    };\n\n    function getDefaultOptions() {\n        // default options\n        return {\n            indent: null,\n            base: null,\n            parse: null,\n            comment: false,\n            format: {\n                indent: {\n                    style: '    ',\n                    base: 0,\n                    adjustMultilineComment: false\n                },\n                json: false,\n                renumber: false,\n                hexadecimal: false,\n                quotes: 'single',\n                escapeless: false,\n                compact: false,\n                parentheses: true,\n                semicolons: true,\n                safeConcatenation: false\n            },\n            moz: {\n                starlessGenerator: false,\n                parenthesizedComprehensionBlock: false\n            },\n            sourceMap: null,\n            sourceMapRoot: null,\n            sourceMapWithCode: false,\n            directive: false,\n            verbatim: null\n        };\n    }\n\n    function stringToArray(str) {\n        var length = str.length,\n            result = [],\n            i;\n        for (i = 0; i < length; i += 1) {\n            result[i] = str.charAt(i);\n        }\n        return result;\n    }\n\n    function stringRepeat(str, num) {\n        var result = '';\n\n        for (num |= 0; num > 0; num >>>= 1, str += str) {\n            if (num & 1) {\n                result += str;\n            }\n        }\n\n        return result;\n    }\n\n    isArray = Array.isArray;\n    if (!isArray) {\n        isArray = function isArray(array) {\n            return Object.prototype.toString.call(array) === '[object Array]';\n        };\n    }\n\n    // Fallback for the non SourceMap environment\n    function SourceNodeMock(line, column, filename, chunk) {\n        var result = [];\n\n        function flatten(input) {\n            var i, iz;\n            if (isArray(input)) {\n                for (i = 0, iz = input.length; i < iz; ++i) {\n                    flatten(input[i]);\n                }\n            } else if (input instanceof SourceNodeMock) {\n                result.push(input);\n            } else if (typeof input === 'string' && input) {\n                result.push(input);\n            }\n        }\n\n        flatten(chunk);\n        this.children = result;\n    }\n\n    SourceNodeMock.prototype.toString = function toString() {\n        var res = '', i, iz, node;\n        for (i = 0, iz = this.children.length; i < iz; ++i) {\n            node = this.children[i];\n            if (node instanceof SourceNodeMock) {\n                res += node.toString();\n            } else {\n                res += node;\n            }\n        }\n        return res;\n    };\n\n    SourceNodeMock.prototype.replaceRight = function replaceRight(pattern, replacement) {\n        var last = this.children[this.children.length - 1];\n        if (last instanceof SourceNodeMock) {\n            last.replaceRight(pattern, replacement);\n        } else if (typeof last === 'string') {\n            this.children[this.children.length - 1] = last.replace(pattern, replacement);\n        } else {\n            this.children.push(''.replace(pattern, replacement));\n        }\n        return this;\n    };\n\n    SourceNodeMock.prototype.join = function join(sep) {\n        var i, iz, result;\n        result = [];\n        iz = this.children.length;\n        if (iz > 0) {\n            for (i = 0, iz -= 1; i < iz; ++i) {\n                result.push(this.children[i], sep);\n            }\n            result.push(this.children[iz]);\n            this.children = result;\n        }\n        return this;\n    };\n\n    function hasLineTerminator(str) {\n        return (/[\\r\\n]/g).test(str);\n    }\n\n    function endsWithLineTerminator(str) {\n        var ch = str.charAt(str.length - 1);\n        return ch === '\\r' || ch === '\\n';\n    }\n\n    function shallowCopy(obj) {\n        var ret = {}, key;\n        for (key in obj) {\n            if (obj.hasOwnProperty(key)) {\n                ret[key] = obj[key];\n            }\n        }\n        return ret;\n    }\n\n    function deepCopy(obj) {\n        var ret = {}, key, val;\n        for (key in obj) {\n            if (obj.hasOwnProperty(key)) {\n                val = obj[key];\n                if (typeof val === 'object' && val !== null) {\n                    ret[key] = deepCopy(val);\n                } else {\n                    ret[key] = val;\n                }\n            }\n        }\n        return ret;\n    }\n\n    function updateDeeply(target, override) {\n        var key, val;\n\n        function isHashObject(target) {\n            return typeof target === 'object' && target instanceof Object && !(target instanceof RegExp);\n        }\n\n        for (key in override) {\n            if (override.hasOwnProperty(key)) {\n                val = override[key];\n                if (isHashObject(val)) {\n                    if (isHashObject(target[key])) {\n                        updateDeeply(target[key], val);\n                    } else {\n                        target[key] = updateDeeply({}, val);\n                    }\n                } else {\n                    target[key] = val;\n                }\n            }\n        }\n        return target;\n    }\n\n    function generateNumber(value) {\n        var result, point, temp, exponent, pos;\n\n        if (value !== value) {\n            throw new Error('Numeric literal whose value is NaN');\n        }\n        if (value < 0 || (value === 0 && 1 / value < 0)) {\n            throw new Error('Numeric literal whose value is negative');\n        }\n\n        if (value === 1 / 0) {\n            return json ? 'null' : renumber ? '1e400' : '1e+400';\n        }\n\n        result = '' + value;\n        if (!renumber || result.length < 3) {\n            return result;\n        }\n\n        point = result.indexOf('.');\n        if (!json && result.charAt(0) === '0' && point === 1) {\n            point = 0;\n            result = result.slice(1);\n        }\n        temp = result;\n        result = result.replace('e+', 'e');\n        exponent = 0;\n        if ((pos = temp.indexOf('e')) > 0) {\n            exponent = +temp.slice(pos + 1);\n            temp = temp.slice(0, pos);\n        }\n        if (point >= 0) {\n            exponent -= temp.length - point - 1;\n            temp = +(temp.slice(0, point) + temp.slice(point + 1)) + '';\n        }\n        pos = 0;\n        while (temp.charAt(temp.length + pos - 1) === '0') {\n            pos -= 1;\n        }\n        if (pos !== 0) {\n            exponent -= pos;\n            temp = temp.slice(0, pos);\n        }\n        if (exponent !== 0) {\n            temp += 'e' + exponent;\n        }\n        if ((temp.length < result.length ||\n                    (hexadecimal && value > 1e12 && Math.floor(value) === value && (temp = '0x' + value.toString(16)).length < result.length)) &&\n                +temp === value) {\n            result = temp;\n        }\n\n        return result;\n    }\n\n    // Generate valid RegExp expression.\n    // This function is based on https://github.com/Constellation/iv Engine\n\n    function escapeRegExpCharacter(ch, previousIsBackslash) {\n        // not handling '\\' and handling \\u2028 or \\u2029 to unicode escape sequence\n        if ((ch & ~1) === 0x2028) {\n            return (previousIsBackslash ? 'u' : '\\\\u') + ((ch === 0x2028) ? '2028' : '2029');\n        } else if (ch === 10 || ch === 13) {  // \\n, \\r\n            return (previousIsBackslash ? '' : '\\\\') + ((ch === 10) ? 'n' : 'r');\n        }\n        return String.fromCharCode(ch);\n    }\n\n    function generateRegExp(reg) {\n        var match, result, flags, i, iz, ch, characterInBrack, previousIsBackslash;\n\n        result = reg.toString();\n\n        if (reg.source) {\n            // extract flag from toString result\n            match = result.match(/\\/([^/]*)$/);\n            if (!match) {\n                return result;\n            }\n\n            flags = match[1];\n            result = '';\n\n            characterInBrack = false;\n            previousIsBackslash = false;\n            for (i = 0, iz = reg.source.length; i < iz; ++i) {\n                ch = reg.source.charCodeAt(i);\n\n                if (!previousIsBackslash) {\n                    if (characterInBrack) {\n                        if (ch === 93) {  // ]\n                            characterInBrack = false;\n                        }\n                    } else {\n                        if (ch === 47) {  // /\n                            result += '\\\\';\n                        } else if (ch === 91) {  // [\n                            characterInBrack = true;\n                        }\n                    }\n                    result += escapeRegExpCharacter(ch, previousIsBackslash);\n                    previousIsBackslash = ch === 92;  // \\\n                } else {\n                    // if new RegExp(\"\\\\\\n') is provided, create /\\n/\n                    result += escapeRegExpCharacter(ch, previousIsBackslash);\n                    // prevent like /\\\\[/]/\n                    previousIsBackslash = false;\n                }\n            }\n\n            return '/' + result + '/' + flags;\n        }\n\n        return result;\n    }\n\n    function escapeAllowedCharacter(ch, next) {\n        var code = ch.charCodeAt(0), hex = code.toString(16), result = '\\\\';\n\n        switch (ch) {\n        case '\\b':\n            result += 'b';\n            break;\n        case '\\f':\n            result += 'f';\n            break;\n        case '\\t':\n            result += 't';\n            break;\n        default:\n            if (json || code > 0xff) {\n                result += 'u' + '0000'.slice(hex.length) + hex;\n            } else if (ch === '\\u0000' && '0123456789'.indexOf(next) < 0) {\n                result += '0';\n            } else if (ch === '\\x0B') { // '\\v'\n                result += 'x0B';\n            } else {\n                result += 'x' + '00'.slice(hex.length) + hex;\n            }\n            break;\n        }\n\n        return result;\n    }\n\n    function escapeDisallowedCharacter(ch) {\n        var result = '\\\\';\n        switch (ch) {\n        case '\\\\':\n            result += '\\\\';\n            break;\n        case '\\n':\n            result += 'n';\n            break;\n        case '\\r':\n            result += 'r';\n            break;\n        case '\\u2028':\n            result += 'u2028';\n            break;\n        case '\\u2029':\n            result += 'u2029';\n            break;\n        default:\n            throw new Error('Incorrectly classified character');\n        }\n\n        return result;\n    }\n\n    function escapeDirective(str) {\n        var i, iz, ch, single, buf, quote;\n\n        buf = str;\n        if (typeof buf[0] === 'undefined') {\n            buf = stringToArray(buf);\n        }\n\n        quote = quotes === 'double' ? '\"' : '\\'';\n        for (i = 0, iz = buf.length; i < iz; i += 1) {\n            ch = buf[i];\n            if (ch === '\\'') {\n                quote = '\"';\n                break;\n            } else if (ch === '\"') {\n                quote = '\\'';\n                break;\n            } else if (ch === '\\\\') {\n                i += 1;\n            }\n        }\n\n        return quote + str + quote;\n    }\n\n    function escapeString(str) {\n        var result = '', i, len, ch, next, singleQuotes = 0, doubleQuotes = 0, single;\n\n        if (typeof str[0] === 'undefined') {\n            str = stringToArray(str);\n        }\n\n        for (i = 0, len = str.length; i < len; i += 1) {\n            ch = str[i];\n            if (ch === '\\'') {\n                singleQuotes += 1;\n            } else if (ch === '\"') {\n                doubleQuotes += 1;\n            } else if (ch === '/' && json) {\n                result += '\\\\';\n            } else if ('\\\\\\n\\r\\u2028\\u2029'.indexOf(ch) >= 0) {\n                result += escapeDisallowedCharacter(ch);\n                continue;\n            } else if ((json && ch < ' ') || !(json || escapeless || (ch >= ' ' && ch <= '~'))) {\n                result += escapeAllowedCharacter(ch, str[i + 1]);\n                continue;\n            }\n            result += ch;\n        }\n\n        single = !(quotes === 'double' || (quotes === 'auto' && doubleQuotes < singleQuotes));\n        str = result;\n        result = single ? '\\'' : '\"';\n\n        if (typeof str[0] === 'undefined') {\n            str = stringToArray(str);\n        }\n\n        for (i = 0, len = str.length; i < len; i += 1) {\n            ch = str[i];\n            if ((ch === '\\'' && single) || (ch === '\"' && !single)) {\n                result += '\\\\';\n            }\n            result += ch;\n        }\n\n        return result + (single ? '\\'' : '\"');\n    }\n\n    function isWhiteSpace(ch) {\n        // Use `\\x0B` instead of `\\v` for IE < 9 compatibility\n        return '\\t\\x0B\\f \\xa0'.indexOf(ch) >= 0 || (ch.charCodeAt(0) >= 0x1680 && '\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000\\ufeff'.indexOf(ch) >= 0);\n    }\n\n    function isLineTerminator(ch) {\n        return '\\n\\r\\u2028\\u2029'.indexOf(ch) >= 0;\n    }\n\n    function isIdentifierPart(ch) {\n        return (ch === '$') || (ch === '_') || (ch === '\\\\') ||\n            (ch >= 'a' && ch <= 'z') || (ch >= 'A' && ch <= 'Z') ||\n            ((ch >= '0') && (ch <= '9')) ||\n            ((ch.charCodeAt(0) >= 0x80) && Regex.NonAsciiIdentifierPart.test(ch));\n    }\n\n    function toSourceNode(generated, node) {\n        if (node == null) {\n            if (generated instanceof SourceNode) {\n                return generated;\n            } else {\n                node = {};\n            }\n        }\n        if (node.loc == null) {\n            return new SourceNode(null, null, sourceMap, generated);\n        }\n        return new SourceNode(node.loc.start.line, node.loc.start.column, (sourceMap === true ? node.loc.source || null : sourceMap), generated);\n    }\n\n    function join(left, right) {\n        var leftSource = toSourceNode(left).toString(),\n            rightSource = toSourceNode(right).toString(),\n            leftChar = leftSource.charAt(leftSource.length - 1),\n            rightChar = rightSource.charAt(0);\n\n        if (((leftChar === '+' || leftChar === '-') && leftChar === rightChar) || (isIdentifierPart(leftChar) && isIdentifierPart(rightChar))) {\n            return [left, ' ', right];\n        } else if (isWhiteSpace(leftChar) || isLineTerminator(leftChar) || isWhiteSpace(rightChar) || isLineTerminator(rightChar)) {\n            return [left, right];\n        }\n        return [left, space, right];\n    }\n\n    function addIndent(stmt) {\n        return [base, stmt];\n    }\n\n    function withIndent(fn) {\n        var previousBase, result;\n        previousBase = base;\n        base += indent;\n        result = fn.call(this, base);\n        base = previousBase;\n        return result;\n    }\n\n    function calculateSpaces(str) {\n        var i;\n        for (i = str.length - 1; i >= 0; i -= 1) {\n            if (isLineTerminator(str.charAt(i))) {\n                break;\n            }\n        }\n        return (str.length - 1) - i;\n    }\n\n    function adjustMultilineComment(value, specialBase) {\n        var array, i, len, line, j, ch, spaces, previousBase;\n\n        array = value.split(/\\r\\n|[\\r\\n]/);\n        spaces = Number.MAX_VALUE;\n\n        // first line doesn't have indentation\n        for (i = 1, len = array.length; i < len; i += 1) {\n            line = array[i];\n            j = 0;\n            while (j < line.length && isWhiteSpace(line[j])) {\n                j += 1;\n            }\n            if (spaces > j) {\n                spaces = j;\n            }\n        }\n\n        if (typeof specialBase !== 'undefined') {\n            // pattern like\n            // {\n            //   var t = 20;  /*\n            //                 * this is comment\n            //                 */\n            // }\n            previousBase = base;\n            if (array[1][spaces] === '*') {\n                specialBase += ' ';\n            }\n            base = specialBase;\n        } else {\n            if (spaces & 1) {\n                // /*\n                //  *\n                //  */\n                // If spaces are odd number, above pattern is considered.\n                // We waste 1 space.\n                spaces -= 1;\n            }\n            previousBase = base;\n        }\n\n        for (i = 1, len = array.length; i < len; i += 1) {\n            array[i] = toSourceNode(addIndent(array[i].slice(spaces))).join('');\n        }\n\n        base = previousBase;\n\n        return array.join('\\n');\n    }\n\n    function generateComment(comment, specialBase) {\n        if (comment.type === 'Line') {\n            if (endsWithLineTerminator(comment.value)) {\n                return '//' + comment.value;\n            } else {\n                // Always use LineTerminator\n                return '//' + comment.value + '\\n';\n            }\n        }\n        if (extra.format.indent.adjustMultilineComment && /[\\n\\r]/.test(comment.value)) {\n            return adjustMultilineComment('/*' + comment.value + '*/', specialBase);\n        }\n        return '/*' + comment.value + '*/';\n    }\n\n    function addCommentsToStatement(stmt, result) {\n        var i, len, comment, save, node, tailingToStatement, specialBase, fragment;\n\n        if (stmt.leadingComments && stmt.leadingComments.length > 0) {\n            save = result;\n\n            comment = stmt.leadingComments[0];\n            result = [];\n            if (safeConcatenation && stmt.type === Syntax.Program && stmt.body.length === 0) {\n                result.push('\\n');\n            }\n            result.push(generateComment(comment));\n            if (!endsWithLineTerminator(toSourceNode(result).toString())) {\n                result.push('\\n');\n            }\n\n            for (i = 1, len = stmt.leadingComments.length; i < len; i += 1) {\n                comment = stmt.leadingComments[i];\n                fragment = [generateComment(comment)];\n                if (!endsWithLineTerminator(toSourceNode(fragment).toString())) {\n                    fragment.push('\\n');\n                }\n                result.push(addIndent(fragment));\n            }\n\n            result.push(addIndent(save));\n        }\n\n        if (stmt.trailingComments) {\n            tailingToStatement = !endsWithLineTerminator(toSourceNode(result).toString());\n            specialBase = stringRepeat(' ', calculateSpaces(toSourceNode([base, result, indent]).toString()));\n            for (i = 0, len = stmt.trailingComments.length; i < len; i += 1) {\n                comment = stmt.trailingComments[i];\n                if (tailingToStatement) {\n                    // We assume target like following script\n                    //\n                    // var t = 20;  /**\n                    //               * This is comment of t\n                    //               */\n                    if (i === 0) {\n                        // first case\n                        result = [result, indent];\n                    } else {\n                        result = [result, specialBase];\n                    }\n                    result.push(generateComment(comment, specialBase));\n                } else {\n                    result = [result, addIndent(generateComment(comment))];\n                }\n                if (i !== len - 1 && !endsWithLineTerminator(toSourceNode(result).toString())) {\n                    result = [result, '\\n'];\n                }\n            }\n        }\n\n        return result;\n    }\n\n    function parenthesize(text, current, should) {\n        if (current < should) {\n            return ['(', text, ')'];\n        }\n        return text;\n    }\n\n    function maybeBlock(stmt, semicolonOptional, functionBody) {\n        var result, noLeadingComment;\n\n        noLeadingComment = !extra.comment || !stmt.leadingComments;\n\n        if (stmt.type === Syntax.BlockStatement && noLeadingComment) {\n            return [space, generateStatement(stmt, { functionBody: functionBody })];\n        }\n\n        if (stmt.type === Syntax.EmptyStatement && noLeadingComment) {\n            return ';';\n        }\n\n        withIndent(function () {\n            result = [newline, addIndent(generateStatement(stmt, { semicolonOptional: semicolonOptional, functionBody: functionBody }))];\n        });\n\n        return result;\n    }\n\n    function maybeBlockSuffix(stmt, result) {\n        var ends = endsWithLineTerminator(toSourceNode(result).toString());\n        if (stmt.type === Syntax.BlockStatement && (!extra.comment || !stmt.leadingComments) && !ends) {\n            return [result, space];\n        }\n        if (ends) {\n            return [result, base];\n        }\n        return [result, newline, base];\n    }\n\n    function generateVerbatim(expr, option) {\n        var i, result;\n        result = expr[extra.verbatim].split(/\\r\\n|\\n/);\n        for (i = 1; i < result.length; i++) {\n            result[i] = newline + base + result[i];\n        }\n\n        result = parenthesize(result, Precedence.Sequence, option.precedence);\n        return toSourceNode(result, expr);\n    }\n\n    function generateFunctionBody(node) {\n        var result, i, len, expr;\n        result = ['('];\n        for (i = 0, len = node.params.length; i < len; i += 1) {\n            result.push(node.params[i].name);\n            if (i + 1 < len) {\n                result.push(',' + space);\n            }\n        }\n        result.push(')');\n\n        if (node.expression) {\n            result.push(space);\n            expr = generateExpression(node.body, {\n                precedence: Precedence.Assignment,\n                allowIn: true,\n                allowCall: true\n            });\n            if (expr.toString().charAt(0) === '{') {\n                expr = ['(', expr, ')'];\n            }\n            result.push(expr);\n        } else {\n            result.push(maybeBlock(node.body, false, true));\n        }\n        return result;\n    }\n\n    function generateExpression(expr, option) {\n        var result, precedence, type, currentPrecedence, i, len, raw, fragment, multiline, leftChar, leftSource, rightChar, rightSource, allowIn, allowCall, allowUnparenthesizedNew, property, key, value;\n\n        precedence = option.precedence;\n        allowIn = option.allowIn;\n        allowCall = option.allowCall;\n        type = expr.type || option.type;\n\n        if (extra.verbatim && expr.hasOwnProperty(extra.verbatim)) {\n            return generateVerbatim(expr, option);\n        }\n\n        switch (type) {\n        case Syntax.SequenceExpression:\n            result = [];\n            allowIn |= (Precedence.Sequence < precedence);\n            for (i = 0, len = expr.expressions.length; i < len; i += 1) {\n                result.push(generateExpression(expr.expressions[i], {\n                    precedence: Precedence.Assignment,\n                    allowIn: allowIn,\n                    allowCall: true\n                }));\n                if (i + 1 < len) {\n                    result.push(',' + space);\n                }\n            }\n            result = parenthesize(result, Precedence.Sequence, precedence);\n            break;\n\n        case Syntax.AssignmentExpression:\n            allowIn |= (Precedence.Assignment < precedence);\n            result = parenthesize(\n                [\n                    generateExpression(expr.left, {\n                        precedence: Precedence.Call,\n                        allowIn: allowIn,\n                        allowCall: true\n                    }),\n                    space + expr.operator + space,\n                    generateExpression(expr.right, {\n                        precedence: Precedence.Assignment,\n                        allowIn: allowIn,\n                        allowCall: true\n                    })\n                ],\n                Precedence.Assignment,\n                precedence\n            );\n            break;\n\n        case Syntax.ConditionalExpression:\n            allowIn |= (Precedence.Conditional < precedence);\n            result = parenthesize(\n                [\n                    generateExpression(expr.test, {\n                        precedence: Precedence.LogicalOR,\n                        allowIn: allowIn,\n                        allowCall: true\n                    }),\n                    space + '?' + space,\n                    generateExpression(expr.consequent, {\n                        precedence: Precedence.Assignment,\n                        allowIn: allowIn,\n                        allowCall: true\n                    }),\n                    space + ':' + space,\n                    generateExpression(expr.alternate, {\n                        precedence: Precedence.Assignment,\n                        allowIn: allowIn,\n                        allowCall: true\n                    })\n                ],\n                Precedence.Conditional,\n                precedence\n            );\n            break;\n\n        case Syntax.LogicalExpression:\n        case Syntax.BinaryExpression:\n            currentPrecedence = BinaryPrecedence[expr.operator];\n\n            allowIn |= (currentPrecedence < precedence);\n\n            fragment = generateExpression(expr.left, {\n                precedence: currentPrecedence,\n                allowIn: allowIn,\n                allowCall: true\n            });\n\n            leftSource = fragment.toString();\n\n            if (leftSource.charAt(leftSource.length - 1) === '/' && isIdentifierPart(expr.operator.charAt(0))) {\n                result = [fragment, ' ', expr.operator];\n            } else {\n                result = join(fragment, expr.operator);\n            }\n\n            fragment = generateExpression(expr.right, {\n                precedence: currentPrecedence + 1,\n                allowIn: allowIn,\n                allowCall: true\n            });\n\n            if (expr.operator === '/' && fragment.toString().charAt(0) === '/') {\n                // If '/' concats with '/', it is interpreted as comment start\n                result.push(' ', fragment);\n            } else {\n                result = join(result, fragment);\n            }\n\n            if (expr.operator === 'in' && !allowIn) {\n                result = ['(', result, ')'];\n            } else {\n                result = parenthesize(result, currentPrecedence, precedence);\n            }\n\n            break;\n\n        case Syntax.CallExpression:\n            result = [generateExpression(expr.callee, {\n                precedence: Precedence.Call,\n                allowIn: true,\n                allowCall: true,\n                allowUnparenthesizedNew: false\n            })];\n\n            result.push('(');\n            for (i = 0, len = expr['arguments'].length; i < len; i += 1) {\n                result.push(generateExpression(expr['arguments'][i], {\n                    precedence: Precedence.Assignment,\n                    allowIn: true,\n                    allowCall: true\n                }));\n                if (i + 1 < len) {\n                    result.push(',' + space);\n                }\n            }\n            result.push(')');\n\n            if (!allowCall) {\n                result = ['(', result, ')'];\n            } else {\n                result = parenthesize(result, Precedence.Call, precedence);\n            }\n            break;\n\n        case Syntax.NewExpression:\n            len = expr['arguments'].length;\n            allowUnparenthesizedNew = option.allowUnparenthesizedNew === undefined || option.allowUnparenthesizedNew;\n\n            result = join(\n                'new',\n                generateExpression(expr.callee, {\n                    precedence: Precedence.New,\n                    allowIn: true,\n                    allowCall: false,\n                    allowUnparenthesizedNew: allowUnparenthesizedNew && !parentheses && len === 0\n                })\n            );\n\n            if (!allowUnparenthesizedNew || parentheses || len > 0) {\n                result.push('(');\n                for (i = 0; i < len; i += 1) {\n                    result.push(generateExpression(expr['arguments'][i], {\n                        precedence: Precedence.Assignment,\n                        allowIn: true,\n                        allowCall: true\n                    }));\n                    if (i + 1 < len) {\n                        result.push(',' + space);\n                    }\n                }\n                result.push(')');\n            }\n\n            result = parenthesize(result, Precedence.New, precedence);\n            break;\n\n        case Syntax.MemberExpression:\n            result = [generateExpression(expr.object, {\n                precedence: Precedence.Call,\n                allowIn: true,\n                allowCall: allowCall,\n                allowUnparenthesizedNew: false\n            })];\n\n            if (expr.computed) {\n                result.push('[', generateExpression(expr.property, {\n                    precedence: Precedence.Sequence,\n                    allowIn: true,\n                    allowCall: allowCall\n                }), ']');\n            } else {\n                if (expr.object.type === Syntax.Literal && typeof expr.object.value === 'number') {\n                    if (result.indexOf('.') < 0) {\n                        if (!/[eExX]/.test(result) && !(result.length >= 2 && result[0] === '0')) {\n                            result.push('.');\n                        }\n                    }\n                }\n                result.push('.' + expr.property.name);\n            }\n\n            result = parenthesize(result, Precedence.Member, precedence);\n            break;\n\n        case Syntax.UnaryExpression:\n            fragment = generateExpression(expr.argument, {\n                precedence: Precedence.Unary,\n                allowIn: true,\n                allowCall: true\n            });\n\n            if (space === '') {\n                result = join(expr.operator, fragment);\n            } else {\n                result = [expr.operator];\n                if (expr.operator.length > 2) {\n                    // delete, void, typeof\n                    // get `typeof []`, not `typeof[]`\n                    result = join(result, fragment);\n                } else {\n                    // Prevent inserting spaces between operator and argument if it is unnecessary\n                    // like, `!cond`\n                    leftSource = toSourceNode(result).toString();\n                    leftChar = leftSource.charAt(leftSource.length - 1);\n                    rightChar = fragment.toString().charAt(0);\n\n                    if (((leftChar === '+' || leftChar === '-') && leftChar === rightChar) || (isIdentifierPart(leftChar) && isIdentifierPart(rightChar))) {\n                        result.push(' ', fragment);\n                    } else {\n                        result.push(fragment);\n                    }\n                }\n            }\n            result = parenthesize(result, Precedence.Unary, precedence);\n            break;\n\n        case Syntax.YieldExpression:\n            if (expr.delegate) {\n                result = 'yield*';\n            } else {\n                result = 'yield';\n            }\n            if (expr.argument) {\n                result = join(\n                    result,\n                    generateExpression(expr.argument, {\n                        precedence: Precedence.Assignment,\n                        allowIn: true,\n                        allowCall: true\n                    })\n                );\n            }\n            break;\n\n        case Syntax.UpdateExpression:\n            if (expr.prefix) {\n                result = parenthesize(\n                    [\n                        expr.operator,\n                        generateExpression(expr.argument, {\n                            precedence: Precedence.Unary,\n                            allowIn: true,\n                            allowCall: true\n                        })\n                    ],\n                    Precedence.Unary,\n                    precedence\n                );\n            } else {\n                result = parenthesize(\n                    [\n                        generateExpression(expr.argument, {\n                            precedence: Precedence.Postfix,\n                            allowIn: true,\n                            allowCall: true\n                        }),\n                        expr.operator\n                    ],\n                    Precedence.Postfix,\n                    precedence\n                );\n            }\n            break;\n\n        case Syntax.FunctionExpression:\n            result = 'function';\n            if (expr.id) {\n                result += ' ' + expr.id.name;\n            } else {\n                result += space;\n            }\n\n            result = [result, generateFunctionBody(expr)];\n            break;\n\n        case Syntax.ArrayPattern:\n        case Syntax.ArrayExpression:\n            if (!expr.elements.length) {\n                result = '[]';\n                break;\n            }\n            multiline = expr.elements.length > 1;\n            result = ['[', multiline ? newline : ''];\n            withIndent(function (indent) {\n                for (i = 0, len = expr.elements.length; i < len; i += 1) {\n                    if (!expr.elements[i]) {\n                        if (multiline) {\n                            result.push(indent);\n                        }\n                        if (i + 1 === len) {\n                            result.push(',');\n                        }\n                    } else {\n                        result.push(multiline ? indent : '', generateExpression(expr.elements[i], {\n                            precedence: Precedence.Assignment,\n                            allowIn: true,\n                            allowCall: true\n                        }));\n                    }\n                    if (i + 1 < len) {\n                        result.push(',' + (multiline ? newline : space));\n                    }\n                }\n            });\n            if (multiline && !endsWithLineTerminator(toSourceNode(result).toString())) {\n                result.push(newline);\n            }\n            result.push(multiline ? base : '', ']');\n            break;\n\n        case Syntax.Property:\n            if (expr.kind === 'get' || expr.kind === 'set') {\n                result = [\n                    expr.kind + ' ',\n                    generateExpression(expr.key, {\n                        precedence: Precedence.Sequence,\n                        allowIn: true,\n                        allowCall: true\n                    }),\n                    generateFunctionBody(expr.value)\n                ];\n            } else {\n                if (expr.shorthand) {\n                    result = generateExpression(expr.key, {\n                        precedence: Precedence.Sequence,\n                        allowIn: true,\n                        allowCall: true\n                    });\n                } else if (expr.method) {\n                    result = [];\n                    if (expr.value.generator) {\n                        result.push('*');\n                    }\n                    result.push(generateExpression(expr.key, {\n                        precedence: Precedence.Sequence,\n                        allowIn: true,\n                        allowCall: true\n                    }), generateFunctionBody(expr.value));\n                } else {\n                    result = [\n                        generateExpression(expr.key, {\n                            precedence: Precedence.Sequence,\n                            allowIn: true,\n                            allowCall: true\n                        }),\n                        ':' + space,\n                        generateExpression(expr.value, {\n                            precedence: Precedence.Assignment,\n                            allowIn: true,\n                            allowCall: true\n                        })\n                    ];\n                }\n            }\n            break;\n\n        case Syntax.ObjectExpression:\n            if (!expr.properties.length) {\n                result = '{}';\n                break;\n            }\n            multiline = expr.properties.length > 1;\n\n            withIndent(function (indent) {\n                fragment = generateExpression(expr.properties[0], {\n                    precedence: Precedence.Sequence,\n                    allowIn: true,\n                    allowCall: true,\n                    type: Syntax.Property\n                });\n            });\n\n            if (!multiline) {\n                // issues 4\n                // Do not transform from\n                //   dejavu.Class.declare({\n                //       method2: function () {}\n                //   });\n                // to\n                //   dejavu.Class.declare({method2: function () {\n                //       }});\n                if (!hasLineTerminator(toSourceNode(fragment).toString())) {\n                    result = [ '{', space, fragment, space, '}' ];\n                    break;\n                }\n            }\n\n            withIndent(function (indent) {\n                result = [ '{', newline, indent, fragment ];\n\n                if (multiline) {\n                    result.push(',' + newline);\n                    for (i = 1, len = expr.properties.length; i < len; i += 1) {\n                        result.push(indent, generateExpression(expr.properties[i], {\n                            precedence: Precedence.Sequence,\n                            allowIn: true,\n                            allowCall: true,\n                            type: Syntax.Property\n                        }));\n                        if (i + 1 < len) {\n                            result.push(',' + newline);\n                        }\n                    }\n                }\n            });\n\n            if (!endsWithLineTerminator(toSourceNode(result).toString())) {\n                result.push(newline);\n            }\n            result.push(base, '}');\n            break;\n\n        case Syntax.ObjectPattern:\n            if (!expr.properties.length) {\n                result = '{}';\n                break;\n            }\n\n            multiline = false;\n            if (expr.properties.length === 1) {\n                property = expr.properties[0];\n                if (property.value.type !== Syntax.Identifier) {\n                    multiline = true;\n                }\n            } else {\n                for (i = 0, len = expr.properties.length; i < len; i += 1) {\n                    property = expr.properties[i];\n                    if (!property.shorthand) {\n                        multiline = true;\n                        break;\n                    }\n                }\n            }\n            result = ['{', multiline ? newline : '' ];\n\n            withIndent(function (indent) {\n                for (i = 0, len = expr.properties.length; i < len; i += 1) {\n                    result.push(multiline ? indent : '', generateExpression(expr.properties[i], {\n                        precedence: Precedence.Sequence,\n                        allowIn: true,\n                        allowCall: true\n                    }));\n                    if (i + 1 < len) {\n                        result.push(',' + (multiline ? newline : space));\n                    }\n                }\n            });\n\n            if (multiline && !endsWithLineTerminator(toSourceNode(result).toString())) {\n                result.push(newline);\n            }\n            result.push(multiline ? base : '', '}');\n            break;\n\n        case Syntax.ThisExpression:\n            result = 'this';\n            break;\n\n        case Syntax.Identifier:\n            result = expr.name;\n            break;\n\n        case Syntax.Literal:\n            if (expr.hasOwnProperty('raw') && parse) {\n                try {\n                    raw = parse(expr.raw).body[0].expression;\n                    if (raw.type === Syntax.Literal) {\n                        if (raw.value === expr.value) {\n                            result = expr.raw;\n                            break;\n                        }\n                    }\n                } catch (e) {\n                    // not use raw property\n                }\n            }\n\n            if (expr.value === null) {\n                result = 'null';\n                break;\n            }\n\n            if (typeof expr.value === 'string') {\n                result = escapeString(expr.value);\n                break;\n            }\n\n            if (typeof expr.value === 'number') {\n                result = generateNumber(expr.value);\n                break;\n            }\n\n            if (typeof expr.value === 'boolean') {\n                result = expr.value ? 'true' : 'false';\n                break;\n            }\n\n            result = generateRegExp(expr.value);\n            break;\n\n        case Syntax.ComprehensionExpression:\n            result = [\n                '[',\n                generateExpression(expr.body, {\n                    precedence: Precedence.Assignment,\n                    allowIn: true,\n                    allowCall: true\n                })\n            ];\n\n            if (expr.blocks) {\n                for (i = 0, len = expr.blocks.length; i < len; i += 1) {\n                    fragment = generateExpression(expr.blocks[i], {\n                        precedence: Precedence.Sequence,\n                        allowIn: true,\n                        allowCall: true\n                    });\n                    result = join(result, fragment);\n                }\n            }\n\n            if (expr.filter) {\n                result = join(result, 'if' + space);\n                fragment = generateExpression(expr.filter, {\n                    precedence: Precedence.Sequence,\n                    allowIn: true,\n                    allowCall: true\n                });\n                if (extra.moz.parenthesizedComprehensionBlock) {\n                    result = join(result, [ '(', fragment, ')' ]);\n                } else {\n                    result = join(result, fragment);\n                }\n            }\n            result.push(']');\n            break;\n\n        case Syntax.ComprehensionBlock:\n            if (expr.left.type === Syntax.VariableDeclaration) {\n                fragment = [\n                    expr.left.kind + ' ',\n                    generateStatement(expr.left.declarations[0], {\n                        allowIn: false\n                    })\n                ];\n            } else {\n                fragment = generateExpression(expr.left, {\n                    precedence: Precedence.Call,\n                    allowIn: true,\n                    allowCall: true\n                });\n            }\n\n            fragment = join(fragment, expr.of ? 'of' : 'in');\n            fragment = join(fragment, generateExpression(expr.right, {\n                precedence: Precedence.Sequence,\n                allowIn: true,\n                allowCall: true\n            }));\n\n            if (extra.moz.parenthesizedComprehensionBlock) {\n                result = [ 'for' + space + '(', fragment, ')' ];\n            } else {\n                result = join('for' + space, fragment);\n            }\n            break;\n\n        default:\n            throw new Error('Unknown expression type: ' + expr.type);\n        }\n\n        return toSourceNode(result, expr);\n    }\n\n    function generateStatement(stmt, option) {\n        var i, len, result, node, allowIn, functionBody, directiveContext, fragment, semicolon;\n\n        allowIn = true;\n        semicolon = ';';\n        functionBody = false;\n        directiveContext = false;\n        if (option) {\n            allowIn = option.allowIn === undefined || option.allowIn;\n            if (!semicolons && option.semicolonOptional === true) {\n                semicolon = '';\n            }\n            functionBody = option.functionBody;\n            directiveContext = option.directiveContext;\n        }\n\n        switch (stmt.type) {\n        case Syntax.BlockStatement:\n            result = ['{', newline];\n\n            withIndent(function () {\n                for (i = 0, len = stmt.body.length; i < len; i += 1) {\n                    fragment = addIndent(generateStatement(stmt.body[i], {\n                        semicolonOptional: i === len - 1,\n                        directiveContext: functionBody\n                    }));\n                    result.push(fragment);\n                    if (!endsWithLineTerminator(toSourceNode(fragment).toString())) {\n                        result.push(newline);\n                    }\n                }\n            });\n\n            result.push(addIndent('}'));\n            break;\n\n        case Syntax.BreakStatement:\n            if (stmt.label) {\n                result = 'break ' + stmt.label.name + semicolon;\n            } else {\n                result = 'break' + semicolon;\n            }\n            break;\n\n        case Syntax.ContinueStatement:\n            if (stmt.label) {\n                result = 'continue ' + stmt.label.name + semicolon;\n            } else {\n                result = 'continue' + semicolon;\n            }\n            break;\n\n        case Syntax.DirectiveStatement:\n            if (stmt.raw) {\n                result = stmt.raw + semicolon;\n            } else {\n                result = escapeDirective(stmt.directive) + semicolon;\n            }\n            break;\n\n        case Syntax.DoWhileStatement:\n            // Because `do 42 while (cond)` is Syntax Error. We need semicolon.\n            result = join('do', maybeBlock(stmt.body));\n            result = maybeBlockSuffix(stmt.body, result);\n            result = join(result, [\n                'while' + space + '(',\n                generateExpression(stmt.test, {\n                    precedence: Precedence.Sequence,\n                    allowIn: true,\n                    allowCall: true\n                }),\n                ')' + semicolon\n            ]);\n            break;\n\n        case Syntax.CatchClause:\n            withIndent(function () {\n                result = [\n                    'catch' + space + '(',\n                    generateExpression(stmt.param, {\n                        precedence: Precedence.Sequence,\n                        allowIn: true,\n                        allowCall: true\n                    }),\n                    ')'\n                ];\n            });\n            result.push(maybeBlock(stmt.body));\n            break;\n\n        case Syntax.DebuggerStatement:\n            result = 'debugger' + semicolon;\n            break;\n\n        case Syntax.EmptyStatement:\n            result = ';';\n            break;\n\n        case Syntax.ExpressionStatement:\n            result = [generateExpression(stmt.expression, {\n                precedence: Precedence.Sequence,\n                allowIn: true,\n                allowCall: true\n            })];\n            // 12.4 '{', 'function' is not allowed in this position.\n            // wrap expression with parentheses\n            if (result.toString().charAt(0) === '{' || (result.toString().slice(0, 8) === 'function' && \" (\".indexOf(result.toString().charAt(8)) >= 0) || (directive && directiveContext && stmt.expression.type === Syntax.Literal && typeof stmt.expression.value === 'string')) {\n                result = ['(', result, ')' + semicolon];\n            } else {\n                result.push(semicolon);\n            }\n            break;\n\n        case Syntax.VariableDeclarator:\n            if (stmt.init) {\n                result = [\n                    generateExpression(stmt.id, {\n                        precedence: Precedence.Assignment,\n                        allowIn: allowIn,\n                        allowCall: true\n                    }) + space + '=' + space,\n                    generateExpression(stmt.init, {\n                        precedence: Precedence.Assignment,\n                        allowIn: allowIn,\n                        allowCall: true\n                    })\n                ];\n            } else {\n                result = stmt.id.name;\n            }\n            break;\n\n        case Syntax.VariableDeclaration:\n            result = [stmt.kind];\n            // special path for\n            // var x = function () {\n            // };\n            if (stmt.declarations.length === 1 && stmt.declarations[0].init &&\n                    stmt.declarations[0].init.type === Syntax.FunctionExpression) {\n                result.push(' ', generateStatement(stmt.declarations[0], {\n                    allowIn: allowIn\n                }));\n            } else {\n                // VariableDeclarator is typed as Statement,\n                // but joined with comma (not LineTerminator).\n                // So if comment is attached to target node, we should specialize.\n                withIndent(function () {\n                    node = stmt.declarations[0];\n                    if (extra.comment && node.leadingComments) {\n                        result.push('\\n', addIndent(generateStatement(node, {\n                            allowIn: allowIn\n                        })));\n                    } else {\n                        result.push(' ', generateStatement(node, {\n                            allowIn: allowIn\n                        }));\n                    }\n\n                    for (i = 1, len = stmt.declarations.length; i < len; i += 1) {\n                        node = stmt.declarations[i];\n                        if (extra.comment && node.leadingComments) {\n                            result.push(',' + newline, addIndent(generateStatement(node, {\n                                allowIn: allowIn\n                            })));\n                        } else {\n                            result.push(',' + space, generateStatement(node, {\n                                allowIn: allowIn\n                            }));\n                        }\n                    }\n                });\n            }\n            result.push(semicolon);\n            break;\n\n        case Syntax.ThrowStatement:\n            result = [join(\n                'throw',\n                generateExpression(stmt.argument, {\n                    precedence: Precedence.Sequence,\n                    allowIn: true,\n                    allowCall: true\n                })\n            ), semicolon];\n            break;\n\n        case Syntax.TryStatement:\n            result = ['try', maybeBlock(stmt.block)];\n            result = maybeBlockSuffix(stmt.block, result);\n            for (i = 0, len = stmt.handlers.length; i < len; i += 1) {\n                result = join(result, generateStatement(stmt.handlers[i]));\n                if (stmt.finalizer || i + 1 !== len) {\n                    result = maybeBlockSuffix(stmt.handlers[i].body, result);\n                }\n            }\n            if (stmt.finalizer) {\n                result = join(result, ['finally', maybeBlock(stmt.finalizer)]);\n            }\n            break;\n\n        case Syntax.SwitchStatement:\n            withIndent(function () {\n                result = [\n                    'switch' + space + '(',\n                    generateExpression(stmt.discriminant, {\n                        precedence: Precedence.Sequence,\n                        allowIn: true,\n                        allowCall: true\n                    }),\n                    ')' + space + '{' + newline\n                ];\n            });\n            if (stmt.cases) {\n                for (i = 0, len = stmt.cases.length; i < len; i += 1) {\n                    fragment = addIndent(generateStatement(stmt.cases[i], {semicolonOptional: i === len - 1}));\n                    result.push(fragment);\n                    if (!endsWithLineTerminator(toSourceNode(fragment).toString())) {\n                        result.push(newline);\n                    }\n                }\n            }\n            result.push(addIndent('}'));\n            break;\n\n        case Syntax.SwitchCase:\n            withIndent(function () {\n                if (stmt.test) {\n                    result = [\n                        join('case', generateExpression(stmt.test, {\n                            precedence: Precedence.Sequence,\n                            allowIn: true,\n                            allowCall: true\n                        })),\n                        ':'\n                    ];\n                } else {\n                    result = ['default:'];\n                }\n\n                i = 0;\n                len = stmt.consequent.length;\n                if (len && stmt.consequent[0].type === Syntax.BlockStatement) {\n                    fragment = maybeBlock(stmt.consequent[0]);\n                    result.push(fragment);\n                    i = 1;\n                }\n\n                if (i !== len && !endsWithLineTerminator(toSourceNode(result).toString())) {\n                    result.push(newline);\n                }\n\n                for (; i < len; i += 1) {\n                    fragment = addIndent(generateStatement(stmt.consequent[i], {semicolonOptional: i === len - 1 && semicolon === ''}));\n                    result.push(fragment);\n                    if (i + 1 !== len && !endsWithLineTerminator(toSourceNode(fragment).toString())) {\n                        result.push(newline);\n                    }\n                }\n            });\n            break;\n\n        case Syntax.IfStatement:\n            withIndent(function () {\n                result = [\n                    'if' + space + '(',\n                    generateExpression(stmt.test, {\n                        precedence: Precedence.Sequence,\n                        allowIn: true,\n                        allowCall: true\n                    }),\n                    ')'\n                ];\n            });\n            if (stmt.alternate) {\n                result.push(maybeBlock(stmt.consequent));\n                result = maybeBlockSuffix(stmt.consequent, result);\n                if (stmt.alternate.type === Syntax.IfStatement) {\n                    result = join(result, ['else ', generateStatement(stmt.alternate, {semicolonOptional: semicolon === ''})]);\n                } else {\n                    result = join(result, join('else', maybeBlock(stmt.alternate, semicolon === '')));\n                }\n            } else {\n                result.push(maybeBlock(stmt.consequent, semicolon === ''));\n            }\n            break;\n\n        case Syntax.ForStatement:\n            withIndent(function () {\n                result = ['for' + space + '('];\n                if (stmt.init) {\n                    if (stmt.init.type === Syntax.VariableDeclaration) {\n                        result.push(generateStatement(stmt.init, {allowIn: false}));\n                    } else {\n                        result.push(generateExpression(stmt.init, {\n                            precedence: Precedence.Sequence,\n                            allowIn: false,\n                            allowCall: true\n                        }), ';');\n                    }\n                } else {\n                    result.push(';');\n                }\n\n                if (stmt.test) {\n                    result.push(space, generateExpression(stmt.test, {\n                        precedence: Precedence.Sequence,\n                        allowIn: true,\n                        allowCall: true\n                    }), ';');\n                } else {\n                    result.push(';');\n                }\n\n                if (stmt.update) {\n                    result.push(space, generateExpression(stmt.update, {\n                        precedence: Precedence.Sequence,\n                        allowIn: true,\n                        allowCall: true\n                    }), ')');\n                } else {\n                    result.push(')');\n                }\n            });\n\n            result.push(maybeBlock(stmt.body, semicolon === ''));\n            break;\n\n        case Syntax.ForInStatement:\n            result = ['for' + space + '('];\n            withIndent(function () {\n                if (stmt.left.type === Syntax.VariableDeclaration) {\n                    withIndent(function () {\n                        result.push(stmt.left.kind + ' ', generateStatement(stmt.left.declarations[0], {\n                            allowIn: false\n                        }));\n                    });\n                } else {\n                    result.push(generateExpression(stmt.left, {\n                        precedence: Precedence.Call,\n                        allowIn: true,\n                        allowCall: true\n                    }));\n                }\n\n                result = join(result, 'in');\n                result = [join(\n                    result,\n                    generateExpression(stmt.right, {\n                        precedence: Precedence.Sequence,\n                        allowIn: true,\n                        allowCall: true\n                    })\n                ), ')'];\n            });\n            result.push(maybeBlock(stmt.body, semicolon === ''));\n            break;\n\n        case Syntax.LabeledStatement:\n            result = [stmt.label.name + ':', maybeBlock(stmt.body, semicolon === '')];\n            break;\n\n        case Syntax.Program:\n            len = stmt.body.length;\n            result = [safeConcatenation && len > 0 ? '\\n' : ''];\n            for (i = 0; i < len; i += 1) {\n                fragment = addIndent(\n                    generateStatement(stmt.body[i], {\n                        semicolonOptional: !safeConcatenation && i === len - 1,\n                        directiveContext: true\n                    })\n                );\n                result.push(fragment);\n                if (i + 1 < len && !endsWithLineTerminator(toSourceNode(fragment).toString())) {\n                    result.push(newline);\n                }\n            }\n            break;\n\n        case Syntax.FunctionDeclaration:\n            result = [(stmt.generator && !extra.moz.starlessGenerator ? 'function* ' : 'function ') + stmt.id.name, generateFunctionBody(stmt)];\n            break;\n\n        case Syntax.ReturnStatement:\n            if (stmt.argument) {\n                result = [join(\n                    'return',\n                    generateExpression(stmt.argument, {\n                        precedence: Precedence.Sequence,\n                        allowIn: true,\n                        allowCall: true\n                    })\n                ), semicolon];\n            } else {\n                result = ['return' + semicolon];\n            }\n            break;\n\n        case Syntax.WhileStatement:\n            withIndent(function () {\n                result = [\n                    'while' + space + '(',\n                    generateExpression(stmt.test, {\n                        precedence: Precedence.Sequence,\n                        allowIn: true,\n                        allowCall: true\n                    }),\n                    ')'\n                ];\n            });\n            result.push(maybeBlock(stmt.body, semicolon === ''));\n            break;\n\n        case Syntax.WithStatement:\n            withIndent(function () {\n                result = [\n                    'with' + space + '(',\n                    generateExpression(stmt.object, {\n                        precedence: Precedence.Sequence,\n                        allowIn: true,\n                        allowCall: true\n                    }),\n                    ')'\n                ];\n            });\n            result.push(maybeBlock(stmt.body, semicolon === ''));\n            break;\n\n        default:\n            throw new Error('Unknown statement type: ' + stmt.type);\n        }\n\n        // Attach comments\n\n        if (extra.comment) {\n            result = addCommentsToStatement(stmt, result);\n        }\n\n        fragment = toSourceNode(result).toString();\n        if (stmt.type === Syntax.Program && !safeConcatenation && newline === '' &&  fragment.charAt(fragment.length - 1) === '\\n') {\n            result = toSourceNode(result).replaceRight(/\\s+$/, '');\n        }\n\n        return toSourceNode(result, stmt);\n    }\n\n    function generate(node, options) {\n        var defaultOptions = getDefaultOptions(), result, pair;\n\n        if (options != null) {\n            // Obsolete options\n            //\n            //   `options.indent`\n            //   `options.base`\n            //\n            // Instead of them, we can use `option.format.indent`.\n            if (typeof options.indent === 'string') {\n                defaultOptions.format.indent.style = options.indent;\n            }\n            if (typeof options.base === 'number') {\n                defaultOptions.format.indent.base = options.base;\n            }\n            options = updateDeeply(defaultOptions, options);\n            indent = options.format.indent.style;\n            if (typeof options.base === 'string') {\n                base = options.base;\n            } else {\n                base = stringRepeat(indent, options.format.indent.base);\n            }\n        } else {\n            options = defaultOptions;\n            indent = options.format.indent.style;\n            base = stringRepeat(indent, options.format.indent.base);\n        }\n        json = options.format.json;\n        renumber = options.format.renumber;\n        hexadecimal = json ? false : options.format.hexadecimal;\n        quotes = json ? 'double' : options.format.quotes;\n        escapeless = options.format.escapeless;\n        if (options.format.compact) {\n            newline = space = indent = base = '';\n        } else {\n            newline = '\\n';\n            space = ' ';\n        }\n        parentheses = options.format.parentheses;\n        semicolons = options.format.semicolons;\n        safeConcatenation = options.format.safeConcatenation;\n        directive = options.directive;\n        parse = json ? null : options.parse;\n        sourceMap = options.sourceMap;\n        extra = options;\n\n        if (sourceMap) {\n            if (!exports.browser) {\n                // We assume environment is node.js\n                // And prevent from including source-map by browserify\n                SourceNode = require('source-map').SourceNode;\n            } else {\n                SourceNode = global.sourceMap.SourceNode;\n            }\n        } else {\n            SourceNode = SourceNodeMock;\n        }\n\n        switch (node.type) {\n        case Syntax.BlockStatement:\n        case Syntax.BreakStatement:\n        case Syntax.CatchClause:\n        case Syntax.ContinueStatement:\n        case Syntax.DirectiveStatement:\n        case Syntax.DoWhileStatement:\n        case Syntax.DebuggerStatement:\n        case Syntax.EmptyStatement:\n        case Syntax.ExpressionStatement:\n        case Syntax.ForStatement:\n        case Syntax.ForInStatement:\n        case Syntax.FunctionDeclaration:\n        case Syntax.IfStatement:\n        case Syntax.LabeledStatement:\n        case Syntax.Program:\n        case Syntax.ReturnStatement:\n        case Syntax.SwitchStatement:\n        case Syntax.SwitchCase:\n        case Syntax.ThrowStatement:\n        case Syntax.TryStatement:\n        case Syntax.VariableDeclaration:\n        case Syntax.VariableDeclarator:\n        case Syntax.WhileStatement:\n        case Syntax.WithStatement:\n            result = generateStatement(node);\n            break;\n\n        case Syntax.AssignmentExpression:\n        case Syntax.ArrayExpression:\n        case Syntax.ArrayPattern:\n        case Syntax.BinaryExpression:\n        case Syntax.CallExpression:\n        case Syntax.ConditionalExpression:\n        case Syntax.FunctionExpression:\n        case Syntax.Identifier:\n        case Syntax.Literal:\n        case Syntax.LogicalExpression:\n        case Syntax.MemberExpression:\n        case Syntax.NewExpression:\n        case Syntax.ObjectExpression:\n        case Syntax.ObjectPattern:\n        case Syntax.Property:\n        case Syntax.SequenceExpression:\n        case Syntax.ThisExpression:\n        case Syntax.UnaryExpression:\n        case Syntax.UpdateExpression:\n        case Syntax.YieldExpression:\n\n            result = generateExpression(node, {\n                precedence: Precedence.Sequence,\n                allowIn: true,\n                allowCall: true\n            });\n            break;\n\n        default:\n            throw new Error('Unknown node type: ' + node.type);\n        }\n\n        if (!sourceMap) {\n            return result.toString();\n        }\n\n        pair = result.toStringWithSourceMap({\n            file: options.sourceMap,\n            sourceRoot: options.sourceMapRoot\n        });\n\n        if (options.sourceMapWithCode) {\n            return pair;\n        }\n        return pair.map.toString();\n    }\n\n    // simple visitor implementation\n\n    VisitorKeys = {\n        AssignmentExpression: ['left', 'right'],\n        ArrayExpression: ['elements'],\n        ArrayPattern: ['elements'],\n        BlockStatement: ['body'],\n        BinaryExpression: ['left', 'right'],\n        BreakStatement: ['label'],\n        CallExpression: ['callee', 'arguments'],\n        CatchClause: ['param', 'body'],\n        ConditionalExpression: ['test', 'consequent', 'alternate'],\n        ContinueStatement: ['label'],\n        DirectiveStatement: [],\n        DoWhileStatement: ['body', 'test'],\n        DebuggerStatement: [],\n        EmptyStatement: [],\n        ExpressionStatement: ['expression'],\n        ForStatement: ['init', 'test', 'update', 'body'],\n        ForInStatement: ['left', 'right', 'body'],\n        FunctionDeclaration: ['id', 'params', 'body'],\n        FunctionExpression: ['id', 'params', 'body'],\n        Identifier: [],\n        IfStatement: ['test', 'consequent', 'alternate'],\n        Literal: [],\n        LabeledStatement: ['label', 'body'],\n        LogicalExpression: ['left', 'right'],\n        MemberExpression: ['object', 'property'],\n        NewExpression: ['callee', 'arguments'],\n        ObjectExpression: ['properties'],\n        ObjectPattern: ['properties'],\n        Program: ['body'],\n        Property: ['key', 'value'],\n        ReturnStatement: ['argument'],\n        SequenceExpression: ['expressions'],\n        SwitchStatement: ['discriminant', 'cases'],\n        SwitchCase: ['test', 'consequent'],\n        ThisExpression: [],\n        ThrowStatement: ['argument'],\n        TryStatement: ['block', 'handlers', 'finalizer'],\n        UnaryExpression: ['argument'],\n        UpdateExpression: ['argument'],\n        VariableDeclaration: ['declarations'],\n        VariableDeclarator: ['id', 'init'],\n        WhileStatement: ['test', 'body'],\n        WithStatement: ['object', 'body'],\n        YieldExpression: ['argument']\n    };\n\n    VisitorOption = {\n        Break: 1,\n        Skip: 2\n    };\n\n    // based on LLVM libc++ upper_bound / lower_bound\n    // MIT License\n\n    function upperBound(array, func) {\n        var diff, len, i, current;\n\n        len = array.length;\n        i = 0;\n\n        while (len) {\n            diff = len >>> 1;\n            current = i + diff;\n            if (func(array[current])) {\n                len = diff;\n            } else {\n                i = current + 1;\n                len -= diff + 1;\n            }\n        }\n        return i;\n    }\n\n    function lowerBound(array, func) {\n        var diff, len, i, current;\n\n        len = array.length;\n        i = 0;\n\n        while (len) {\n            diff = len >>> 1;\n            current = i + diff;\n            if (func(array[current])) {\n                i = current + 1;\n                len -= diff + 1;\n            } else {\n                len = diff;\n            }\n        }\n        return i;\n    }\n\n    function extendCommentRange(comment, tokens) {\n        var target, token;\n\n        target = upperBound(tokens, function search(token) {\n            return token.range[0] > comment.range[0];\n        });\n\n        comment.extendedRange = [comment.range[0], comment.range[1]];\n\n        if (target !== tokens.length) {\n            comment.extendedRange[1] = tokens[target].range[0];\n        }\n\n        target -= 1;\n        if (target >= 0) {\n            if (target < tokens.length) {\n                comment.extendedRange[0] = tokens[target].range[1];\n            } else if (token.length) {\n                comment.extendedRange[1] = tokens[tokens.length - 1].range[0];\n            }\n        }\n\n        return comment;\n    }\n\n    function attachComments(tree, providedComments, tokens) {\n        // At first, we should calculate extended comment ranges.\n        var comments = [], comment, len, i;\n\n        if (!tree.range) {\n            throw new Error('attachComments needs range information');\n        }\n\n        // tokens array is empty, we attach comments to tree as 'leadingComments'\n        if (!tokens.length) {\n            if (providedComments.length) {\n                for (i = 0, len = providedComments.length; i < len; i += 1) {\n                    comment = deepCopy(providedComments[i]);\n                    comment.extendedRange = [0, tree.range[0]];\n                    comments.push(comment);\n                }\n                tree.leadingComments = comments;\n            }\n            return tree;\n        }\n\n        for (i = 0, len = providedComments.length; i < len; i += 1) {\n            comments.push(extendCommentRange(deepCopy(providedComments[i]), tokens));\n        }\n\n        // This is based on John Freeman's implementation.\n        traverse(tree, {\n            cursor: 0,\n            enter: function (node) {\n                var comment;\n\n                while (this.cursor < comments.length) {\n                    comment = comments[this.cursor];\n                    if (comment.extendedRange[1] > node.range[0]) {\n                        break;\n                    }\n\n                    if (comment.extendedRange[1] === node.range[0]) {\n                        if (!node.leadingComments) {\n                            node.leadingComments = [];\n                        }\n                        node.leadingComments.push(comment);\n                        comments.splice(this.cursor, 1);\n                    } else {\n                        this.cursor += 1;\n                    }\n                }\n\n                // already out of owned node\n                if (this.cursor === comments.length) {\n                    return VisitorOption.Break;\n                }\n\n                if (comments[this.cursor].extendedRange[0] > node.range[1]) {\n                    return VisitorOption.Skip;\n                }\n            }\n        });\n\n        traverse(tree, {\n            cursor: 0,\n            leave: function (node) {\n                var comment;\n\n                while (this.cursor < comments.length) {\n                    comment = comments[this.cursor];\n                    if (node.range[1] < comment.extendedRange[0]) {\n                        break;\n                    }\n\n                    if (node.range[1] === comment.extendedRange[0]) {\n                        if (!node.trailingComments) {\n                            node.trailingComments = [];\n                        }\n                        node.trailingComments.push(comment);\n                        comments.splice(this.cursor, 1);\n                    } else {\n                        this.cursor += 1;\n                    }\n                }\n\n                // already out of owned node\n                if (this.cursor === comments.length) {\n                    return VisitorOption.Break;\n                }\n\n                if (comments[this.cursor].extendedRange[0] > node.range[1]) {\n                    return VisitorOption.Skip;\n                }\n            }\n        });\n\n        return tree;\n    }\n\n    exports.version = require('./package.json').version;\n    exports.generate = generate;\n    exports.attachComments = attachComments;\n    exports.browser = false;\n}());\n/* vim: set sw=4 ts=4 et tw=80 : */\n", "{\n  \"author\": \"Zach Carter <zach@carter.name> (http://zaa.ch)\",\n  \"name\": \"jison\",\n  \"description\": \"A parser generator with Bison's API\",\n  \"version\": \"0.4.4\",\n  \"keywords\": [\n    \"jison\",\n    \"bison\",\n    \"yacc\",\n    \"parser\",\n    \"generator\",\n    \"lexer\",\n    \"flex\",\n    \"tokenizer\",\n    \"compiler\"\n  ],\n  \"preferGlobal\": true,\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git://github.com/zaach/jison.git\"\n  },\n  \"bugs\": {\n    \"email\": \"jison@librelist.com\",\n    \"url\": \"http://github.com/zaach/jison/issues\"\n  },\n  \"main\": \"lib/jison\",\n  \"bin\": \"lib/cli.js\",\n  \"engines\": {\n    \"node\": \">=0.4\"\n  },\n  \"dependencies\": {\n    \"JSONSelect\": \"0.4.0\",\n    \"esprima\": \"1.0.x\",\n    \"escodegen\": \"0.0.21\",\n    \"jison-lex\": \"0.2.x\",\n    \"ebnf-parser\": \"0.1.x\",\n    \"lex-parser\": \"0.1.x\",\n    \"nomnom\": \"1.5.2\"\n  },\n  \"devDependencies\": {\n    \"test\": \"0.4.4\",\n    \"jison\": \"0.4.x\",\n    \"uglify-js\": \"1.3.3\",\n    \"browserify\": \"2.x.x\"\n  },\n  \"scripts\": {\n    \"test\": \"node tests/all-tests.js\"\n  },\n  \"homepage\": \"http://jison.org\"\n}\n", "// Jison, an LR(0), SLR(1), LARL(1), LR(1) Parser Generator\n// Zachary Carter <zach@carter.name>\n// MIT X Licensed\n\nvar typal      = require('./util/typal').typal;\nvar Set        = require('./util/set').Set;\nvar Lexer      = require('jison-lex');\nvar ebnfParser = require('ebnf-parser');\nvar JSONSelect = require('JSONSelect');\nvar esprima    = require('esprima');\nvar escodegen  = require('escodegen');\n\n\nvar version = require('../package.json').version;\n\nvar Jison = exports.Jison = exports;\nJison.version = version;\n\n// detect print\nif (typeof console !== 'undefined' && console.log) {\n    Jison.print = console.log;\n} else if (typeof puts !== 'undefined') {\n    Jison.print = function print () { puts([].join.call(arguments, ' ')); };\n} else if (typeof print !== 'undefined') {\n    Jison.print = print;\n} else {\n    Jison.print = function print () {};\n}\n\nJison.Parser = (function () {\n\n// iterator utility\nfunction each (obj, func) {\n    if (obj.forEach) {\n        obj.forEach(func);\n    } else {\n        var p;\n        for (p in obj) {\n            if (obj.hasOwnProperty(p)) {\n                func.call(obj, obj[p], p, obj);\n            }\n        }\n    }\n}\n\nvar Nonterminal = typal.construct({\n    constructor: function Nonterminal (symbol) {\n        this.symbol = symbol;\n        this.productions = new Set();\n        this.first = [];\n        this.follows = [];\n        this.nullable = false;\n    },\n    toString: function Nonterminal_toString () {\n        var str = this.symbol+\"\\n\";\n        str += (this.nullable ? 'nullable' : 'not nullable');\n        str += \"\\nFirsts: \"+this.first.join(', ');\n        str += \"\\nFollows: \"+this.first.join(', ');\n        str += \"\\nProductions:\\n  \"+this.productions.join('\\n  ');\n\n        return str;\n    }\n});\n\nvar Production = typal.construct({\n    constructor: function Production (symbol, handle, id) {\n        this.symbol = symbol;\n        this.handle = handle;\n        this.nullable = false;\n        this.id = id;\n        this.first = [];\n        this.precedence = 0;\n    },\n    toString: function Production_toString () {\n        return this.symbol+\" -> \"+this.handle.join(' ');\n    }\n});\n\nvar generator = typal.beget();\n\ngenerator.constructor = function Jison_Generator (grammar, opt) {\n    if (typeof grammar === 'string') {\n        grammar = ebnfParser.parse(grammar);\n    }\n\n    var options = typal.mix.call({}, grammar.options, opt);\n    this.terms = {};\n    this.operators = {};\n    this.productions = [];\n    this.conflicts = 0;\n    this.resolutions = [];\n    this.options = options;\n    this.yy = {}; // accessed as yy free variable in the parser/lexer actions\n\n    // source included in semantic action execution scope\n    if (grammar.actionInclude) {\n        if (typeof grammar.actionInclude === 'function') {\n            grammar.actionInclude = String(grammar.actionInclude).replace(/^\\s*function \\(\\) \\{/, '').replace(/\\}\\s*$/, '');\n        }\n        this.actionInclude = grammar.actionInclude;\n    }\n    this.moduleInclude = grammar.moduleInclude || '';\n\n    this.DEBUG = options.debug || false;\n    if (this.DEBUG) this.mix(generatorDebug); // mixin debug methods\n\n    this.processGrammar(grammar);\n\n    if (grammar.lex) {\n        this.lexer = new Lexer(grammar.lex, null, this.terminals_);\n    }\n};\n\ngenerator.processGrammar = function processGrammarDef (grammar) {\n    var bnf = grammar.bnf,\n        tokens = grammar.tokens,\n        nonterminals = this.nonterminals = {},\n        productions = this.productions,\n        self = this;\n\n    if (!grammar.bnf && grammar.ebnf) {\n        bnf = grammar.bnf = ebnfParser.transform(grammar.ebnf);\n    }\n\n    if (tokens) {\n        if (typeof tokens === 'string') {\n            tokens = tokens.trim().split(' ');\n        } else {\n            tokens = tokens.slice(0);\n        }\n    }\n\n    var symbols = this.symbols = [];\n\n    // calculate precedence of operators\n    var operators = this.operators = processOperators(grammar.operators);\n\n    // build productions from cfg\n    this.buildProductions(grammar.bnf, productions, nonterminals, symbols, operators);\n\n    if (tokens && this.terminals.length !== tokens.length) {\n        self.trace(\"Warning: declared tokens differ from tokens found in rules.\");\n        self.trace(this.terminals);\n        self.trace(tokens);\n    }\n\n    // augment the grammar\n    this.augmentGrammar(grammar);\n};\n\ngenerator.augmentGrammar = function augmentGrammar (grammar) {\n    // use specified start symbol, or default to first user defined production\n    this.startSymbol = grammar.start || grammar.startSymbol || this.productions[0].symbol;\n    if (!this.nonterminals[this.startSymbol]) {\n        throw new Error(\"Grammar error: startSymbol must be a non-terminal found in your grammar.\");\n    }\n    this.EOF = \"$end\";\n\n    // augment the grammar\n    var acceptProduction = new Production('$accept', [this.startSymbol, '$end'], 0);\n    this.productions.unshift(acceptProduction);\n\n    // prepend parser tokens\n    this.symbols.unshift(\"$accept\",this.EOF);\n    this.symbols_.$accept = 0;\n    this.symbols_[this.EOF] = 1;\n    this.terminals.unshift(this.EOF);\n\n    this.nonterminals.$accept = new Nonterminal(\"$accept\");\n    this.nonterminals.$accept.productions.push(acceptProduction);\n\n    // add follow $ to start symbol\n    this.nonterminals[this.startSymbol].follows.push(this.EOF);\n};\n\n// set precedence and associativity of operators\nfunction processOperators (ops) {\n    if (!ops) return {};\n    var operators = {};\n    for (var i=0,k,prec;prec=ops[i]; i++) {\n        for (k=1;k < prec.length;k++) {\n            operators[prec[k]] = {precedence: i+1, assoc: prec[0]};\n        }\n    }\n    return operators;\n}\n\n\ngenerator.buildProductions = function buildProductions(bnf, productions, nonterminals, symbols, operators) {\n    var actions = [\n\t  '/* this == yyval */',\n      this.actionInclude || '',\n      'var $0 = $$.length - 1;',\n      'switch (yystate) {'\n    ];\n    var prods, symbol;\n    var productions_ = [0];\n    var symbolId = 1;\n    var symbols_ = {};\n\n    var her = false; // has error recovery\n\n    function addSymbol (s) {\n        if (s && !symbols_[s]) {\n            symbols_[s] = ++symbolId;\n            symbols.push(s);\n        }\n    }\n\n    // add error symbol; will be third symbol, or \"2\" ($accept, $end, error)\n    addSymbol(\"error\");\n\n    for (symbol in bnf) {\n        if (!bnf.hasOwnProperty(symbol)) continue;\n\n        addSymbol(symbol);\n        nonterminals[symbol] = new Nonterminal(symbol);\n\n        if (typeof bnf[symbol] === 'string') {\n            prods = bnf[symbol].split(/\\s*\\|\\s*/g);\n        } else {\n            prods = bnf[symbol].slice(0);\n        }\n\n        prods.forEach(buildProduction);\n    }\n\n    var sym, terms = [], terms_ = {};\n    each(symbols_, function (id, sym) {\n        if (!nonterminals[sym]) {\n            terms.push(sym);\n            terms_[id] = sym;\n        }\n    });\n\n    this.hasErrorRecovery = her;\n\n    this.terminals = terms;\n    this.terminals_ = terms_;\n    this.symbols_ = symbols_;\n\n    this.productions_ = productions_;\n    actions.push('}');\n    // first try to create the performAction function the old way,\n    // but this will break for some legal constructs in the user action code:\n    try {\n        this.performAction = Function(\"yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */\", actions.join(\"\\n\"));\n    } catch (e) {\n        this.performAction = \"function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {\\n\" + actions.join(\"\\n\") + \"\\n}\";\n    }\n\n    function buildProduction (handle) {\n        var r, rhs, i;\n        if (handle.constructor === Array) {\n            rhs = (typeof handle[0] === 'string') ?\n                      handle[0].trim().split(' ') :\n                      handle[0].slice(0);\n\n            for (i=0; i<rhs.length; i++) {\n                if (rhs[i] === 'error') her = true;\n                if (!symbols_[rhs[i]]) {\n                    addSymbol(rhs[i]);\n                }\n            }\n\n            if (typeof handle[1] === 'string' || handle.length == 3) {\n                // semantic action specified\n                var action = 'case '+(productions.length+1)+':'+handle[1]+'\\nbreak;';\n\n                // replace named semantic values ($nonterminal)\n                if (action.match(/[$@][a-zA-Z][a-zA-Z0-9_]*/)) {\n                    var count = {},\n                        names = {};\n                    for (i=0;i<rhs.length;i++) {\n                        if (names[rhs[i]]) {\n                            names[rhs[i]+(++count[rhs[i]])] = i+1;\n                        } else {\n                            names[rhs[i]] = i+1;\n                            names[rhs[i]+\"1\"] = i+1;\n                            count[rhs[i]] = 1;\n                        }\n                    }\n                    action = action.replace(/\\$([a-zA-Z][a-zA-Z0-9_]*)/g, function (str, pl) {\n                            return names[pl] ? '$'+names[pl] : pl;\n                        }).replace(/@([a-zA-Z][a-zA-Z0-9_]*)/g, function (str, pl) {\n                            return names[pl] ? '@'+names[pl] : pl;\n                        });\n                }\n                action = action.replace(/([^'\"])\\$\\$|^\\$\\$/g, '$1this.$').replace(/@[0$]/g, \"this._$\")\n                    .replace(/\\$(\\d+)/g, function (_, n) {\n                        return \"$$[$0\" + (n - rhs.length || '') + \"]\";\n                    })\n                    .replace(/@(\\d+)/g, function (_, n) {\n                        return \"_$[$0\" + (n - rhs.length || '') + \"]\";\n                    });\n                actions.push(action);\n\n                r = new Production(symbol, rhs, productions.length+1);\n                // precedence specified also\n                if (handle[2] && operators[handle[2].prec]) {\n                    r.precedence = operators[handle[2].prec].precedence;\n                }\n            } else {\n                // only precedence specified\n                r = new Production(symbol, rhs, productions.length+1);\n                if (operators[handle[1].prec]) {\n                    r.precedence = operators[handle[1].prec].precedence;\n                }\n            }\n        } else {\n            rhs = handle.trim().split(' ');\n            for (i=0; i<rhs.length; i++) {\n                if (rhs[i] === 'error') her = true;\n                if (!symbols_[rhs[i]]) {\n                    addSymbol(rhs[i]);\n                }\n            }\n            r = new Production(symbol, rhs, productions.length+1);\n        }\n        if (r.precedence === 0) {\n            // set precedence\n            for (i=r.handle.length-1; i>=0; i--) {\n                if (!(r.handle[i] in nonterminals) && r.handle[i] in operators) {\n                    r.precedence = operators[r.handle[i]].precedence;\n                }\n            }\n        }\n\n        productions.push(r);\n        productions_.push([symbols_[r.symbol], r.handle[0] === '' ? 0 : r.handle.length]);\n        nonterminals[symbol].productions.push(r);\n    }\n};\n\n\n\ngenerator.createParser = function createParser () {\n    throw new Error('Calling abstract method.');\n};\n\n// noop. implemented in debug mixin\ngenerator.trace = function trace () { };\n\ngenerator.warn = function warn () {\n    var args = Array.prototype.slice.call(arguments,0);\n    Jison.print.call(null,args.join(\"\"));\n};\n\ngenerator.error = function error (msg) {\n    throw new Error(msg);\n};\n\n// Generator debug mixin\n\nvar generatorDebug = {\n    trace: function trace () {\n        Jison.print.apply(null, arguments);\n    },\n    beforeprocessGrammar: function () {\n        this.trace(\"Processing grammar.\");\n    },\n    afteraugmentGrammar: function () {\n        var trace = this.trace;\n        each(this.symbols, function (sym, i) {\n            trace(sym+\"(\"+i+\")\");\n        });\n    }\n};\n\n\n\n/*\n * Mixin for common behaviors of lookahead parsers\n * */\nvar lookaheadMixin = {};\n\nlookaheadMixin.computeLookaheads = function computeLookaheads () {\n    if (this.DEBUG) this.mix(lookaheadDebug); // mixin debug methods\n\n    this.computeLookaheads = function () {};\n    this.nullableSets();\n    this.firstSets();\n    this.followSets();\n};\n\n// calculate follow sets typald on first and nullable\nlookaheadMixin.followSets = function followSets () {\n    var productions = this.productions,\n        nonterminals = this.nonterminals,\n        self = this,\n        cont = true;\n\n    // loop until no further changes have been made\n    while(cont) {\n        cont = false;\n\n        productions.forEach(function Follow_prod_forEach (production, k) {\n            //self.trace(production.symbol,nonterminals[production.symbol].follows);\n            // q is used in Simple LALR algorithm determine follows in context\n            var q;\n            var ctx = !!self.go_;\n\n            var set = [],oldcount;\n            for (var i=0,t;t=production.handle[i];++i) {\n                if (!nonterminals[t]) continue;\n\n                // for Simple LALR algorithm, self.go_ checks if\n                if (ctx)\n                    q = self.go_(production.symbol, production.handle.slice(0, i));\n                var bool = !ctx || q === parseInt(self.nterms_[t], 10);\n\n                if (i === production.handle.length+1 && bool) {\n                    set = nonterminals[production.symbol].follows;\n                } else {\n                    var part = production.handle.slice(i+1);\n\n                    set = self.first(part);\n                    if (self.nullable(part) && bool) {\n                        set.push.apply(set, nonterminals[production.symbol].follows);\n                    }\n                }\n                oldcount = nonterminals[t].follows.length;\n                Set.union(nonterminals[t].follows, set);\n                if (oldcount !== nonterminals[t].follows.length) {\n                    cont = true;\n                }\n            }\n        });\n    }\n};\n\n// return the FIRST set of a symbol or series of symbols\nlookaheadMixin.first = function first (symbol) {\n    // epsilon\n    if (symbol === '') {\n        return [];\n    // RHS\n    } else if (symbol instanceof Array) {\n        var firsts = [];\n        for (var i=0,t;t=symbol[i];++i) {\n            if (!this.nonterminals[t]) {\n                if (firsts.indexOf(t) === -1)\n                    firsts.push(t);\n            } else {\n                Set.union(firsts, this.nonterminals[t].first);\n            }\n            if (!this.nullable(t))\n                break;\n        }\n        return firsts;\n    // terminal\n    } else if (!this.nonterminals[symbol]) {\n        return [symbol];\n    // nonterminal\n    } else {\n        return this.nonterminals[symbol].first;\n    }\n};\n\n// fixed-point calculation of FIRST sets\nlookaheadMixin.firstSets = function firstSets () {\n    var productions = this.productions,\n        nonterminals = this.nonterminals,\n        self = this,\n        cont = true,\n        symbol,firsts;\n\n    // loop until no further changes have been made\n    while(cont) {\n        cont = false;\n\n        productions.forEach(function FirstSets_forEach (production, k) {\n            var firsts = self.first(production.handle);\n            if (firsts.length !== production.first.length) {\n                production.first = firsts;\n                cont=true;\n            }\n        });\n\n        for (symbol in nonterminals) {\n            firsts = [];\n            nonterminals[symbol].productions.forEach(function (production) {\n                Set.union(firsts, production.first);\n            });\n            if (firsts.length !== nonterminals[symbol].first.length) {\n                nonterminals[symbol].first = firsts;\n                cont=true;\n            }\n        }\n    }\n};\n\n// fixed-point calculation of NULLABLE\nlookaheadMixin.nullableSets = function nullableSets () {\n    var firsts = this.firsts = {},\n        nonterminals = this.nonterminals,\n        self = this,\n        cont = true;\n\n    // loop until no further changes have been made\n    while(cont) {\n        cont = false;\n\n        // check if each production is nullable\n        this.productions.forEach(function (production, k) {\n            if (!production.nullable) {\n                for (var i=0,n=0,t;t=production.handle[i];++i) {\n                    if (self.nullable(t)) n++;\n                }\n                if (n===i) { // production is nullable if all tokens are nullable\n                    production.nullable = cont = true;\n                }\n            }\n        });\n\n        //check if each symbol is nullable\n        for (var symbol in nonterminals) {\n            if (!this.nullable(symbol)) {\n                for (var i=0,production;production=nonterminals[symbol].productions.item(i);i++) {\n                    if (production.nullable)\n                        nonterminals[symbol].nullable = cont = true;\n                }\n            }\n        }\n    }\n};\n\n// check if a token or series of tokens is nullable\nlookaheadMixin.nullable = function nullable (symbol) {\n    // epsilon\n    if (symbol === '') {\n        return true;\n    // RHS\n    } else if (symbol instanceof Array) {\n        for (var i=0,t;t=symbol[i];++i) {\n            if (!this.nullable(t))\n                return false;\n        }\n        return true;\n    // terminal\n    } else if (!this.nonterminals[symbol]) {\n        return false;\n    // nonterminal\n    } else {\n        return this.nonterminals[symbol].nullable;\n    }\n};\n\n\n// lookahead debug mixin\nvar lookaheadDebug = {\n    beforenullableSets: function () {\n        this.trace(\"Computing Nullable sets.\");\n    },\n    beforefirstSets: function () {\n        this.trace(\"Computing First sets.\");\n    },\n    beforefollowSets: function () {\n        this.trace(\"Computing Follow sets.\");\n    },\n    afterfollowSets: function () {\n        var trace = this.trace;\n        each(this.nonterminals, function (nt, t) {\n            trace(nt, '\\n');\n        });\n    }\n};\n\n/*\n * Mixin for common LR parser behavior\n * */\nvar lrGeneratorMixin = {};\n\nlrGeneratorMixin.buildTable = function buildTable () {\n    if (this.DEBUG) this.mix(lrGeneratorDebug); // mixin debug methods\n\n    this.states = this.canonicalCollection();\n    this.table = this.parseTable(this.states);\n    this.defaultActions = findDefaults(this.table);\n};\n\nlrGeneratorMixin.Item = typal.construct({\n    constructor: function Item(production, dot, f, predecessor) {\n        this.production = production;\n        this.dotPosition = dot || 0;\n        this.follows = f || [];\n        this.predecessor = predecessor;\n        this.id = parseInt(production.id+'a'+this.dotPosition, 36);\n        this.markedSymbol = this.production.handle[this.dotPosition];\n    },\n    remainingHandle: function () {\n        return this.production.handle.slice(this.dotPosition+1);\n    },\n    eq: function (e) {\n        return e.id === this.id;\n    },\n    handleToString: function () {\n        var handle = this.production.handle.slice(0);\n        handle[this.dotPosition] = '.'+(handle[this.dotPosition]||'');\n        return handle.join(' ');\n    },\n    toString: function () {\n        var temp = this.production.handle.slice(0);\n        temp[this.dotPosition] = '.'+(temp[this.dotPosition]||'');\n        return this.production.symbol+\" -> \"+temp.join(' ') +\n            (this.follows.length === 0 ? \"\" : \" #lookaheads= \"+this.follows.join(' '));\n    }\n});\n\nlrGeneratorMixin.ItemSet = Set.prototype.construct({\n    afterconstructor: function () {\n        this.reductions = [];\n        this.goes = {};\n        this.edges = {};\n        this.shifts = false;\n        this.inadequate = false;\n        this.hash_ = {};\n        for (var i=this._items.length-1;i >=0;i--) {\n            this.hash_[this._items[i].id] = true; //i;\n        }\n    },\n    concat: function concat (set) {\n        var a = set._items || set;\n        for (var i=a.length-1;i >=0;i--) {\n            this.hash_[a[i].id] = true; //i;\n        }\n        this._items.push.apply(this._items, a);\n        return this;\n    },\n    push: function (item) {\n        this.hash_[item.id] = true;\n        return this._items.push(item);\n    },\n    contains: function (item) {\n        return this.hash_[item.id];\n    },\n    valueOf: function toValue () {\n        var v = this._items.map(function (a) {return a.id;}).sort().join('|');\n        this.valueOf = function toValue_inner() {return v;};\n        return v;\n    }\n});\n\nlrGeneratorMixin.closureOperation = function closureOperation (itemSet /*, closureSet*/) {\n    var closureSet = new this.ItemSet();\n    var self = this;\n\n    var set = itemSet,\n        itemQueue, syms = {};\n\n    do {\n    itemQueue = new Set();\n    closureSet.concat(set);\n    set.forEach(function CO_set_forEach (item) {\n        var symbol = item.markedSymbol;\n\n        // if token is a non-terminal, recursively add closures\n        if (symbol && self.nonterminals[symbol]) {\n            if(!syms[symbol]) {\n                self.nonterminals[symbol].productions.forEach(function CO_nt_forEach (production) {\n                    var newItem = new self.Item(production, 0);\n                    if(!closureSet.contains(newItem))\n                        itemQueue.push(newItem);\n                });\n                syms[symbol] = true;\n            }\n        } else if (!symbol) {\n            // reduction\n            closureSet.reductions.push(item);\n            closureSet.inadequate = closureSet.reductions.length > 1 || closureSet.shifts;\n        } else {\n            // shift\n            closureSet.shifts = true;\n            closureSet.inadequate = closureSet.reductions.length > 0;\n        }\n    });\n\n    set = itemQueue;\n\n    } while (!itemQueue.isEmpty());\n\n    return closureSet;\n};\n\nlrGeneratorMixin.gotoOperation = function gotoOperation (itemSet, symbol) {\n    var gotoSet = new this.ItemSet(),\n        self = this;\n\n    itemSet.forEach(function goto_forEach(item, n) {\n        if (item.markedSymbol === symbol) {\n            gotoSet.push(new self.Item(item.production, item.dotPosition+1, item.follows, n));\n        }\n    });\n\n    return gotoSet.isEmpty() ? gotoSet : this.closureOperation(gotoSet);\n};\n\n/* Create unique set of item sets\n * */\nlrGeneratorMixin.canonicalCollection = function canonicalCollection () {\n    var item1 = new this.Item(this.productions[0], 0, [this.EOF]);\n    var firstState = this.closureOperation(new this.ItemSet(item1)),\n        states = new Set(firstState),\n        marked = 0,\n        self = this,\n        itemSet;\n\n    states.has = {};\n    states.has[firstState] = 0;\n\n    while (marked !== states.size()) {\n        itemSet = states.item(marked); marked++;\n        itemSet.forEach(function CC_itemSet_forEach (item) {\n            if (item.markedSymbol && item.markedSymbol !== self.EOF)\n                self.canonicalCollectionInsert(item.markedSymbol, itemSet, states, marked-1);\n        });\n    }\n\n    return states;\n};\n\n// Pushes a unique state into the que. Some parsing algorithms may perform additional operations\nlrGeneratorMixin.canonicalCollectionInsert = function canonicalCollectionInsert (symbol, itemSet, states, stateNum) {\n    var g = this.gotoOperation(itemSet, symbol);\n    if (!g.predecessors)\n        g.predecessors = {};\n    // add g to que if not empty or duplicate\n    if (!g.isEmpty()) {\n        var gv = g.valueOf(),\n            i = states.has[gv];\n        if (i === -1 || typeof i === 'undefined') {\n            states.has[gv] = states.size();\n            itemSet.edges[symbol] = states.size(); // store goto transition for table\n            states.push(g);\n            g.predecessors[symbol] = [stateNum];\n        } else {\n            itemSet.edges[symbol] = i; // store goto transition for table\n            states.item(i).predecessors[symbol].push(stateNum);\n        }\n    }\n};\n\nvar NONASSOC = 0;\nlrGeneratorMixin.parseTable = function parseTable (itemSets) {\n    var states = [],\n        nonterminals = this.nonterminals,\n        operators = this.operators,\n        conflictedStates = {}, // array of [state, token] tuples\n        self = this,\n        s = 1, // shift\n        r = 2, // reduce\n        a = 3; // accept\n\n    // for each item set\n    itemSets.forEach(function (itemSet, k) {\n        var state = states[k] = {};\n        var action, stackSymbol;\n\n        // set shift and goto actions\n        for (stackSymbol in itemSet.edges) {\n            itemSet.forEach(function (item, j) {\n                // find shift and goto actions\n                if (item.markedSymbol == stackSymbol) {\n                    var gotoState = itemSet.edges[stackSymbol];\n                    if (nonterminals[stackSymbol]) {\n                        // store state to go to after a reduce\n                        //self.trace(k, stackSymbol, 'g'+gotoState);\n                        state[self.symbols_[stackSymbol]] = gotoState;\n                    } else {\n                        //self.trace(k, stackSymbol, 's'+gotoState);\n                        state[self.symbols_[stackSymbol]] = [s,gotoState];\n                    }\n                }\n            });\n        }\n\n        // set accept action\n        itemSet.forEach(function (item, j) {\n            if (item.markedSymbol == self.EOF) {\n                // accept\n                state[self.symbols_[self.EOF]] = [a];\n                //self.trace(k, self.EOF, state[self.EOF]);\n            }\n        });\n\n        var allterms = self.lookAheads ? false : self.terminals;\n\n        // set reductions and resolve potential conflicts\n        itemSet.reductions.forEach(function (item, j) {\n            // if parser uses lookahead, only enumerate those terminals\n            var terminals = allterms || self.lookAheads(itemSet, item);\n\n            terminals.forEach(function (stackSymbol) {\n                action = state[self.symbols_[stackSymbol]];\n                var op = operators[stackSymbol];\n\n                // Reading a terminal and current position is at the end of a production, try to reduce\n                if (action || action && action.length) {\n                    var sol = resolveConflict(item.production, op, [r,item.production.id], action[0] instanceof Array ? action[0] : action);\n                    self.resolutions.push([k,stackSymbol,sol]);\n                    if (sol.bydefault) {\n                        self.conflicts++;\n                        if (!self.DEBUG) {\n                            self.warn('Conflict in grammar: multiple actions possible when lookahead token is ',stackSymbol,' in state ',k, \"\\n- \", printAction(sol.r, self), \"\\n- \", printAction(sol.s, self));\n                            conflictedStates[k] = true;\n                        }\n                        if (self.options.noDefaultResolve) {\n                            if (!(action[0] instanceof Array))\n                                action = [action];\n                            action.push(sol.r);\n                        }\n                    } else {\n                        action = sol.action;\n                    }\n                } else {\n                    action = [r,item.production.id];\n                }\n                if (action && action.length) {\n                    state[self.symbols_[stackSymbol]] = action;\n                } else if (action === NONASSOC) {\n                    state[self.symbols_[stackSymbol]] = undefined;\n                }\n            });\n        });\n\n    });\n\n    if (!self.DEBUG && self.conflicts > 0) {\n        self.warn(\"\\nStates with conflicts:\");\n        each(conflictedStates, function (val, state) {\n            self.warn('State '+state);\n            self.warn('  ',itemSets.item(state).join(\"\\n  \"));\n        });\n    }\n\n    return states;\n};\n\n// find states with only one action, a reduction\nfunction findDefaults (states) {\n    var defaults = {};\n    states.forEach(function (state, k) {\n        var i = 0;\n        for (var act in state) {\n             if ({}.hasOwnProperty.call(state, act)) i++;\n        }\n\n        if (i === 1 && state[act][0] === 2) {\n            // only one action in state and it's a reduction\n            defaults[k] = state[act];\n        }\n    });\n\n    return defaults;\n}\n\n// resolves shift-reduce and reduce-reduce conflicts\nfunction resolveConflict (production, op, reduce, shift) {\n    var sln = {production: production, operator: op, r: reduce, s: shift},\n        s = 1, // shift\n        r = 2, // reduce\n        a = 3; // accept\n\n    if (shift[0] === r) {\n        sln.msg = \"Resolve R/R conflict (use first production declared in grammar.)\";\n        sln.action = shift[1] < reduce[1] ? shift : reduce;\n        if (shift[1] !== reduce[1]) sln.bydefault = true;\n        return sln;\n    }\n\n    if (production.precedence === 0 || !op) {\n        sln.msg = \"Resolve S/R conflict (shift by default.)\";\n        sln.bydefault = true;\n        sln.action = shift;\n    } else if (production.precedence < op.precedence ) {\n        sln.msg = \"Resolve S/R conflict (shift for higher precedent operator.)\";\n        sln.action = shift;\n    } else if (production.precedence === op.precedence) {\n        if (op.assoc === \"right\" ) {\n            sln.msg = \"Resolve S/R conflict (shift for right associative operator.)\";\n            sln.action = shift;\n        } else if (op.assoc === \"left\" ) {\n            sln.msg = \"Resolve S/R conflict (reduce for left associative operator.)\";\n            sln.action = reduce;\n        } else if (op.assoc === \"nonassoc\" ) {\n            sln.msg = \"Resolve S/R conflict (no action for non-associative operator.)\";\n            sln.action = NONASSOC;\n        }\n    } else {\n        sln.msg = \"Resolve conflict (reduce for higher precedent production.)\";\n        sln.action = reduce;\n    }\n\n    return sln;\n}\n\nlrGeneratorMixin.generate = function parser_generate (opt) {\n    opt = typal.mix.call({}, this.options, opt);\n    var code = \"\";\n\n    // check for illegal identifier\n    if (!opt.moduleName || !opt.moduleName.match(/^[A-Za-z_$][A-Za-z0-9_$]*$/)) {\n        opt.moduleName = \"parser\";\n    }\n    switch (opt.moduleType) {\n        case \"js\":\n            code = this.generateModule(opt);\n            break;\n        case \"amd\":\n            code = this.generateAMDModule(opt);\n            break;\n        default:\n            code = this.generateCommonJSModule(opt);\n            break;\n    }\n\n    return code;\n};\n\nlrGeneratorMixin.generateAMDModule = function generateAMDModule(opt){\n    opt = typal.mix.call({}, this.options, opt);\n    var out = '\\n\\ndefine([], function(){'\n        + '\\nvar parser = '+ this.generateModule_(opt)\n        + (this.lexer && this.lexer.generateModule ?\n          '\\n' + this.lexer.generateModule() +\n          '\\nparser.lexer = lexer;' : '')\n        + '\\nreturn parser;'\n        + '\\n});'\n    return out;\n};\n\nlrGeneratorMixin.generateCommonJSModule = function generateCommonJSModule (opt) {\n    opt = typal.mix.call({}, this.options, opt);\n    var moduleName = opt.moduleName || \"parser\";\n    var out = this.generateModule(opt)\n        + \"\\n\\n\\nif (typeof require !== 'undefined' && typeof exports !== 'undefined') {\"\n        + \"\\nexports.parser = \"+moduleName+\";\"\n        + \"\\nexports.Parser = \"+moduleName+\".Parser;\"\n        + \"\\nexports.parse = function () { return \"+moduleName+\".parse.apply(\"+moduleName+\", arguments); };\"\n        + \"\\nexports.main = \"+ String(opt.moduleMain || commonjsMain) + \";\"\n        + \"\\nif (typeof module !== 'undefined' && require.main === module) {\\n\"\n        + \"  exports.main(process.argv.slice(1));\\n}\"\n        + \"\\n}\";\n\n    return out;\n};\n\nlrGeneratorMixin.generateModule = function generateModule (opt) {\n    opt = typal.mix.call({}, this.options, opt);\n    var moduleName = opt.moduleName || \"parser\";\n    var out = \"/* parser generated by jison \" + version + \" */\\n\"\n        + \"/*\\n\"\n        + \"  Returns a Parser object of the following structure:\\n\"\n        + \"\\n\"\n        + \"  Parser: {\\n\"\n        + \"    yy: {}\\n\"\n        + \"  }\\n\"\n        + \"\\n\"\n        + \"  Parser.prototype: {\\n\"\n        + \"    yy: {},\\n\"\n        + \"    trace: function(),\\n\"\n        + \"    symbols_: {associative list: name ==> number},\\n\"\n        + \"    terminals_: {associative list: number ==> name},\\n\"\n        + \"    productions_: [...],\\n\"\n        + \"    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),\\n\"\n        + \"    table: [...],\\n\"\n        + \"    defaultActions: {...},\\n\"\n        + \"    parseError: function(str, hash),\\n\"\n        + \"    parse: function(input),\\n\"\n        + \"\\n\"\n        + \"    lexer: {\\n\"\n        + \"        EOF: 1,\\n\"\n        + \"        parseError: function(str, hash),\\n\"\n        + \"        setInput: function(input),\\n\"\n        + \"        input: function(),\\n\"\n        + \"        unput: function(str),\\n\"\n        + \"        more: function(),\\n\"\n        + \"        less: function(n),\\n\"\n        + \"        pastInput: function(),\\n\"\n        + \"        upcomingInput: function(),\\n\"\n        + \"        showPosition: function(),\\n\"\n        + \"        test_match: function(regex_match_array, rule_index),\\n\"\n        + \"        next: function(),\\n\"\n        + \"        lex: function(),\\n\"\n        + \"        begin: function(condition),\\n\"\n        + \"        popState: function(),\\n\"\n        + \"        _currentRules: function(),\\n\"\n        + \"        topState: function(),\\n\"\n        + \"        pushState: function(condition),\\n\"\n        + \"\\n\"\n        + \"        options: {\\n\"\n        + \"            ranges: boolean           (optional: true ==> token location info will include a .range[] member)\\n\"\n        + \"            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)\\n\"\n        + \"            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)\\n\"\n        + \"        },\\n\"\n        + \"\\n\"\n        + \"        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),\\n\"\n        + \"        rules: [...],\\n\"\n        + \"        conditions: {associative list: name ==> set},\\n\"\n        + \"    }\\n\"\n        + \"  }\\n\"\n        + \"\\n\"\n        + \"\\n\"\n        + \"  token location info (@$, _$, etc.): {\\n\"\n        + \"    first_line: n,\\n\"\n        + \"    last_line: n,\\n\"\n        + \"    first_column: n,\\n\"\n        + \"    last_column: n,\\n\"\n        + \"    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)\\n\"\n        + \"  }\\n\"\n        + \"\\n\"\n        + \"\\n\"\n        + \"  the parseError function receives a 'hash' object with these members for lexer and parser errors: {\\n\"\n        + \"    text:        (matched text)\\n\"\n        + \"    token:       (the produced terminal token, if any)\\n\"\n        + \"    line:        (yylineno)\\n\"\n        + \"  }\\n\"\n        + \"  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {\\n\"\n        + \"    loc:         (yylloc)\\n\"\n        + \"    expected:    (string describing the set of expected tokens)\\n\"\n        + \"    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)\\n\"\n        + \"  }\\n\"\n        + \"*/\\n\";\n    out += (moduleName.match(/\\./) ? moduleName : \"var \"+moduleName)+\" = (function(){\";\n    out += \"\\nvar parser = \"+this.generateModule_();\n    out += \"\\n\"+this.moduleInclude;\n    if (this.lexer && this.lexer.generateModule) {\n        out += this.lexer.generateModule();\n        out += \"\\nparser.lexer = lexer;\";\n    }\n    out += \"\\nfunction Parser () {\\n  this.yy = {};\\n}\\n\"\n        + \"Parser.prototype = parser;\"\n        + \"parser.Parser = Parser;\"\n        + \"\\nreturn new Parser;\\n})();\";\n\n    return out;\n};\n\n// returns parse function without error recovery code\nfunction removeErrorRecovery (fn) {\n    var parseFn = String(fn);\n    try {\n        var ast = esprima.parse(parseFn);\n\n        var labeled = JSONSelect.match(':has(:root > .label > .name:val(\"_handle_error\"))', ast);\n        var reduced_code = labeled[0].body.consequent.body[3].consequent.body;\n        reduced_code[0] = labeled[0].body.consequent.body[1];     // remove the line: error_rule_depth = locateNearestErrorRecoveryRule(state);\n        reduced_code[4].expression.arguments[1].properties.pop(); // remove the line: 'recoverable: error_rule_depth !== false'\n        labeled[0].body.consequent.body = reduced_code;\n\n        return escodegen.generate(ast).replace(/_handle_error:\\s?/,\"\").replace(/\\\\\\\\n/g,\"\\\\n\");\n    } catch (e) {\n        return parseFn;\n    }\n}\n\nlrGeneratorMixin.generateModule_ = function generateModule_ () {\n    var parseFn = (this.hasErrorRecovery ? String : removeErrorRecovery)(parser.parse);\n\n    var out = \"{\";\n    out += [\n        \"trace: \" + String(this.trace || parser.trace),\n        \"yy: {}\",\n        \"symbols_: \" + JSON.stringify(this.symbols_),\n        \"terminals_: \" + JSON.stringify(this.terminals_).replace(/\"([0-9]+)\":/g,\"$1:\"),\n        \"productions_: \" + JSON.stringify(this.productions_),\n        \"performAction: \" + String(this.performAction),\n        \"table: \" + JSON.stringify(this.table).replace(/\"([0-9]+)\":/g,\"$1:\"),\n        \"defaultActions: \" + JSON.stringify(this.defaultActions).replace(/\"([0-9]+)\":/g,\"$1:\"),\n        \"parseError: \" + String(this.parseError || (this.hasErrorRecovery ? traceParseError : parser.parseError)),\n        \"parse: \" + parseFn\n        ].join(\",\\n\");\n    out += \"};\";\n\n    return out;\n};\n\n// default main method for generated commonjs modules\nfunction commonjsMain (args) {\n    if (!args[1]) {\n        console.log('Usage: '+args[0]+' FILE');\n        process.exit(1);\n    }\n    var source = require('fs').readFileSync(require('path').normalize(args[1]), \"utf8\");\n    return exports.parser.parse(source);\n}\n\n// debug mixin for LR parser generators\n\nfunction printAction (a, gen) {\n    var s = a[0] == 1 ? 'shift token (then go to state '+a[1]+')' :\n        a[0] == 2 ? 'reduce by rule: '+gen.productions[a[1]] :\n                    'accept' ;\n\n    return s;\n}\n\nvar lrGeneratorDebug = {\n    beforeparseTable: function () {\n        this.trace(\"Building parse table.\");\n    },\n    afterparseTable: function () {\n        var self = this;\n        if (this.conflicts > 0) {\n            this.resolutions.forEach(function (r, i) {\n                if (r[2].bydefault) {\n                    self.warn('Conflict at state: ',r[0], ', token: ',r[1], \"\\n  \", printAction(r[2].r, self), \"\\n  \", printAction(r[2].s, self));\n                }\n            });\n            this.trace(\"\\n\"+this.conflicts+\" Conflict(s) found in grammar.\");\n        }\n        this.trace(\"Done.\");\n    },\n    aftercanonicalCollection: function (states) {\n        var trace = this.trace;\n        trace(\"\\nItem sets\\n------\");\n\n        states.forEach(function (state, i) {\n            trace(\"\\nitem set\",i,\"\\n\"+state.join(\"\\n\"), '\\ntransitions -> ', JSON.stringify(state.edges));\n        });\n    }\n};\n\nvar parser = typal.beget();\n\nlrGeneratorMixin.createParser = function createParser () {\n    var p = parser.beget();\n    p.yy = {};\n\n    p.init({\n        table: this.table,\n        defaultActions: this.defaultActions,\n        productions_: this.productions_,\n        symbols_: this.symbols_,\n        terminals_: this.terminals_,\n        performAction: this.performAction\n    });\n\n    // don't throw if grammar recovers from errors\n    if (this.hasErrorRecovery) {\n        p.parseError = traceParseError;\n        p.recover = true;\n    }\n\n    // for debugging\n    p.productions = this.productions;\n\n    // backwards compatability\n    p.generate = this.generate;\n    p.lexer = this.lexer;\n    p.generateModule = this.generateModule;\n    p.generateCommonJSModule = this.generateCommonJSModule;\n    p.generateModule_ = this.generateModule_;\n\n    var gen = this;\n\n    p.Parser = function () {\n      return gen.createParser();\n    };\n\n    return p;\n};\n\nparser.trace = generator.trace;\nparser.warn = generator.warn;\nparser.error = generator.error;\n\nfunction traceParseError (err, hash) {\n    this.trace(err);\n}\n\nfunction parseError (str, hash) {\n    if (hash.recoverable) {\n        this.trace(str);\n    } else {\n        throw new Error(str);\n    }\n}\n\nparser.parseError = lrGeneratorMixin.parseError = parseError;\n\nparser.parse = function parse (input) {\n    var self = this,\n        stack = [0],\n        vstack = [null], // semantic value stack\n        lstack = [], // location stack\n        table = this.table,\n        yytext = '',\n        yylineno = 0,\n        yyleng = 0,\n        recovering = 0,\n        TERROR = 2,\n        EOF = 1;\n\n    //this.reductionCount = this.shiftCount = 0;\n\n    this.lexer.setInput(input);\n    this.lexer.yy = this.yy;\n    this.yy.lexer = this.lexer;\n    this.yy.parser = this;\n    if (typeof this.lexer.yylloc == 'undefined') {\n        this.lexer.yylloc = {};\n    }\n    var yyloc = this.lexer.yylloc;\n    lstack.push(yyloc);\n\n    var ranges = this.lexer.options && this.lexer.options.ranges;\n\n    if (typeof this.yy.parseError === 'function') {\n        this.parseError = this.yy.parseError;\n    } else {\n        this.parseError = Object.getPrototypeOf(this).parseError; // because in the generated code 'this.__proto__.parseError' doesn't work for everyone: http://javascriptweblog.wordpress.com/2010/06/07/understanding-javascript-prototypes/\n    }\n\n    function popStack (n) {\n        stack.length = stack.length - 2 * n;\n        vstack.length = vstack.length - n;\n        lstack.length = lstack.length - n;\n    }\n\n    function lex() {\n        var token;\n        token = self.lexer.lex() || EOF; // $end = 1\n        // if token isn't its numeric value, convert\n        if (typeof token !== 'number') {\n            token = self.symbols_[token] || token;\n        }\n        return token;\n    }\n\n    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;\n    while (true) {\n        // retreive state number from top of stack\n        state = stack[stack.length - 1];\n\n        // use default actions if available\n        if (this.defaultActions[state]) {\n            action = this.defaultActions[state];\n        } else {\n            if (symbol === null || typeof symbol == 'undefined') {\n                symbol = lex();\n            }\n            // read action for current state and first input\n            action = table[state] && table[state][symbol];\n        }\n\n_handle_error:\n        // handle parse error\n        if (typeof action === 'undefined' || !action.length || !action[0]) {\n            var error_rule_depth;\n            var errStr = '';\n\n            // Return the rule stack depth where the nearest error rule can be found.\n            // Return FALSE when no error recovery rule was found.\n            function locateNearestErrorRecoveryRule(state) {\n                var stack_probe = stack.length - 1;\n                var depth = 0;\n\n                // try to recover from error\n                for(;;) {\n                    // check for error recovery rule in this state\n                    if ((TERROR.toString()) in table[state]) {\n                        return depth;\n                    }\n                    if (state === 0 || stack_probe < 2) {\n                        return false; // No suitable error recovery rule available.\n                    }\n                    stack_probe -= 2; // popStack(1): [symbol, action]\n                    state = stack[stack_probe];\n                    ++depth;\n                }\n            }\n\n            if (!recovering) {\n                // first see if there's any chance at hitting an error recovery rule:\n                error_rule_depth = locateNearestErrorRecoveryRule(state);\n\n                // Report error\n                expected = [];\n                for (p in table[state]) {\n                    if (this.terminals_[p] && p > TERROR) {\n                        expected.push(\"'\"+this.terminals_[p]+\"'\");\n                    }\n                }\n                if (this.lexer.showPosition) {\n                    errStr = 'Parse error on line '+(yylineno+1)+\":\\n\"+this.lexer.showPosition()+\"\\nExpecting \"+expected.join(', ') + \", got '\" + (this.terminals_[symbol] || symbol)+ \"'\";\n                } else {\n                    errStr = 'Parse error on line '+(yylineno+1)+\": Unexpected \" +\n                                  (symbol == EOF ? \"end of input\" :\n                                              (\"'\"+(this.terminals_[symbol] || symbol)+\"'\"));\n                }\n                this.parseError(errStr, {\n\t\t\t\t\t\ttext: this.lexer.match,\n\t\t\t\t\t\ttoken: this.terminals_[symbol] || symbol,\n\t\t\t\t\t\tline: this.lexer.yylineno,\n\t\t\t\t\t\tloc: yyloc,\n\t\t\t\t\t\texpected: expected,\n                        recoverable: (error_rule_depth !== false)\n\t\t\t\t});\n            } else if (preErrorSymbol !== EOF) {\n                error_rule_depth = locateNearestErrorRecoveryRule(state);\n            }\n\n            // just recovered from another error\n            if (recovering == 3) {\n                if (symbol === EOF || preErrorSymbol === EOF) {\n                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');\n                }\n\n                // discard current lookahead and grab another\n                yyleng = this.lexer.yyleng;\n                yytext = this.lexer.yytext;\n                yylineno = this.lexer.yylineno;\n                yyloc = this.lexer.yylloc;\n                symbol = lex();\n            }\n\n            // try to recover from error\n            if (error_rule_depth === false) {\n                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');\n            }\n            popStack(error_rule_depth);\n\n            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token\n            symbol = TERROR;         // insert generic error symbol as new lookahead\n            state = stack[stack.length-1];\n            action = table[state] && table[state][TERROR];\n            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error\n        }\n\n        // this shouldn't happen, unless resolve defaults are off\n        if (action[0] instanceof Array && action.length > 1) {\n            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);\n        }\n\n        switch (action[0]) {\n            case 1: // shift\n                //this.shiftCount++;\n\n                stack.push(symbol);\n                vstack.push(this.lexer.yytext);\n                lstack.push(this.lexer.yylloc);\n                stack.push(action[1]); // push state\n                symbol = null;\n                if (!preErrorSymbol) { // normal execution/no error\n                    yyleng = this.lexer.yyleng;\n                    yytext = this.lexer.yytext;\n                    yylineno = this.lexer.yylineno;\n                    yyloc = this.lexer.yylloc;\n                    if (recovering > 0) {\n                        recovering--;\n                    }\n                } else {\n                    // error just occurred, resume old lookahead f/ before error\n                    symbol = preErrorSymbol;\n                    preErrorSymbol = null;\n                }\n                break;\n\n            case 2:\n                // reduce\n                //this.reductionCount++;\n\n                len = this.productions_[action[1]][1];\n\n                // perform semantic action\n                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1\n                // default location, uses first token for firsts, last for lasts\n                yyval._$ = {\n                    first_line: lstack[lstack.length-(len||1)].first_line,\n                    last_line: lstack[lstack.length-1].last_line,\n                    first_column: lstack[lstack.length-(len||1)].first_column,\n                    last_column: lstack[lstack.length-1].last_column\n                };\n                if (ranges) {\n                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];\n                }\n                r = this.performAction.call(yyval, yytext, yyleng, yylineno, this.yy, action[1], vstack, lstack);\n\n                if (typeof r !== 'undefined') {\n                    return r;\n                }\n\n                // pop off stack\n                if (len) {\n                    stack = stack.slice(0,-1*len*2);\n                    vstack = vstack.slice(0, -1*len);\n                    lstack = lstack.slice(0, -1*len);\n                }\n\n                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)\n                vstack.push(yyval.$);\n                lstack.push(yyval._$);\n                // goto new state = table[STATE][NONTERMINAL]\n                newState = table[stack[stack.length-2]][stack[stack.length-1]];\n                stack.push(newState);\n                break;\n\n            case 3:\n                // accept\n                return true;\n        }\n\n    }\n\n    return true;\n};\n\nparser.init = function parser_init (dict) {\n    this.table = dict.table;\n    this.defaultActions = dict.defaultActions;\n    this.performAction = dict.performAction;\n    this.productions_ = dict.productions_;\n    this.symbols_ = dict.symbols_;\n    this.terminals_ = dict.terminals_;\n};\n\n/*\n * LR(0) Parser\n * */\n\nvar lr0 = generator.beget(lookaheadMixin, lrGeneratorMixin, {\n    type: \"LR(0)\",\n    afterconstructor: function lr0_afterconstructor () {\n        this.buildTable();\n    }\n});\n\nvar LR0Generator = exports.LR0Generator = lr0.construct();\n\n/*\n * Simple LALR(1)\n * */\n\nvar lalr = generator.beget(lookaheadMixin, lrGeneratorMixin, {\n    type: \"LALR(1)\",\n\n    afterconstructor: function (grammar, options) {\n        if (this.DEBUG) this.mix(lrGeneratorDebug, lalrGeneratorDebug); // mixin debug methods\n\n        options = options || {};\n        this.states = this.canonicalCollection();\n        this.terms_ = {};\n\n        var newg = this.newg = typal.beget(lookaheadMixin,{\n            oldg: this,\n            trace: this.trace,\n            nterms_: {},\n            DEBUG: false,\n            go_: function (r, B) {\n                r = r.split(\":\")[0]; // grab state #\n                B = B.map(function (b) { return b.slice(b.indexOf(\":\")+1); });\n                return this.oldg.go(r, B);\n            }\n        });\n        newg.nonterminals = {};\n        newg.productions = [];\n\n        this.inadequateStates = [];\n\n        // if true, only lookaheads in inadequate states are computed (faster, larger table)\n        // if false, lookaheads for all reductions will be computed (slower, smaller table)\n        this.onDemandLookahead = options.onDemandLookahead || false;\n\n        this.buildNewGrammar();\n        newg.computeLookaheads();\n        this.unionLookaheads();\n\n        this.table = this.parseTable(this.states);\n        this.defaultActions = findDefaults(this.table);\n    },\n\n    lookAheads: function LALR_lookaheads (state, item) {\n        return (!!this.onDemandLookahead && !state.inadequate) ? this.terminals : item.follows;\n    },\n    go: function LALR_go (p, w) {\n        var q = parseInt(p, 10);\n        for (var i=0;i<w.length;i++) {\n            q = this.states.item(q).edges[w[i]] || q;\n        }\n        return q;\n    },\n    goPath: function LALR_goPath (p, w) {\n        var q = parseInt(p, 10),t,\n            path = [];\n        for (var i=0;i<w.length;i++) {\n            t = w[i] ? q+\":\"+w[i] : '';\n            if (t) this.newg.nterms_[t] = q;\n            path.push(t);\n            q = this.states.item(q).edges[w[i]] || q;\n            this.terms_[t] = w[i];\n        }\n        return {path: path, endState: q};\n    },\n    // every disjoint reduction of a nonterminal becomes a produciton in G'\n    buildNewGrammar: function LALR_buildNewGrammar () {\n        var self = this,\n            newg = this.newg;\n\n        this.states.forEach(function (state, i) {\n            state.forEach(function (item) {\n                if (item.dotPosition === 0) {\n                    // new symbols are a combination of state and transition symbol\n                    var symbol = i+\":\"+item.production.symbol;\n                    self.terms_[symbol] = item.production.symbol;\n                    newg.nterms_[symbol] = i;\n                    if (!newg.nonterminals[symbol])\n                        newg.nonterminals[symbol] = new Nonterminal(symbol);\n                    var pathInfo = self.goPath(i, item.production.handle);\n                    var p = new Production(symbol, pathInfo.path, newg.productions.length);\n                    newg.productions.push(p);\n                    newg.nonterminals[symbol].productions.push(p);\n\n                    // store the transition that get's 'backed up to' after reduction on path\n                    var handle = item.production.handle.join(' ');\n                    var goes = self.states.item(pathInfo.endState).goes;\n                    if (!goes[handle])\n                        goes[handle] = [];\n                    goes[handle].push(symbol);\n\n                    //self.trace('new production:',p);\n                }\n            });\n            if (state.inadequate)\n                self.inadequateStates.push(i);\n        });\n    },\n    unionLookaheads: function LALR_unionLookaheads () {\n        var self = this,\n            newg = this.newg,\n            states = !!this.onDemandLookahead ? this.inadequateStates : this.states;\n\n        states.forEach(function union_states_forEach (i) {\n            var state = typeof i === 'number' ? self.states.item(i) : i,\n                follows = [];\n            if (state.reductions.length)\n            state.reductions.forEach(function union_reduction_forEach (item) {\n                var follows = {};\n                for (var k=0;k<item.follows.length;k++) {\n                    follows[item.follows[k]] = true;\n                }\n                state.goes[item.production.handle.join(' ')].forEach(function reduction_goes_forEach (symbol) {\n                    newg.nonterminals[symbol].follows.forEach(function goes_follows_forEach (symbol) {\n                        var terminal = self.terms_[symbol];\n                        if (!follows[terminal]) {\n                            follows[terminal]=true;\n                            item.follows.push(terminal);\n                        }\n                    });\n                });\n                //self.trace('unioned item', item);\n            });\n        });\n    }\n});\n\nvar LALRGenerator = exports.LALRGenerator = lalr.construct();\n\n// LALR generator debug mixin\n\nvar lalrGeneratorDebug = {\n    trace: function trace () {\n        Jison.print.apply(null, arguments);\n    },\n    beforebuildNewGrammar: function () {\n        this.trace(this.states.size()+\" states.\");\n        this.trace(\"Building lookahead grammar.\");\n    },\n    beforeunionLookaheads: function () {\n        this.trace(\"Computing lookaheads.\");\n    }\n};\n\n/*\n * Lookahead parser definitions\n *\n * Define base type\n * */\nvar lrLookaheadGenerator = generator.beget(lookaheadMixin, lrGeneratorMixin, {\n    afterconstructor: function lr_aftercontructor () {\n        this.computeLookaheads();\n        this.buildTable();\n    }\n});\n\n/*\n * SLR Parser\n * */\nvar SLRGenerator = exports.SLRGenerator = lrLookaheadGenerator.construct({\n    type: \"SLR(1)\",\n\n    lookAheads: function SLR_lookAhead (state, item) {\n        return this.nonterminals[item.production.symbol].follows;\n    }\n});\n\n\n/*\n * LR(1) Parser\n * */\nvar lr1 = lrLookaheadGenerator.beget({\n    type: \"Canonical LR(1)\",\n\n    lookAheads: function LR_lookAheads (state, item) {\n        return item.follows;\n    },\n    Item: lrGeneratorMixin.Item.prototype.construct({\n        afterconstructor: function () {\n            this.id = this.production.id+'a'+this.dotPosition+'a'+this.follows.sort().join(',');\n        },\n        eq: function (e) {\n            return e.id === this.id;\n        }\n    }),\n\n    closureOperation: function LR_ClosureOperation (itemSet /*, closureSet*/) {\n        var closureSet = new this.ItemSet();\n        var self = this;\n\n        var set = itemSet,\n            itemQueue, syms = {};\n\n        do {\n        itemQueue = new Set();\n        closureSet.concat(set);\n        set.forEach(function (item) {\n            var symbol = item.markedSymbol;\n            var b;\n\n            // if token is a nonterminal, recursively add closures\n            if (symbol && self.nonterminals[symbol]) {\n                b = self.first(item.remainingHandle());\n                if (b.length === 0 || item.production.nullable) b = b.concat(item.follows);\n                self.nonterminals[symbol].productions.forEach(function (production) {\n                    var newItem = new self.Item(production, 0, b);\n                    if(!closureSet.contains(newItem) && !itemQueue.contains(newItem)) {\n                        itemQueue.push(newItem);\n                    }\n                });\n            } else if (!symbol) {\n                // reduction\n                closureSet.reductions.push(item);\n            }\n        });\n\n        set = itemQueue;\n        } while (!itemQueue.isEmpty());\n\n        return closureSet;\n    }\n});\n\nvar LR1Generator = exports.LR1Generator = lr1.construct();\n\n/*\n * LL Parser\n * */\nvar ll = generator.beget(lookaheadMixin, {\n    type: \"LL(1)\",\n\n    afterconstructor: function ll_aftercontructor () {\n        this.computeLookaheads();\n        this.table = this.parseTable(this.productions);\n    },\n    parseTable: function llParseTable (productions) {\n        var table = {},\n            self = this;\n        productions.forEach(function (production, i) {\n            var row = table[production.symbol] || {};\n            var tokens = production.first;\n            if (self.nullable(production.handle)) {\n                Set.union(tokens, self.nonterminals[production.symbol].follows);\n            }\n            tokens.forEach(function (token) {\n                if (row[token]) {\n                    row[token].push(i);\n                    self.conflicts++;\n                } else {\n                    row[token] = [i];\n                }\n            });\n            table[production.symbol] = row;\n        });\n\n        return table;\n    }\n});\n\nvar LLGenerator = exports.LLGenerator = ll.construct();\n\nJison.Generator = function Jison_Generator (g, options) {\n    var opt = typal.mix.call({}, g.options, options);\n    switch (opt.type) {\n        case 'lr0':\n            return new LR0Generator(g, opt);\n        case 'slr':\n            return new SLRGenerator(g, opt);\n        case 'lr':\n            return new LR1Generator(g, opt);\n        case 'll':\n            return new LLGenerator(g, opt);\n        default:\n            return new LALRGenerator(g, opt);\n    }\n};\n\nreturn function Parser (g, options) {\n        var gen = Jison.Generator(g, options);\n        return gen.createParser();\n    };\n\n})();\n\n", "if (typeof require === \"function\") var Parser = require(\"jison\").Parser;\n\nvar parsexp = new Parser({\n    \"bnf\": {\n        \"pattern\": [\n            [\"expression EOF\", \"return $1;\"]\n        ],\n        \"expression\": [\n            [\"expression | sequence\", \"$$ = yy.expression($1, $3);\"],\n            [\"sequence\",              \"$$ = $1;\"]\n        ],\n        \"sequence\": [\n            [\"sequence group\", \"$$ = yy.sequence($1, $2);\"],\n            [\"group\",          \"$$ = $1;\"]\n        ],\n        \"group\": [\n            [\"atom *\", \"$$ = yy.group($1);\"],\n            [\"atom\",   \"$$ = $1;\"]\n        ],\n        \"atom\": [\n            [\"SYMBOL\",         \"$$ = yy.atom($1);\"],\n            [\"( expression )\", \"$$ = $2;\"]\n        ]\n    }\n});\n\nif (typeof module === \"object\") module.exports = parsexp;\n", "if (typeof module === \"object\" && typeof module.exports === \"object\") module.exports = Lexer;\n\nLexer.defunct = function (char) {\n    throw new Error(\"Unexpected character at index \" + (this.index - 1) + \": \" + char);\n};\n\nfunction Lexer(defunct) {\n    if (typeof defunct !== \"function\") defunct = Lexer.defunct;\n\n    var tokens = [];\n    var rules = [];\n    var remove = 0;\n    this.state = 0;\n    this.index = 0;\n    this.input = \"\";\n\n    this.addRule = function (pattern, action, start) {\n        var global = pattern.global;\n\n        if (!global) {\n            var flags = \"g\";\n            if (pattern.multiline) flags += \"m\";\n            if (pattern.ignoreCase) flags += \"i\";\n            pattern = new RegExp(pattern.source, flags);\n        }\n\n        if (Object.prototype.toString.call(start) !== \"[object Array]\") start = [0];\n\n        rules.push({\n            pattern: pattern,\n            global: global,\n            action: action,\n            start: start\n        });\n\n        return this;\n    };\n\n    this.setInput = function (input) {\n        remove = 0;\n        this.state = 0;\n        this.index = 0;\n        this.input = input;\n        return this;\n    };\n\n    this.lex = function () {\n        if (tokens.length) return tokens.shift();\n\n        this.reject = true;\n\n        while (this.index <= this.input.length) {\n            var matches = scan.call(this).splice(remove);\n            var index = this.index;\n\n            while (matches.length) {\n                if (this.reject) {\n                    var match = matches.shift();\n                    var result = match.result;\n                    var length = match.length;\n                    this.index += length;\n                    this.reject = false;\n                    remove++;\n\n                    var token = match.action.apply(this, result);\n                    if (this.reject) this.index = result.index;\n                    else if (typeof token !== \"undefined\") {\n                        switch (Object.prototype.toString.call(token)) {\n                        case \"[object Array]\":\n                            tokens = token.slice(1);\n                            token = token[0];\n                        default:\n                            if (length) remove = 0;\n                            return token;\n                        }\n                    }\n                } else break;\n            }\n\n            var input = this.input;\n\n            if (index < input.length) {\n                if (this.reject) {\n                    remove = 0;\n                    var token = defunct.call(this, input.charAt(this.index++));\n                    if (typeof token !== \"undefined\") {\n                        if (Object.prototype.toString.call(token) === \"[object Array]\") {\n                            tokens = token.slice(1);\n                            return token[0];\n                        } else return token;\n                    }\n                } else {\n                    if (this.index !== index) remove = 0;\n                    this.reject = true;\n                }\n            } else if (matches.length)\n                this.reject = true;\n            else break;\n        }\n    };\n\n    function scan() {\n        var matches = [];\n        var index = 0;\n\n        var state = this.state;\n        var lastIndex = this.index;\n        var input = this.input;\n\n        for (var i = 0, length = rules.length; i < length; i++) {\n            var rule = rules[i];\n            var start = rule.start;\n            var states = start.length;\n\n            if ((!states || start.indexOf(state) >= 0) ||\n                (state % 2 && states === 1 && !start[0])) {\n                var pattern = rule.pattern;\n                pattern.lastIndex = lastIndex;\n                var result = pattern.exec(input);\n\n                if (result && result.index === lastIndex) {\n                    var j = matches.push({\n                        result: result,\n                        action: rule.action,\n                        length: result[0].length\n                    });\n\n                    if (rule.global) index = j;\n\n                    while (--j > index) {\n                        var k = j - 1;\n\n                        if (matches[j].length > matches[k].length) {\n                            var temple = matches[j];\n                            matches[j] = matches[k];\n                            matches[k] = temple;\n                        }\n                    }\n                }\n            }\n        }\n\n        return matches;\n    }\n}\n", "if (typeof require === \"function\") var Lexer = require(\"lex\");\n\nvar reglex = new Lexer;\n\nreglex.addRule(/[(|)*]/, function (lexeme) {\n    return lexeme;\n});\n\nreglex.addRule(/./, function (lexeme) {\n    this.yytext = lexeme;\n    return \"SYMBOL\";\n});\n\nreglex.addRule(/$/, function () {\n    return \"EOF\";\n});\n\nif (typeof module === \"object\") module.exports = reglex;\n", "if (typeof require === \"function\") {\n    var parsexp = require(\"./parsexp\");\n    parsexp.lexer = require(\"./reglex\");\n} else parsexp.lexer = reglex;\n\nvar yy = parsexp.yy;\nvar parse = parsexp.parse.bind(parsexp);\nif (typeof module === \"object\") module.exports = parse;\n\nyy.atom = function (symbol) {\n    var start = {};\n    var final = {};\n\n    start[symbol] = [final];\n\n    return {\n        start: start,\n        final: final\n    };\n};\n\nyy.group = function (atom) {\n    var start = {};\n    var final = {};\n\n    var moves = start[\"\"] = [atom.start, final];\n    addMoves(atom.final, \"\", moves.slice());\n\n    return {\n        start: start,\n        final: final\n    };\n};\n\nyy.sequence = function (sequence, group) {\n    var start = sequence.start;\n    var final = group.final;\n\n    var begin = group.start; \n    var end = sequence.final;\n    addMoves(begin, \"\", [end]);\n    addMoves(end, \"\", [begin]);\n\n    return {\n        start: start,\n        final: final\n    };\n};\n\nyy.expression = function (expression, sequence) {\n    var start = {};\n    var final = {};\n\n    start[\"\"] = [expression.start, sequence.start];\n    addMoves(expression.final, \"\", [final]);\n    addMoves(sequence.final, \"\", [final]);\n\n    return {\n        start: start,\n        final: final\n    };\n};\n\nfunction addMoves(state, symbol, moves) {\n    var oldMoves = state[symbol];\n    state[symbol] = oldMoves ? oldMoves.concat(moves) : moves;\n}\n", "if (typeof require === \"function\") {\n    var StateMachine = require(\"statemachines\");\n    var parse = require(\"./parse\");\n    require(\"augment\");\n}\n\nvar nfa = Function.bindable(StateMachine.Nondeterministic, null);\nif (typeof module === \"object\") module.exports = Regex;\nRegex.convert = convert;\nRegex.parse = parse;\n\nfunction Regex(regexp) {\n    var graph = parse(regexp instanceof RegExp ? regexp.source : regexp);\n    var dfa = (new (nfa.apply(null, convert(graph)))).subset();\n    this.test = dfa.test.bind(dfa);\n}\n\nfunction convert(graph) {\n    var states = [graph.start];\n    var transition = [];\n    var cursor = 0;\n\n    while (cursor < states.length) {\n        var state = states[cursor++];\n        var symbols = Object.keys(state);\n        var length = symbols.length;\n        var tuple = {};\n\n        for (var i = 0; i < length; i++) {\n            var symbol = symbols[i];\n            var moves = state[symbol];\n            var degree = moves.length;\n            var transitions = [];\n\n            for (var j = 0; j < degree; j++) {\n                var move = moves[j];\n                var index = states.indexOf(move);\n\n                if (index < 0) {\n                    index = states.length;\n                    states.push(move);\n                }\n\n                transitions.push(index);\n            }\n\n            tuple[symbol] = transitions;\n        }\n\n        transition.push(tuple);\n    }\n\n    return [transition, [states.indexOf(graph.final)]];\n}\n"],
  "mappings": "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AAE,EAAE,GAAE,IAAG,CAAC,GAAE,EAAE,GAAE,IAAG,CAAC,GAAE,EAAE,GAAE,IAAG,CAAC,GAAE,CAAC,GAAE,IAAG,CAAC,GAAE,EAAE,GAAE,IAAG,CAAC,GAAE,EAAE,EAAC,GAAE,EAAC,GAAE,CAAC,GAAE,CAAC,GAAE,GAAE,CAAC,GAAE,CAAC,GAAE,IAAG,CAAC,GAAE,CAAC,GAAE,IAAG,CAAC,GAAE,CAAC,GAAE,IAAG,CAAC,GAAE,CAAC,GAAE,IAAG,CAAC,GAAE,CAAC,GAAE,IAAG,CAAC,GAAE,CAAC,GAAE,IAAG,CAAC,GAAE,CAAC,GAAE,IAAG,CAAC,GAAE,CAAC,EAAC,GAAE,EAAC,GAAE,IAAG,GAAE,IAAG,GAAE,CAAC,GAAE,CAAC,GAAE,IAAG,CAAC,GAAE,CAAC,GAAE,IAAG,CAAC,GAAE,CAAC,GAAE,IAAG,CAAC,GAAE,CAAC,EAAC,GAAE,EAAC,GAAE,CAAC,GAAE,CAAC,GAAE,GAAE,CAAC,GAAE,CAAC,GAAE,IAAG,CAAC,GAAE,EAAE,GAAE,IAAG,CAAC,GAAE,CAAC,GAAE,IAAG,CAAC,GAAE,CAAC,GAAE,IAAG,CAAC,GAAE,CAAC,EAAC,GAAE,EAAC,GAAE,CAAC,GAAE,EAAE,GAAE,GAAE,CAAC,GAAE,EAAE,GAAE,IAAG,CAAC,GAAE,EAAE,GAAE,IAAG,CAAC,GAAE,EAAE,GAAE,IAAG,CAAC,GAAE,EAAE,GAAE,IAAG,CAAC,GAAE,EAAE,EAAC,GAAE,EAAC,GAAE,CAAC,GAAE,EAAE,GAAE,GAAE,CAAC,GAAE,EAAE,GAAE,IAAG,CAAC,GAAE,EAAE,GAAE,IAAG,CAAC,GAAE,EAAE,GAAE,IAAG,CAAC,GAAE,EAAE,GAAE,IAAG,CAAC,GAAE,EAAE,EAAC,GAAE,EAAC,GAAE,CAAC,GAAE,EAAE,GAAE,GAAE,CAAC,GAAE,EAAE,GAAE,IAAG,CAAC,GAAE,EAAE,GAAE,IAAG,CAAC,GAAE,EAAE,GAAE,IAAG,CAAC,GAAE,EAAE,GAAE,IAAG,CAAC,GAAE,EAAE,EAAC,GAAE,EAAC,GAAE,CAAC,GAAE,EAAE,GAAE,IAAG,CAAC,GAAE,EAAE,E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",
  "names": ["moves", "lex", "lexer", "RegExpLexer", "lexer", "lexer", "exports", "exports", "index", "length", "exports", "isArray", "normalize", "section", "require_package", "isArray", "join", "target", "indent", "token", "comment", "require_package", "print", "Nonterminal", "Production", "sym", "firsts", "production", "i", "stackSymbol", "locateNearestErrorRecoveryRule", "state", "follows", "symbol", "global", "reglex"]
}
